{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport { Dropdown, Menu, message } from 'antd';\nimport { DownOutlined, StopOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport { getResponseError } from '@lib/utils';\nimport { performerService } from '@services/perfomer.service';\n\nconst StreamingChatUsers = ({\n  loggedIn,\n  members,\n  currentPerformer,\n  placeholderAvatarUrl\n}) => {\n  const blockUser = React.useCallback(async ({\n    key\n  }) => {\n    if (!window.confirm('Are you sure to block this user?')) return;\n\n    try {\n      await performerService.geoBlock({\n        userIds: [key]\n      });\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    }\n  }, [members]);\n  return __jsx(\"div\", {\n    className: \"conversation-users\"\n  }, __jsx(\"div\", {\n    className: \"users\"\n  }, members.length > 0 && members.map(m => __jsx(\"div\", {\n    className: \"user\",\n    key: m._id\n  }, loggedIn && currentPerformer && currentPerformer._id ? __jsx(Dropdown, {\n    overlay: __jsx(Menu, null, __jsx(Menu.Item, {\n      onClick: blockUser,\n      key: m._id\n    }, __jsx(\"span\", null, __jsx(StopOutlined, {\n      size: 16\n    }), ' ', \"Block this user\"))),\n    placement: \"bottomLeft\",\n    trigger: ['hover', 'click']\n  }, __jsx(\"span\", {\n    className: \"username\"\n  }, __jsx(\"img\", {\n    alt: \"avatar\",\n    src: (m === null || m === void 0 ? void 0 : m.avatar) || placeholderAvatarUrl,\n    width: \"35px\",\n    style: {\n      borderRadius: '50%',\n      marginRight: '5px'\n    }\n  }), m.username, ' ', __jsx(DownOutlined, null))) : __jsx(\"span\", {\n    className: \"username\"\n  }, __jsx(\"img\", {\n    alt: \"avatar\",\n    src: (m === null || m === void 0 ? void 0 : m.avatar) || '/default-user-icon.png',\n    width: \"35px\",\n    style: {\n      borderRadius: '50%',\n      marginRight: '5px'\n    }\n  }), m.username)))));\n};\n\nconst mapStates = state => ({\n  placeholderAvatarUrl: state.ui.placeholderAvatarUrl\n});\n\nexport default connect(mapStates)(StreamingChatUsers);","map":null,"metadata":{},"sourceType":"module"}