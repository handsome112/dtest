{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-return-assign */\nimport './footer.less';\nimport { SETTING_KEYS } from 'src/constants';\nimport React from 'react';\nimport { Row, Col, Button, message } from 'antd';\nimport { PlusCircleOutlined, UserOutlined, CrownOutlined } from '@ant-design/icons';\nimport { checkUserLogin, getResponseError } from 'src/lib/utils';\nimport Router from 'next/router';\nimport Popup from '@components/common/base/popup';\nimport { transactionService } from 'src/services';\nimport NumberFormat from '@components/common/layout/numberformat';\nimport SendTipContent from './tip/content';\nvar btnStyle = {\n  height: 50,\n  marginBottom: 1\n};\n\nvar Footer = function Footer(_ref) {\n  var activeConversation = _ref.activeConversation,\n      performer = _ref.performer,\n      loggedIn = _ref.loggedIn,\n      inGroupChat = _ref.inGroupChat,\n      inPrivateChat = _ref.inPrivateChat,\n      user = _ref.user,\n      updateCurrentUserBalance = _ref.updateCurrentUserBalance,\n      settings = _ref.settings;\n  var tipPopupRef = /*#__PURE__*/React.createRef();\n  var contentRef;\n  var username = performer.username,\n      _id = performer._id;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tipping = _React$useState2[0],\n      setTipping = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      disableOk = _React$useState4[0],\n      setDisableOk = _React$useState4[1];\n\n  var handleError = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var error;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Promise.resolve(e);\n\n            case 2:\n              error = _context.sent;\n              message.error(getResponseError(error));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleError(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var goChatRoom = function goChatRoom(roomName) {\n    if (!checkUserLogin(loggedIn, user)) {\n      if (true) {\n        Router.push('/auth/login');\n      }\n\n      return;\n    }\n\n    var option = roomName === 'privatechat' ? SETTING_KEYS.OPTION_FOR_PRIVATE : SETTING_KEYS.OPTION_FOR_GROUP;\n    var path = settings[option] === 'webrtc' ? 'webrtc/' : '';\n    Router.push({\n      pathname: \"/stream/\".concat(path).concat(roomName),\n      query: {\n        username: username,\n        performer: JSON.stringify(performer)\n      }\n    }, \"/stream/\".concat(path).concat(roomName, \"/\").concat(username));\n  };\n\n  var getMoreTokens = function getMoreTokens() {\n    if (!checkUserLogin(loggedIn, user)) {\n      if (true) {\n        Router.push('/auth/login');\n      }\n\n      return;\n    }\n\n    Router.push('/account/user/funds-tokens');\n  };\n\n  var sendTip = function sendTip() {\n    if (!checkUserLogin(loggedIn, user)) {\n      message.error(\"Please login to send tip to \".concat(username, \"!\"));\n      return;\n    }\n\n    tipPopupRef.current && tipPopupRef.current.setVisible(true);\n  };\n\n  var onOk = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _activeConversation$d;\n\n      var ref, token, content;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d = activeConversation.data) !== null && _activeConversation$d !== void 0 && _activeConversation$d._id)) {\n                _context2.next = 22;\n                break;\n              }\n\n              ref = tipPopupRef.current;\n              _context2.prev = 2;\n              setTipping(true);\n              token = contentRef ? contentRef.getValueToken() : 0;\n\n              if (!(parseInt(token, 10) <= 0)) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 7:\n              _context2.next = 9;\n              return transactionService.sendTipToken(_id, token, activeConversation.data._id);\n\n            case 9:\n              ref && ref.setVisible(false);\n              updateCurrentUserBalance && updateCurrentUserBalance(-token);\n              content = __jsx(NumberFormat, {\n                value: token,\n                prefix: \"You sent \",\n                suffix: \" tokens\"\n              });\n              message.success(content);\n              _context2.next = 18;\n              break;\n\n            case 15:\n              _context2.prev = 15;\n              _context2.t0 = _context2[\"catch\"](2);\n              handleError(_context2.t0);\n\n            case 18:\n              _context2.prev = 18;\n              setTipping(false);\n              ref && ref.setVisible(false);\n              return _context2.finish(18);\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 15, 18, 22]]);\n    }));\n\n    return function onOk() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    className: \"stream-footer\"\n  }, __jsx(Popup, {\n    title: \"Tips to \".concat(username),\n    okButtonProps: {\n      disabled: disableOk\n    },\n    content: __jsx(SendTipContent, {\n      ref: function ref(_ref4) {\n        return contentRef = _ref4;\n      },\n      setDisableOk: setDisableOk\n    }),\n    ref: tipPopupRef,\n    loading: tipping,\n    onOk: onOk,\n    width: 567\n  }), __jsx(Row, {\n    gutter: [1, 1],\n    style: {\n      marginBottom: '15px',\n      marginTop: '1px'\n    }\n  }, __jsx(Col, {\n    lg: 6,\n    xs: 12,\n    md: 12\n  }, __jsx(Button, {\n    disabled: inGroupChat,\n    type: \"primary\",\n    style: _objectSpread({}, btnStyle),\n    onClick: function onClick() {\n      return goChatRoom('groupchat');\n    },\n    block: true,\n    icon: __jsx(\"img\", {\n      className: \"anticon\",\n      src: \"/icons/group.svg\",\n      height: 16,\n      alt: \"\"\n    })\n  }, \"Group Chat\")), __jsx(Col, {\n    lg: 6,\n    xs: 12,\n    md: 12\n  }, __jsx(Button, {\n    disabled: inPrivateChat,\n    type: \"primary\",\n    style: _objectSpread({}, btnStyle),\n    onClick: function onClick() {\n      return goChatRoom('privatechat');\n    },\n    block: true,\n    icon: __jsx(UserOutlined, null)\n  }, \"Private Chat\")), __jsx(Col, {\n    lg: 6,\n    xs: 12,\n    md: 12\n  }, __jsx(Button, {\n    type: \"primary\",\n    style: _objectSpread({}, btnStyle),\n    block: true,\n    onClick: function onClick() {\n      return getMoreTokens();\n    },\n    icon: __jsx(CrownOutlined, null)\n  }, \"Top-up My Tokens\")), __jsx(Col, {\n    lg: 6,\n    xs: 12,\n    md: 12\n  }, __jsx(Button, {\n    type: \"primary\",\n    style: _objectSpread({}, btnStyle),\n    onClick: function onClick() {\n      return sendTip();\n    },\n    block: true,\n    icon: __jsx(PlusCircleOutlined, null)\n  }, \"Send Tip\"))));\n};\n\nFooter.defaultProps = {\n  updateCurrentUserBalance: null,\n  inGroupChat: false,\n  inPrivateChat: false\n};\nexport default Footer;","map":null,"metadata":{},"sourceType":"module"}