{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/dtest.live/src/components/streaming/group-streaming-container.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable camelcase */\nimport React, { PureComponent } from 'react';\nimport withAntmedia from 'src/antmedia';\nimport { Button, message } from 'antd';\nimport Router from 'next/router';\nimport { SocketContext } from 'src/socket';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport { streamService } from 'src/services';\nimport { getResponseError } from '@lib/utils';\nimport videojs from 'video.js';\nimport { isMobile } from 'react-device-detect';\nimport './group-streaming-container.less';\nvar STREAM_JOINED = 'private-stream/streamJoined';\nvar STREAM_LEAVED = 'private-stream/streamLeaved';\nvar JOINED_THE_ROOM = 'JOINED_THE_ROOM';\nvar MODEL_LEFT_ROOM = 'MODEL_LEFT_ROOM';\n\nvar GroupStreamingContainer = /*#__PURE__*/function (_PureComponent) {\n  _inherits(GroupStreamingContainer, _PureComponent);\n\n  var _super = _createSuper(GroupStreamingContainer);\n\n  function GroupStreamingContainer(props) {\n    var _this;\n\n    _classCallCheck(this, GroupStreamingContainer);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"socket\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"publisher\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"players\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"getLiveStreamOrVodURLInterval\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"onbeforeunload\", function () {\n      _this.leaveStream();\n    });\n\n    _this.state = {\n      streamId: null,\n      streamList: [],\n      conversationId: null,\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(GroupStreamingContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var initWebRTCAdaptor = this.props.initWebRTCAdaptor;\n      this.socket = this.context;\n      this.socket.on(JOINED_THE_ROOM, function (data) {\n        var streamId = data.streamId,\n            streamList = data.streamList,\n            _id = data.conversationId;\n        var conversationId = _this2.state.conversationId;\n        if (_id !== conversationId) return;\n\n        _this2.setState({\n          streamId: streamId,\n          streamList: streamList\n        });\n\n        initWebRTCAdaptor(_this2.handelWebRTCAdaptorCallback.bind(_this2));\n\n        if (streamList.length) {\n          streamList.forEach(function (id) {\n            var player = document.createElement('video');\n            var container = document.getElementById('group-video-container');\n            player.setAttribute('id', id);\n            player.setAttribute('class', 'video-js broadcaster');\n            player.setAttribute('autoplay', 'autoplay');\n            container.append(player);\n            _this2.players[id] = videojs(id, {\n              height: 100,\n              width: container.offsetWidth / 4,\n              controls: true,\n              controlBar: {\n                playToggle: false,\n                liveDisplay: false\n              }\n            }, function () {\n              return _this2.onReadyCallback(id);\n            });\n          });\n        }\n      });\n      this.socket.on(STREAM_LEAVED, function (data) {\n        var _this2$state = _this2.state,\n            conversationId = _this2$state.conversationId,\n            streamId = _this2$state.streamId,\n            streamList = _this2$state.streamList;\n        if (conversationId !== data.conversationId || streamId === data.streamId) return;\n\n        _this2.setState({\n          streamList: streamList.filter(function (id) {\n            return id !== data.streamId;\n          })\n        });\n\n        if (_this2.players[data.streamId]) {\n          _this2.players[data.streamId].dispose();\n\n          delete _this2.players[data.streamId];\n        }\n      });\n      this.socket.on(STREAM_JOINED, function (data) {\n        var _this2$state2 = _this2.state,\n            streamList = _this2$state2.streamList,\n            streamId = _this2$state2.streamId,\n            conversationId = _this2$state2.conversationId;\n        if (conversationId !== data.conversationId) return;\n\n        if (streamId !== data.streamId) {\n          _this2.setState({\n            streamList: [].concat(_toConsumableArray(streamList), [data.streamId])\n          });\n\n          var player = document.createElement('video');\n          var container = document.getElementById('group-video-container');\n          player.setAttribute('id', data.streamId);\n          player.setAttribute('class', 'video-js broadcaster');\n          player.setAttribute('autoplay', 'autoplay');\n          container.append(player);\n          _this2.players[data.streamId] = videojs(data.streamId, {\n            height: 100,\n            width: container.offsetWidth / 4,\n            muted: data.streamId === streamId,\n            controls: true,\n            controlBar: {\n              playToggle: false,\n              liveDisplay: false\n            }\n          }, function () {\n            return _this2.onReadyCallback(data.streamId);\n          });\n        }\n      });\n      this.socket.on(MODEL_LEFT_ROOM, function (data) {\n        var conversationId = _this2.state.conversationId;\n        if (conversationId !== data.conversationId) return;\n        message.error('Model has left the room. You will be redirected in 10 seconds');\n        setTimeout(function () {\n          Router.push('/');\n        }, 10000);\n      });\n      Router.events.on('routeChangeStart', this.onbeforeunload);\n      window.addEventListener('beforeunload', this.onbeforeunload);\n    }\n  }, {\n    key: \"onReadyCallback\",\n    value: function () {\n      var _onReadyCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(streamId) {\n        var _this3 = this;\n\n        var _this$props, settings, configs, appName, src, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _this$props = this.props, settings = _this$props.settings, configs = _this$props.configs;\n                appName = configs.appName || settings.AntMediaAppname;\n                _context.next = 5;\n                return streamService.getLiveStreamOrVodURL({\n                  appName: appName,\n                  settings: settings,\n                  streamId: streamId\n                });\n\n              case 5:\n                src = _context.sent;\n\n                if (src) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 8:\n                this.players[streamId].addClass('vjs-waiting');\n                this.players[streamId].on('ended', function () {\n                  return _this3.ended(streamId);\n                });\n                this.players[streamId].on('error', function () {\n                  return _this3.ended(streamId);\n                });\n                setTimeout(function () {\n                  if (!_this3.players[streamId]) return;\n\n                  _this3.players[streamId].src({\n                    type: 'application/x-mpegURL',\n                    src: src\n                  });\n\n                  _this3.players[streamId].play();\n                }, 10 * 1000);\n                _context.next = 20;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](0);\n                _context.next = 18;\n                return Promise.resolve(_context.t0);\n\n              case 18:\n                error = _context.sent;\n                message.error(getResponseError(error));\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 14]]);\n      }));\n\n      function onReadyCallback(_x) {\n        return _onReadyCallback.apply(this, arguments);\n      }\n\n      return onReadyCallback;\n    }()\n  }, {\n    key: \"handelWebRTCAdaptorCallback\",\n    value: function () {\n      var _handelWebRTCAdaptorCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(info, obj) {\n        var _this4 = this;\n\n        var _this$props2, webRTCAdaptor, settings, configs, _this$state, conversationId, streamId, token, container, player;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props2 = this.props, webRTCAdaptor = _this$props2.webRTCAdaptor, settings = _this$props2.settings, configs = _this$props2.configs;\n                _this$state = this.state, conversationId = _this$state.conversationId, streamId = _this$state.streamId;\n\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.INITIALIZED)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                _context2.next = 5;\n                return streamService.getPublishToken({\n                  streamId: streamId,\n                  settings: settings\n                });\n\n              case 5:\n                token = _context2.sent;\n                webRTCAdaptor.publish(streamId, token);\n                _context2.next = 10;\n                break;\n\n              case 9:\n                if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_STARTED) {\n                  if (!isMobile) {\n                    container = document.getElementById('group-video-container');\n                    player = videojs(configs.localVideoId, {\n                      liveui: true,\n                      controls: true,\n                      muted: true,\n                      height: 100,\n                      width: container.offsetWidth / 4,\n                      bigPlayButton: false,\n                      controlBar: {\n                        playToggle: false,\n                        currentTimeDisplay: false,\n                        fullscreenToggle: false,\n                        pictureInPictureToggle: false,\n                        volumePanel: false\n                      }\n                    });\n                    player.on('error', function () {\n                      player.error(null);\n                    });\n                    player.one('play', function () {\n                      _this4.publisher = player;\n                    });\n                  }\n\n                  this.socket.emit('private-stream/join', {\n                    conversationId: conversationId,\n                    streamId: obj.streamId\n                  });\n                  this.setState({\n                    loading: false\n                  });\n                } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_FINISHED) {\n                  if (this.publisher) {\n                    this.publisher.dispose();\n                    this.publisher = undefined;\n                  }\n\n                  this.socket.emit('private-stream/leave', {\n                    conversationId: conversationId,\n                    streamId: obj.streamId\n                  });\n                  this.setState({\n                    loading: false\n                  });\n                }\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handelWebRTCAdaptorCallback(_x2, _x3) {\n        return _handelWebRTCAdaptorCallback.apply(this, arguments);\n      }\n\n      return handelWebRTCAdaptorCallback;\n    }()\n  }, {\n    key: \"start\",\n    value: function start(sessionId, conversationId) {\n      this.setState({\n        conversationId: conversationId\n      });\n    }\n  }, {\n    key: \"leaveStream\",\n    value: function leaveStream() {\n      var _this5 = this;\n\n      var publish_started = this.props.publish_started;\n      var _this$state2 = this.state,\n          conversationId = _this$state2.conversationId,\n          streamId = _this$state2.streamId;\n      Object.keys(this.getLiveStreamOrVodURLInterval).forEach(function (id) {\n        clearInterval(_this5.getLiveStreamOrVodURLInterval[id]);\n        delete _this5.getLiveStreamOrVodURLInterval[id];\n      });\n\n      if (this.publisher) {\n        this.publisher.dispose();\n        this.publisher = undefined;\n      }\n\n      Object.keys(this.players).forEach(function (id) {\n        if (_this5.players[id]) {\n          _this5.players[id].dispose();\n\n          _this5.players[id] = undefined;\n        }\n      });\n      this.socket.off(JOINED_THE_ROOM);\n      this.socket.off(STREAM_JOINED);\n      this.socket.off(STREAM_LEAVED);\n      this.socket.off(MODEL_LEFT_ROOM);\n\n      if (streamId && publish_started) {\n        this.socket.emit('private-stream/leave', {\n          conversationId: conversationId,\n          streamId: streamId\n        });\n      }\n\n      this.setState({\n        streamId: null,\n        streamList: [],\n        conversationId: null\n      });\n    }\n  }, {\n    key: \"ended\",\n    value: function () {\n      var _ended = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(streamId) {\n        var _this6 = this;\n\n        var settings, src;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.players[streamId] && this.players[streamId].error(null);\n                settings = this.props.settings;\n                _context3.next = 4;\n                return streamService.getLiveStreamOrVodURL({\n                  streamId: streamId,\n                  settings: settings,\n                  appName: settings.AntMediaAppname\n                });\n\n              case 4:\n                src = _context3.sent;\n\n                if (src) {\n                  this.getLiveStreamOrVodURLInterval[streamId] = setInterval(function () {\n                    fetch(src, {\n                      method: 'HEAD'\n                    }).then(function () {\n                      if (_this6.players[streamId]) {\n                        _this6.players[streamId].src({\n                          type: 'application/x-mpegURL',\n                          src: src\n                        });\n\n                        _this6.players[streamId].play();\n                      }\n\n                      _this6.getLiveStreamOrVodURLInterval[streamId] && clearInterval(_this6.getLiveStreamOrVodURLInterval[streamId]);\n                    });\n                  }, 5000);\n                }\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function ended(_x4) {\n        return _ended.apply(this, arguments);\n      }\n\n      return ended;\n    }()\n  }, {\n    key: \"leave\",\n    value: function leave() {\n      if (true) {\n        window.location.reload();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var leaveSession = this.props.leaveSession;\n      leaveSession();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          _onClick = _this$props3.onClick,\n          initialized = _this$props3.initialized,\n          configs = _this$props3.configs,\n          publish_started = _this$props3.publish_started;\n      var loading = this.state.loading;\n      return __jsx(React.Fragment, null, !initialized ? __jsx(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _onClick();\n        },\n        loading: loading,\n        block: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }\n      }, \"Start Streaming\") : __jsx(Button, {\n        type: \"primary\",\n        onClick: this.leave.bind(this),\n        block: true,\n        disabled: loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }\n      }, \"Stop Streaming\"), __jsx(\"div\", {\n        style: {\n          position: 'relative'\n        },\n        className: \"stream-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        id: \"group-video-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }\n      }, __jsx(\"video\", {\n        id: configs.localVideoId,\n        className: \"video-js broadcaster\",\n        hidden: !publish_started,\n        muted: true,\n        controls: true,\n        autoPlay: true,\n        playsInline: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return GroupStreamingContainer;\n}(PureComponent);\n\nGroupStreamingContainer.contextType = SocketContext;\nexport default withAntmedia(GroupStreamingContainer);","map":null,"metadata":{},"sourceType":"module"}