{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable no-return-assign */\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { sendStreamMessage } from '@redux/stream-chat/actions';\nimport { Input, message } from 'antd';\nimport { SendOutlined } from '@ant-design/icons';\nimport Emotions from './emotions';\nimport './Compose.less';\n\nvar Compose = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Compose, _PureComponent);\n\n  var _super = _createSuper(Compose);\n\n  function Compose(props) {\n    var _this;\n\n    _classCallCheck(this, Compose);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"uploadRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_input\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      text: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (evt) {\n      if (evt.keyCode === 13) {\n        _this.send();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (evt) {\n      _this.setText(evt.target.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEmojiClick\", function (emojiObject) {\n      var text = _this.state.text;\n\n      _this.setText(text + emojiObject.emoji);\n    });\n\n    _this.uploadRef = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  _createClass(Compose, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.uploadRef) this.uploadRef = /*#__PURE__*/React.createRef();\n      if (!this._input) this._input = /*#__PURE__*/React.createRef();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(previousProps) {\n      var sendMessage = this.props.sendMessage;\n\n      if (sendMessage.success !== previousProps.sendMessage.success) {\n        this.setText('');\n        this._input && this._input.focus();\n      }\n    }\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      this.setState({\n        text: text\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send() {\n      var text = this.state.text;\n      var loggedIn = this.props.loggedIn;\n\n      if (!loggedIn) {\n        message.error('Please login');\n        return;\n      }\n\n      if (!text) {\n        return;\n      }\n\n      var _this$props = this.props,\n          conversation = _this$props.conversation,\n          isPublic = _this$props.isPublic,\n          dispatchSendStreamMessage = _this$props.sendStreamMessage;\n      var _id = conversation._id,\n          type = conversation.type;\n      dispatchSendStreamMessage({\n        conversationId: _id,\n        data: {\n          text: text\n        },\n        type: type,\n        isPublic: isPublic\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var loggedIn = this.props.loggedIn;\n      var text = this.state.text;\n      var _this$props2 = this.props,\n          sendMessage = _this$props2.sendMessage,\n          conversation = _this$props2.conversation;\n      if (!this.uploadRef) this.uploadRef = /*#__PURE__*/React.createRef();\n      if (!this._input) this._input = /*#__PURE__*/React.createRef();\n      return __jsx(\"div\", {\n        className: \"compose\",\n        hidden: !loggedIn || !conversation._id\n      }, __jsx(Input, {\n        value: text,\n        className: \"compose-input\",\n        placeholder: \"Enter message here.\",\n        onKeyDown: this.onKeyDown,\n        onChange: this.onChange,\n        disabled: sendMessage.sending,\n        ref: function ref(c) {\n          return _this2._input = c;\n        }\n      }), __jsx(\"div\", {\n        className: \"grp-icons\"\n      }, __jsx(SendOutlined, {\n        onClick: this.send.bind(this),\n        style: {\n          fontSize: '25px',\n          marginRight: '10px',\n          color: '#fe26b3'\n        }\n      }), __jsx(\"div\", {\n        className: \"grp-emotions\"\n      }, __jsx(\"img\", {\n        src: \"/emotion-ico.png\",\n        width: \"25px\",\n        alt: \"\"\n      }), __jsx(Emotions, {\n        onEmojiClick: this.onEmojiClick.bind(this)\n      }))));\n    }\n  }]);\n\n  return Compose;\n}(PureComponent);\n\nvar mapStates = function mapStates(state) {\n  return {\n    loggedIn: state.auth.loggedIn,\n    sendMessage: state.streamMessage.sendMessage\n  };\n};\n\nvar mapDispatch = {\n  sendStreamMessage: sendStreamMessage\n};\nexport default connect(mapStates, mapDispatch)(Compose);","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/components/stream-chat/Compose.tsx"],"names":["React","PureComponent","connect","sendStreamMessage","Input","message","SendOutlined","Emotions","Compose","props","text","evt","keyCode","send","setText","target","value","emojiObject","state","emoji","uploadRef","createRef","_input","previousProps","sendMessage","success","focus","setState","loggedIn","error","conversation","isPublic","dispatchSendStreamMessage","_id","type","conversationId","data","onKeyDown","onChange","sending","c","bind","fontSize","marginRight","color","onEmojiClick","mapStates","auth","streamMessage","mapDispatch"],"mappings":"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","sourcesContent":["/* eslint-disable no-return-assign */\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { sendStreamMessage } from '@redux/stream-chat/actions';\nimport { Input, message } from 'antd';\nimport {\n  SendOutlined\n} from '@ant-design/icons';\nimport Emotions from './emotions';\nimport './Compose.less';\n\ninterface IProps {\n  loggedIn: boolean;\n  sendStreamMessage: Function;\n  sendMessage: any;\n  conversation: any;\n  isPublic?: boolean;\n}\n\nclass Compose extends PureComponent<IProps> {\n  uploadRef: any;\n\n  _input: any;\n\n  constructor(props) {\n    super(props);\n    this.uploadRef = React.createRef();\n  }\n\n  state = { text: '' };\n\n  componentDidMount() {\n    if (!this.uploadRef) this.uploadRef = React.createRef();\n    if (!this._input) this._input = React.createRef();\n  }\n\n  componentDidUpdate(previousProps: IProps) {\n    const { sendMessage } = this.props;\n    if (sendMessage.success !== previousProps.sendMessage.success) {\n      this.setText('');\n      this._input && this._input.focus();\n    }\n  }\n\n  onKeyDown = (evt) => {\n    if (evt.keyCode === 13) {\n      this.send();\n    }\n  };\n\n  onChange = (evt) => {\n    this.setText(evt.target.value);\n  };\n\n  onEmojiClick = (emojiObject) => {\n    const { text } = this.state;\n    this.setText(text + emojiObject.emoji);\n  }\n\n  setText(text) {\n    this.setState({ text });\n  }\n\n  send() {\n    const { text } = this.state;\n    const { loggedIn } = this.props;\n    if (!loggedIn) {\n      message.error('Please login');\n      return;\n    }\n\n    if (!text) {\n      return;\n    }\n\n    const { conversation, isPublic, sendStreamMessage: dispatchSendStreamMessage } = this.props;\n    const { _id, type } = conversation;\n    dispatchSendStreamMessage({\n      conversationId: _id,\n      data: {\n        text\n      },\n      type,\n      isPublic\n    });\n  }\n\n  render() {\n    const { loggedIn } = this.props;\n    const { text } = this.state;\n    const { sendMessage, conversation } = this.props;\n    if (!this.uploadRef) this.uploadRef = React.createRef();\n    if (!this._input) this._input = React.createRef();\n    return (\n      <div className=\"compose\" hidden={!loggedIn || !conversation._id}>\n        <Input\n          value={text}\n          className=\"compose-input\"\n          placeholder=\"Enter message here.\"\n          onKeyDown={this.onKeyDown}\n          onChange={this.onChange}\n          disabled={sendMessage.sending}\n          ref={(c) => (this._input = c)}\n        />\n        <div className=\"grp-icons\">\n          <SendOutlined onClick={this.send.bind(this)} style={{ fontSize: '25px', marginRight: '10px', color: '#fe26b3' }} />\n          <div className=\"grp-emotions\">\n            <img src=\"/emotion-ico.png\" width=\"25px\" alt=\"\" />\n            <Emotions onEmojiClick={this.onEmojiClick.bind(this)} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStates = (state: any) => ({\n  loggedIn: state.auth.loggedIn,\n  sendMessage: state.streamMessage.sendMessage\n});\n\nconst mapDispatch = { sendStreamMessage };\nexport default connect(mapStates, mapDispatch)(Compose);\n"]},"metadata":{},"sourceType":"module"}