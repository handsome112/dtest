{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { flatten } from 'lodash';\nimport { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { messageService } from '@services/message.service';\nimport { message } from 'antd';\nimport { getConversations, getConversationsSuccess, getConversationsFail, setActiveConversation, setActiveConversationSuccess, loadMessages, fetchingMessage, loadMessagesSuccess, sendMessage, sendMessageFail, sendMessageSuccess, getConversationDetail, getConversationDetailSuccess, readMessages, loadMoreMessages, loadMoreMessagesSuccess, searchConversations, searchConversationsFail, searchConversationsSuccess, updateLastMessage, loadMoreMessagesFail, loadMessagesFail, setActiveConversationFail } from './actions';\nvar conversationSagas = [{\n  on: getConversations,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return messageService.getConversations(data.payload);\n\n          case 3:\n            resp = _context.sent;\n            _context.next = 6;\n            return put(getConversationsSuccess(resp.data));\n\n          case 6:\n            _context.next = 15;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 12;\n            return Promise.resolve(_context.t0);\n\n          case 12:\n            error = _context.sent;\n            _context.next = 15;\n            return put(getConversationsFail(error));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 8]]);\n  })\n}, {\n  on: searchConversations,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return messageService.getConversations(data.payload);\n\n          case 3:\n            resp = _context2.sent;\n            _context2.next = 6;\n            return put(searchConversationsSuccess(resp.data));\n\n          case 6:\n            _context2.next = 15;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            _context2.next = 12;\n            return Promise.resolve(_context2.t0);\n\n          case 12:\n            error = _context2.sent;\n            _context2.next = 15;\n            return put(searchConversationsFail(error));\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 8]]);\n  })\n}, {\n  on: setActiveConversation,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var _data$payload, source, sourceId, conversationId, recipientId, conversationMapping, readAllMessages, resp, conversation;\n\n    return _regeneratorRuntime.wrap(function worker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _data$payload = data.payload, source = _data$payload.source, sourceId = _data$payload.sourceId, conversationId = _data$payload.conversationId, recipientId = _data$payload.recipientId;\n            _context3.next = 4;\n            return select(function (state) {\n              return state.conversation.mapping;\n            });\n\n          case 4:\n            conversationMapping = _context3.sent;\n\n            if (!conversationId) {\n              _context3.next = 21;\n              break;\n            }\n\n            if (!conversationMapping[conversationId]) {\n              _context3.next = 19;\n              break;\n            }\n\n            _context3.next = 9;\n            return put(setActiveConversationSuccess(conversationMapping[conversationId]));\n\n          case 9:\n            _context3.next = 11;\n            return messageService.readAllInConversation(conversationId, recipientId);\n\n          case 11:\n            readAllMessages = _context3.sent;\n\n            if (!readAllMessages) {\n              _context3.next = 15;\n              break;\n            }\n\n            _context3.next = 15;\n            return put(readMessages(conversationId));\n\n          case 15:\n            _context3.next = 17;\n            return put(loadMessages({\n              conversationId: conversationId,\n              limit: 25,\n              offset: 0\n            }));\n\n          case 17:\n            _context3.next = 19;\n            break;\n\n          case 19:\n            _context3.next = 34;\n            break;\n\n          case 21:\n            _context3.next = 23;\n            return messageService.createConversation({\n              source: source,\n              sourceId: sourceId\n            });\n\n          case 23:\n            resp = _context3.sent;\n            conversation = resp.data;\n\n            if (!conversationMapping[conversation._id]) {\n              _context3.next = 30;\n              break;\n            }\n\n            _context3.next = 28;\n            return put(setActiveConversationSuccess(conversationMapping[conversation._id]));\n\n          case 28:\n            _context3.next = 32;\n            break;\n\n          case 30:\n            _context3.next = 32;\n            return put(setActiveConversationSuccess(conversation));\n\n          case 32:\n            _context3.next = 34;\n            return put(loadMessages({\n              conversationId: conversation._id,\n              limit: 25,\n              offset: 0\n            }));\n\n          case 34:\n            _context3.next = 41;\n            break;\n\n          case 36:\n            _context3.prev = 36;\n            _context3.t0 = _context3[\"catch\"](0);\n            message.error('Error occured, please try again later');\n            _context3.next = 41;\n            return put(setActiveConversationFail(_context3.t0));\n\n          case 41:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, worker, null, [[0, 36]]);\n  })\n}, {\n  on: getConversationDetail,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var conversation;\n    return _regeneratorRuntime.wrap(function worker$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return messageService.getConversationDetail(data.payload.id);\n\n          case 3:\n            conversation = _context4.sent;\n            _context4.next = 6;\n            return put(getConversationDetailSuccess(conversation.data));\n\n          case 6:\n            _context4.next = 12;\n            break;\n\n          case 8:\n            _context4.prev = 8;\n            _context4.t0 = _context4[\"catch\"](0);\n            _context4.next = 12;\n            return put(getConversationsFail(_context4.t0));\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, worker, null, [[0, 8]]);\n  })\n}];\nvar messageSagas = [{\n  on: loadMessages,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var messageMap, _data$payload2, conversationId, offset, limit, resp;\n\n    return _regeneratorRuntime.wrap(function worker$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            messageMap = select(function (state) {\n              return state.message.mapping;\n            });\n            _data$payload2 = data.payload, conversationId = _data$payload2.conversationId, offset = _data$payload2.offset, limit = _data$payload2.limit;\n\n            if (!(messageMap[conversationId] && messageMap[conversationId].fetching)) {\n              _context5.next = 5;\n              break;\n            }\n\n            return _context5.abrupt(\"return\");\n\n          case 5:\n            _context5.next = 7;\n            return put(fetchingMessage({\n              conversationId: conversationId\n            }));\n\n          case 7:\n            _context5.next = 9;\n            return messageService.getMessages(conversationId, {\n              offset: offset,\n              limit: limit\n            });\n\n          case 9:\n            resp = _context5.sent;\n            _context5.next = 12;\n            return put(loadMessagesSuccess({\n              conversationId: conversationId,\n              items: resp.data.data,\n              total: resp.data.total\n            }));\n\n          case 12:\n            _context5.next = 19;\n            break;\n\n          case 14:\n            _context5.prev = 14;\n            _context5.t0 = _context5[\"catch\"](0);\n            message.error('Error occured, please try again later');\n            _context5.next = 19;\n            return put(loadMessagesFail(_context5.t0));\n\n          case 19:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, worker, null, [[0, 14]]);\n  })\n}, {\n  on: loadMoreMessages,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var messageMap, _data$payload3, conversationId, offset, limit, resp;\n\n    return _regeneratorRuntime.wrap(function worker$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            messageMap = select(function (state) {\n              return state.message.mapping;\n            });\n            _data$payload3 = data.payload, conversationId = _data$payload3.conversationId, offset = _data$payload3.offset, limit = _data$payload3.limit;\n\n            if (!(messageMap[conversationId] && messageMap[conversationId].fetching)) {\n              _context6.next = 5;\n              break;\n            }\n\n            return _context6.abrupt(\"return\");\n\n          case 5:\n            _context6.next = 7;\n            return put(fetchingMessage({\n              conversationId: conversationId\n            }));\n\n          case 7:\n            _context6.next = 9;\n            return messageService.getMessages(conversationId, {\n              offset: offset,\n              limit: limit\n            });\n\n          case 9:\n            resp = _context6.sent;\n            _context6.next = 12;\n            return put(loadMoreMessagesSuccess({\n              conversationId: conversationId,\n              items: resp.data.data,\n              total: resp.data.total\n            }));\n\n          case 12:\n            _context6.next = 19;\n            break;\n\n          case 14:\n            _context6.prev = 14;\n            _context6.t0 = _context6[\"catch\"](0);\n            message.error('Error occured, please try again later');\n            _context6.next = 19;\n            return put(loadMoreMessagesFail(_context6.t0));\n\n          case 19:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, worker, null, [[0, 14]]);\n  })\n}, {\n  on: sendMessage,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(req) {\n    var _req$payload, conversationId, data, resp;\n\n    return _regeneratorRuntime.wrap(function worker$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _req$payload = req.payload, conversationId = _req$payload.conversationId, data = _req$payload.data;\n            _context7.next = 4;\n            return messageService.sendMessage(conversationId, data);\n\n          case 4:\n            resp = _context7.sent;\n            _context7.next = 7;\n            return put(sendMessageSuccess(resp.data));\n\n          case 7:\n            _context7.next = 9;\n            return put(updateLastMessage({\n              conversationId: conversationId,\n              lastMessage: data.text\n            }));\n\n          case 9:\n            _context7.next = 15;\n            break;\n\n          case 11:\n            _context7.prev = 11;\n            _context7.t0 = _context7[\"catch\"](0);\n            _context7.next = 15;\n            return put(sendMessageFail(_context7.t0));\n\n          case 15:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, worker, null, [[0, 11]]);\n  })\n}];\nexport default flatten([createSagas(conversationSagas), createSagas(messageSagas)]);","map":null,"metadata":{},"sourceType":"module"}