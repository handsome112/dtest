{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/performer/documents-setting-form.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from 'react';\nimport { Form, Upload, Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { performerService } from 'src/services';\nimport { TOKEN } from 'src/services/api-request';\nimport cookie from 'js-cookie';\nimport './index.less';\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 0\n    }\n  }\n};\n\nconst DocumentsSettingForm = ({\n  onFinish,\n  loading,\n  performer\n}) => {\n  const [idVerification, setIdVerification] = React.useState([]);\n  const [documentVerification, setDocumentVerification] = React.useState([]);\n  const [releaseForm, setRelaseForm] = React.useState([]);\n  const [idVerificationId, setIdVerificationId] = React.useState(performer.idVerificationId);\n  const [documentVerificationId, setDocumentVerificationId] = React.useState(performer.documentVerificationId);\n  const [releaseFormId, setReleaseFormId] = React.useState(performer.releaseFormId);\n  const [form] = Form.useForm();\n  React.useEffect(() => {\n    const {\n      idVerification: idVerificationFile,\n      documentVerification: documentVerificationFile,\n      releaseForm: releaseFormFile\n    } = performer;\n\n    if (idVerificationFile) {\n      setIdVerification([{\n        uid: idVerificationFile._id,\n        name: idVerificationFile.name,\n        status: 'done',\n        url: idVerificationFile.url\n      }]);\n    }\n\n    if (documentVerificationFile) {\n      setDocumentVerification([{\n        uid: documentVerificationFile._id,\n        name: documentVerificationFile.name,\n        status: 'done',\n        url: documentVerificationFile.url\n      }]);\n    }\n\n    if (releaseFormFile) {\n      setRelaseForm([{\n        uid: releaseFormFile._id,\n        name: releaseFormFile.name,\n        status: 'done',\n        url: releaseFormFile.url\n      }]);\n    }\n  }, []);\n\n  const onDocumentVerificationChange = ({\n    file,\n    fileList\n  }) => {\n    if (file.status === 'done' && file.response) {\n      const {\n        data\n      } = file.response;\n      setDocumentVerificationId(data._id);\n      setDocumentVerification([{\n        uid: data._id,\n        name: data.name,\n        status: 'done',\n        url: data.url\n      }]);\n    } else {\n      setDocumentVerification(fileList);\n    }\n  };\n\n  const onIdVerificationChange = ({\n    file,\n    fileList\n  }) => {\n    if (file.status === 'done' && file.response) {\n      const {\n        data\n      } = file.response;\n      setIdVerificationId(data._id);\n      setIdVerification([{\n        uid: data._id,\n        name: data.name,\n        status: 'done',\n        url: data.url\n      }]);\n    } else {\n      setIdVerification(fileList);\n    }\n  };\n\n  const onReleaseFormChange = ({\n    file,\n    fileList\n  }) => {\n    if (file.status === 'done' && file.response) {\n      const {\n        data\n      } = file.response;\n      setReleaseFormId(data._id);\n      setRelaseForm([{\n        uid: data._id,\n        name: data.name,\n        status: 'done',\n        url: data.url\n      }]);\n    } else {\n      setRelaseForm(fileList);\n    }\n  };\n\n  const submit = () => {\n    onFinish({\n      idVerificationId,\n      documentVerificationId,\n      releaseFormId\n    });\n  };\n\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    onFinish: submit,\n    name: \"documentSettingForm\",\n    className: \"performerEditForm\",\n    initialValues: {\n      documentVerificationId: performer.documentVerificationId,\n      idVerificationId: performer.idVerificationId\n    },\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }), __jsx(Form.Item, {\n    name: \"documentVerification\",\n    rules: [{\n      validator: () => {\n        if (idVerificationId) return Promise.resolve();\n        return Promise.reject(new Error('Verification document is required!'));\n      }\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, __jsx(Upload, {\n    showUploadList: {\n      showPreviewIcon: true,\n      showRemoveIcon: false,\n      showDownloadIcon: true\n    },\n    name: \"file\",\n    headers: {\n      Authorization: false ? cookie.get(TOKEN) : ''\n    },\n    disabled: loading,\n    fileList: documentVerification,\n    listType: \"picture\",\n    action: performerService.getDocumentsUploadUrl(),\n    onChange: onDocumentVerificationChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, __jsx(UploadOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }), ' ', \"Upload Document For Verification\"))), __jsx(Form.Item, {\n    name: \"idVerification\",\n    rules: [{\n      validator: () => {\n        if (idVerificationId) return Promise.resolve();\n        return Promise.reject(new Error('Id Verification is required'));\n      }\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }, __jsx(Upload, {\n    showUploadList: {\n      showPreviewIcon: true,\n      showRemoveIcon: false,\n      showDownloadIcon: true\n    },\n    name: \"file\",\n    headers: {\n      Authorization: false ? cookie.get(TOKEN) : ''\n    },\n    fileList: idVerification,\n    listType: \"picture\",\n    disabled: loading,\n    action: performerService.getDocumentsUploadUrl(),\n    onChange: onIdVerificationChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }, __jsx(UploadOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }\n  }), \"Upload Id Verification\"))), __jsx(Form.Item, {\n    name: \"releaseForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }\n  }, __jsx(Upload, {\n    showUploadList: {\n      showPreviewIcon: true,\n      showRemoveIcon: false,\n      showDownloadIcon: true\n    },\n    name: \"file\",\n    headers: {\n      Authorization: false ? cookie.get(TOKEN) : ''\n    },\n    fileList: releaseForm,\n    listType: \"text\",\n    action: performerService.getReleaseFormUrl(),\n    onChange: onReleaseFormChange,\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }, __jsx(UploadOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }), \"Upload Release Form\"))), __jsx(Form.Item, _extends({}, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  }, \"Save Changes\")));\n};\n\nexport default DocumentsSettingForm;","map":null,"metadata":{},"sourceType":"module"}