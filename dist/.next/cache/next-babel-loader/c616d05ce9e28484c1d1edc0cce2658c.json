{"ast":null,"code":"/* eslint-disable func-names */\n\n/* eslint-disable no-param-reassign */\nimport { reduce, isArray, isEmpty, flatten } from 'lodash';\nimport { createSelector } from 'reselect';\nimport { takeLatest, delay } from 'redux-saga/effects';\nimport { createAction as ReduxCreateAction, handleActions as handleReduxActions } from 'redux-actions';\n\nfunction createAction(type) {\n  const action = ReduxCreateAction(type);\n\n  action.is = aType => action.toString() === aType;\n\n  return action;\n}\n/* tslint:disable-next-line */\n\n\nfunction createAsyncAction(action, type) {\n  return {\n    [action]: createAction(type),\n    [`${action}Success`]: createAction(`${type}_SUCCESS`),\n    [`${action}Fail`]: createAction(`${type}_FAIL`)\n  };\n}\n\nfunction createAsyncActions(type) {\n  return [createAction(type), createAction(`${type}_SUCCESS`), createAction(`${type}_FAIL`)];\n}\n/* tslint:disable */\n\n\nfunction handleActions(actions, initialState) {\n  return handleReduxActions(reduce(actions, (reducer, handler, action) => {\n    reducer[action] = (state, act) => handler(state.set('action', action), act);\n\n    return reducer;\n  }, {}), initialState);\n}\n\nfunction createReducers(stateContext, reducers, initialState, preventResetting = false) {\n  return {\n    [stateContext]: handleReduxActions(reduce(flatten(reducers), (reducer, action) => {\n      if (isArray(action.on)) {\n        action.on.forEach(act => {\n          reducer[act] = action.reducer;\n        });\n      } else reducer[action.on] = action.reducer;\n\n      return reducer;\n    }, preventResetting ? {} : {\n      APP_STATE_RESET: () => initialState\n    }), initialState)\n  };\n}\n\nexport function createSagas(sagas) {\n  return flatten(sagas).map(saga => {\n    const {\n      on,\n      effect = takeLatest,\n      worker\n    } = saga;\n    return function* () {\n      yield effect(on, function* (action) {\n        yield delay(0);\n        yield worker(action);\n      });\n    };\n  });\n}\n\nfunction createSelectorsA(context, keys = []) {\n  const stateSelector = state => state[context];\n\n  if (isEmpty(keys)) return stateSelector;\n  return keys.map(key => state => isArray(key) ? stateSelector(state).getIn(key) : stateSelector(state).get(key));\n}\n\nfunction createSelectors(context, keys) {\n  const stateSelector = state => state[context];\n\n  return reduce(keys, (selectors, key) => {\n    selectors[`${key}Selector`] = state => stateSelector(state).get(key);\n\n    return selectors;\n  }, {});\n}\n\nfunction createJSSelectors(context, keys) {\n  const stateSelector = state => state[context];\n\n  return reduce(keys, (selectors, key) => {\n    selectors[`${key}Selector`] = state => stateSelector(state)[key];\n\n    return selectors;\n  }, {});\n}\n\nexport { createAction, createAsyncAction, createAsyncActions, createSelectorsA, handleActions, createReducers, createSelectors, createSelector, createJSSelectors };","map":null,"metadata":{},"sourceType":"module"}