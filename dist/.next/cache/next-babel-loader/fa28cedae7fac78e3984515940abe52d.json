{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/var/www/dtest.live/pages/stream/privatechat.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Row, Col, message, List } from 'antd';\nimport Router from 'next/router';\nimport PrivateChatContainer from '@components/streaming/private-streaming-container';\nimport Header from '@components/streaming/header';\nimport Footer from '@components/streaming/footer';\nimport { performerService, streamService, transactionService } from 'src/services';\nimport { connect } from 'react-redux';\nimport { getStreamConversationSuccess, resetStreamMessage } from '@redux/stream-chat/actions';\nimport { updateCurrentUserBalance } from '@redux/user/actions';\nimport { SocketContext, Event } from 'src/socket';\nimport nextCookie from 'next-cookies';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport { getResponseError } from '@lib/utils';\nimport './index.less';\nimport { StatusCodes } from 'http-status-codes'; // eslint-disable-next-line no-shadow\n\nvar EVENT;\n\n(function (EVENT) {\n  EVENT[\"JOINED_THE_ROOM\"] = \"JOINED_THE_ROOM\";\n  EVENT[\"JOIN_ROOM\"] = \"JOIN_ROOM\";\n  EVENT[\"LEAVE_ROOM\"] = \"LEAVE_ROOM\";\n  EVENT[\"STREAM_INFORMATION_CHANGED\"] = \"private-stream/streamInformationChanged\";\n  EVENT[\"MODEL_JOIN_ROOM\"] = \"MODEL_JOIN_ROOM\";\n  EVENT[\"SEND_PAID_TOKEN\"] = \"SEND_PAID_TOKEN\";\n})(EVENT || (EVENT = {}));\n\nvar ListItem = function ListItem(_ref) {\n  var description = _ref.description,\n      title = _ref.title;\n  return __jsx(List.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 3\n    }\n  }, __jsx(Row, {\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(Col, {\n    className: \"light-text\",\n    sm: {\n      span: 6\n    },\n    xs: {\n      span: 12\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, title), __jsx(Col, {\n    style: {\n      fontWeight: 'bold'\n    },\n    sm: {\n      span: 18\n    },\n    xs: {\n      span: 12\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, description)));\n};\n\nvar UserPrivateChat = /*#__PURE__*/function (_PureComponent) {\n  _inherits(UserPrivateChat, _PureComponent);\n\n  var _super = _createSuper(UserPrivateChat);\n\n  function UserPrivateChat(props) {\n    var _this2;\n\n    _classCallCheck(this, UserPrivateChat);\n\n    _this2 = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this2), \"streamRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this2), \"interval\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this2), \"socket\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this2), \"onbeforeunload\", function () {\n      _this2.leaveSession();\n    });\n\n    _this2.state = {\n      roomJoined: false,\n      total: 0,\n      callTime: 0,\n      paidToken: 0,\n      members: []\n    };\n    return _this2;\n  }\n\n  _createClass(UserPrivateChat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.socket = this.context;\n      window.addEventListener('beforeunload', this.onbeforeunload);\n      Router.events.on('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('beforeunload', this.onbeforeunload);\n      Router.events.off('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"handler\",\n    value: function handler(_ref2) {\n      var _activeConversation$d;\n\n      var total = _ref2.total,\n          members = _ref2.members,\n          conversationId = _ref2.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n        this.setState({\n          total: total,\n          members: members\n        });\n      }\n    }\n  }, {\n    key: \"handleModelJoinRoom\",\n    value: function () {\n      var _handleModelJoinRoom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3) {\n        var _activeConversation$d2,\n            _this3 = this;\n\n        var conversationId, _this$props, activeConversation, performer, user;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                conversationId = _ref3.conversationId;\n                _this$props = this.props, activeConversation = _this$props.activeConversation, performer = _this$props.performer, user = _this$props.user;\n\n                if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d2 = activeConversation.data) === null || _activeConversation$d2 === void 0 ? void 0 : _activeConversation$d2._id) === conversationId) {\n                  message.success('Model joined the room!');\n\n                  if (user.balance < performer.privateCallPrice) {\n                    message.warn('Your balance is not enough token.');\n                    setTimeout(function () {\n                      return window.location.reload();\n                    }, 5 * 1000);\n                  } else {\n                    this.interval = setInterval(function () {\n                      var callTime = _this3.state.callTime;\n\n                      _this3.setState({\n                        callTime: callTime + 1\n                      });\n\n                      _this3.sendPaidToken(conversationId);\n                    }, 60 * 1000);\n                  }\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleModelJoinRoom(_x) {\n        return _handleModelJoinRoom.apply(this, arguments);\n      }\n\n      return handleModelJoinRoom;\n    }()\n  }, {\n    key: \"leaveSession\",\n    value: function leaveSession() {\n      var _this$props2 = this.props,\n          activeConversation = _this$props2.activeConversation,\n          dispatchResetStreamMessage = _this$props2.resetStreamMessage;\n      dispatchResetStreamMessage();\n\n      if (this.socket && activeConversation && activeConversation.data) {\n        this.socket.emit(EVENT.LEAVE_ROOM, {\n          conversationId: activeConversation.data._id\n        });\n      }\n\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n\n      this.setState({\n        roomJoined: false,\n        total: 0,\n        members: []\n      });\n    }\n  }, {\n    key: \"sendRequest\",\n    value: function () {\n      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this$props3, performer, dispatchGetStreamConversationSuccess, resp, _resp$data, sessionId, conversation, error;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props3 = this.props, performer = _this$props3.performer, dispatchGetStreamConversationSuccess = _this$props3.getStreamConversationSuccess;\n                _context2.prev = 1;\n                _context2.next = 4;\n                return streamService.requestPrivateChat(performer._id);\n\n              case 4:\n                resp = _context2.sent;\n                _resp$data = resp.data, sessionId = _resp$data.sessionId, conversation = _resp$data.conversation;\n                this.socket = this.context;\n                message.success('Private request has been sent!');\n                this.streamRef && this.streamRef.start(sessionId, conversation._id);\n                this.socket.emit(EVENT.JOIN_ROOM, {\n                  conversationId: conversation._id\n                });\n                dispatchGetStreamConversationSuccess({\n                  data: conversation\n                });\n                _context2.next = 19;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](1);\n                _context2.next = 17;\n                return Promise.resolve(_context2.t0);\n\n              case 17:\n                error = _context2.sent;\n                message.error(getResponseError(error));\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 13]]);\n      }));\n\n      function sendRequest() {\n        return _sendRequest.apply(this, arguments);\n      }\n\n      return sendRequest;\n    }()\n  }, {\n    key: \"roomJoinedHandler\",\n    value: function roomJoinedHandler(_ref4) {\n      var _activeConversation$d3;\n\n      var total = _ref4.total,\n          members = _ref4.members,\n          conversationId = _ref4.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d3 = activeConversation.data) === null || _activeConversation$d3 === void 0 ? void 0 : _activeConversation$d3._id) === conversationId) {\n        this.setState({\n          total: total,\n          members: members,\n          roomJoined: true,\n          callTime: 0\n        });\n      }\n    }\n  }, {\n    key: \"stopBroadcast\",\n    value: function stopBroadcast() {\n      this.streamRef && this.streamRef.stop();\n      setTimeout(function () {\n        window.location.href = '/';\n      }, 5 * 1000);\n    }\n  }, {\n    key: \"sendPaidToken\",\n    value: function () {\n      var _sendPaidToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(conversationId) {\n        var _this$props4, performer, dispatchUpdateBalance, paidToken, newState, error;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _this$props4 = this.props, performer = _this$props4.performer, dispatchUpdateBalance = _this$props4.updateCurrentUserBalance;\n                paidToken = this.state.paidToken;\n                _context3.next = 5;\n                return transactionService.sendPaidToken(conversationId);\n\n              case 5:\n                newState = {\n                  paidToken: paidToken + performer.privateCallPrice\n                };\n                this.setState(newState);\n                dispatchUpdateBalance(performer.privateCallPrice * -1);\n                _context3.next = 16;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](0);\n                _context3.next = 14;\n                return Promise.resolve(_context3.t0);\n\n              case 14:\n                error = _context3.sent;\n\n                if (error.statusCode === 400) {\n                  message.error('Your tokens do not enough, please buy more.');\n                  clearInterval(this.interval);\n                  this.stopBroadcast();\n                }\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 10]]);\n      }));\n\n      function sendPaidToken(_x2) {\n        return _sendPaidToken.apply(this, arguments);\n      }\n\n      return sendPaidToken;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var performer = this.props.performer;\n      var _this$state = this.state,\n          total = _this$state.total,\n          members = _this$state.members,\n          roomJoined = _this$state.roomJoined,\n          callTime = _this$state.callTime,\n          paidToken = _this$state.paidToken;\n      var dataSource = [{\n        title: 'Call time',\n        description: \"\".concat(callTime, \" minute(s)\")\n      }, {\n        title: 'Status',\n        description: roomJoined ? 'Live' : ''\n      }, {\n        title: 'Paid Token',\n        description: \"\".concat(paidToken, \" token(s)\")\n      }, {\n        title: 'Token per minute',\n        description: \"\".concat(performer.privateCallPrice, \" token(s)\") || 'N/A'\n      }];\n      return __jsx(React.Fragment, null, __jsx(Head, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 9\n        }\n      }, __jsx(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }\n      }, \"Private Chat\")), __jsx(Event, {\n        event: EVENT.STREAM_INFORMATION_CHANGED,\n        handler: this.handler.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 9\n        }\n      }), __jsx(Event, {\n        event: EVENT.JOINED_THE_ROOM,\n        handler: this.roomJoinedHandler.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 9\n        }\n      }), __jsx(Event, {\n        event: EVENT.MODEL_JOIN_ROOM,\n        handler: this.handleModelJoinRoom.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 9\n        }\n      }), __jsx(React.Fragment, null, __jsx(Header, _extends({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }\n      })), __jsx(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }\n      }, __jsx(Col, {\n        lg: 12,\n        md: 12,\n        xs: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }\n      }, __jsx(PrivateChatContainer, {\n        ref: function ref(_ref5) {\n          _this4.streamRef = _ref5;\n        },\n        configs: {\n          localVideoId: 'private-publisher'\n        },\n        onClick: this.sendRequest.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 15\n        }\n      }), __jsx(Footer, _extends({}, this.props, {\n        inPrivateChat: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 15\n        }\n      })), __jsx(List, {\n        dataSource: dataSource,\n        renderItem: function renderItem(item) {\n          return __jsx(ListItem, {\n            description: item.description,\n            title: item.title,\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 19\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 15\n        }\n      })), __jsx(Col, {\n        lg: 12,\n        xs: 24,\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }\n      }, __jsx(ChatBox, _extends({}, this.props, {\n        totalParticipant: total,\n        members: members,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 15\n        }\n      }))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref6) {\n        var ctx, query, _nextCookie, token, headers, resp, performer;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                ctx = _ref6.ctx;\n                _context4.prev = 1;\n                query = ctx.query;\n\n                if (!(true && query.performer)) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  performer: JSON.parse(query.performer)\n                });\n\n              case 5:\n                _nextCookie = nextCookie(ctx), token = _nextCookie.token;\n                headers = {\n                  Authorization: token\n                };\n                _context4.next = 9;\n                return performerService.details(query.username, headers);\n\n              case 9:\n                resp = _context4.sent;\n                performer = resp.data;\n\n                if (!performer.isBlocked) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                throw StatusCodes.FORBIDDEN;\n\n              case 13:\n                return _context4.abrupt(\"return\", {\n                  performer: performer\n                });\n\n              case 16:\n                _context4.prev = 16;\n                _context4.t0 = _context4[\"catch\"](1);\n\n                if (!true) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", Router.push('/'));\n\n              case 20:\n                ctx.res.writeHead && ctx.res.writeHead(302, {\n                  Location: '/'\n                });\n                ctx.res.end && ctx.res.end();\n                return _context4.abrupt(\"return\", {});\n\n              case 23:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[1, 16]]);\n      }));\n\n      function getInitialProps(_x3) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return UserPrivateChat;\n}(PureComponent);\n\n_defineProperty(UserPrivateChat, \"authenticate\", true);\n\nUserPrivateChat.contextType = SocketContext;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread(_objectSpread({}, state.streaming), {}, {\n    ui: state.ui,\n    user: state.user.current,\n    loggedIn: state.auth.loggedIn,\n    activeConversation: state.streamMessage.activeConversation\n  });\n};\n\nvar mapDispatchs = {\n  getStreamConversationSuccess: getStreamConversationSuccess,\n  resetStreamMessage: resetStreamMessage,\n  updateCurrentUserBalance: updateCurrentUserBalance\n};\nexport default connect(mapStateToProps, mapDispatchs)(UserPrivateChat);","map":null,"metadata":{},"sourceType":"module"}