{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/stream/webrtc/groupchat.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport Header from 'next/head';\nimport { Row, Col, message, List, Button } from 'antd';\nimport Router from 'next/router';\nimport { performerService, streamService, transactionService } from 'src/services';\nimport { connect } from 'react-redux';\nimport { getStreamConversationSuccess, loadMoreStreamMessages, resetStreamMessage } from '@redux/stream-chat/actions';\nimport { updateCurrentUserBalance } from '@redux/user/actions';\nimport { SocketContext, Event } from 'src/socket';\nimport nextCookie from 'next-cookies';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport { getResponseError } from '@lib/utils';\nimport GroupPublisher from '@components/streaming/webrtc/groupchat/publisher';\nimport GroupSubscriber from '@components/streaming/webrtc/groupchat/subscriber';\nimport { StatusCodes } from 'http-status-codes'; // import './index.less';\n// eslint-disable-next-line no-shadow\n\nvar EVENT;\n\n(function (EVENT) {\n  EVENT[\"JOIN_ROOM\"] = \"JOIN_ROOM\";\n  EVENT[\"LEAVE_ROOM\"] = \"LEAVE_ROOM\";\n  EVENT[\"STREAM_INFORMATION_CHANGED\"] = \"private-stream/streamInformationChanged\";\n  EVENT[\"SEND_PAID_TOKEN\"] = \"SEND_PAID_TOKEN\";\n})(EVENT || (EVENT = {}));\n\nconst JOINED_THE_ROOM = 'JOINED_THE_ROOM';\nconst MODEL_LEFT_ROOM = 'MODEL_LEFT_ROOM';\nconst STREAM_JOINED = 'private-stream/streamJoined';\nconst STREAM_LEAVED = 'private-stream/streamLeaved';\n\nconst ListItem = ({\n  description,\n  title\n}) => __jsx(List.Item, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 3\n  }\n}, __jsx(Row, {\n  style: {\n    width: '100%'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }\n}, __jsx(Col, {\n  className: \"light-text\",\n  sm: {\n    span: 6\n  },\n  xs: {\n    span: 12\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 7\n  }\n}, title), __jsx(Col, {\n  style: {\n    fontWeight: 'bold'\n  },\n  sm: {\n    span: 18\n  },\n  xs: {\n    span: 12\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }\n}, description)));\n\nclass UserPrivateChat extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    try {\n      const {\n        query\n      } = ctx;\n\n      if (false && query.performer) {\n        return {\n          performer: JSON.parse(query.performer)\n        };\n      }\n\n      const {\n        token\n      } = nextCookie(ctx);\n      const headers = {\n        Authorization: token\n      };\n      const resp = await performerService.details(query.username, headers);\n      const performer = resp.data;\n\n      if (performer.isBlocked) {\n        throw StatusCodes.FORBIDDEN;\n      }\n\n      return {\n        performer\n      };\n    } catch (e) {\n      // const err = await Promise.resolve(e);\n      if (false) {\n        return Router.push('/');\n      }\n\n      ctx.res.writeHead && ctx.res.writeHead(302, {\n        Location: '/'\n      });\n      ctx.res.end && ctx.res.end();\n      return {};\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"localVideoId\", 'group-publisher');\n\n    _defineProperty(this, \"remoteVideoContainerClassname\", 'group-video-container');\n\n    _defineProperty(this, \"publisherRef\", void 0);\n\n    _defineProperty(this, \"subscriberRef\", void 0);\n\n    _defineProperty(this, \"streamId\", void 0);\n\n    _defineProperty(this, \"streamList\", void 0);\n\n    _defineProperty(this, \"interval\", void 0);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      this.leaveSession();\n    });\n\n    this.state = {\n      processing: false,\n      roomJoined: false,\n      total: 0,\n      callTime: 0,\n      paidToken: 0,\n      members: []\n    };\n  }\n\n  componentDidMount() {\n    this.publisherRef = /*#__PURE__*/React.createRef();\n    this.subscriberRef = /*#__PURE__*/React.createRef();\n    this.socket = this.context;\n    window.addEventListener('beforeunload', this.onbeforeunload);\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n  }\n\n  componentDidUpdate(prevProps) {\n    var _activeConversation$d;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if (activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d = activeConversation.data) !== null && _activeConversation$d !== void 0 && _activeConversation$d._id && activeConversation !== prevProps.activeConversation) {\n      this.initSocketEvent();\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n  }\n\n  handler({\n    total,\n    members,\n    conversationId\n  }) {\n    var _activeConversation$d2;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d2 = activeConversation.data) === null || _activeConversation$d2 === void 0 ? void 0 : _activeConversation$d2._id) === conversationId) {\n      this.setState({\n        total,\n        members\n      });\n    }\n  }\n\n  leaveSession() {\n    const {\n      activeConversation,\n      resetStreamMessage: dispatchResetStreamMessage\n    } = this.props;\n    dispatchResetStreamMessage();\n    this.socket.off(JOINED_THE_ROOM);\n    this.socket.off(STREAM_JOINED);\n    this.socket.off(STREAM_LEAVED);\n    this.socket.off(MODEL_LEFT_ROOM);\n\n    if (this.socket && activeConversation && activeConversation.data) {\n      this.socket.emit(EVENT.LEAVE_ROOM, {\n        conversationId: activeConversation.data._id\n      });\n    }\n\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n\n    this.setState({\n      processing: false,\n      roomJoined: false,\n      total: 0,\n      members: []\n    });\n  }\n\n  async joinGroupChat() {\n    const {\n      performer,\n      getStreamConversationSuccess: dispatchGetStreamConversationSuccess,\n      loadMoreStreamMessages: dispatchLoadStreamMessages\n    } = this.props;\n\n    try {\n      this.setState({\n        processing: true\n      });\n      const resp = await streamService.joinGroupChat(performer._id);\n\n      if (resp && resp.data) {\n        this.socket = this.context;\n        const {\n          sessionId,\n          conversation\n        } = resp.data;\n        this.publisherRef.current && this.publisherRef.current.start(conversation._id, sessionId);\n        dispatchGetStreamConversationSuccess({\n          data: conversation\n        });\n        dispatchLoadStreamMessages({\n          conversationId: conversation._id,\n          limit: 25,\n          offset: 0,\n          type: conversation.type\n        });\n        message.success('Success');\n        this.socket.emit(EVENT.JOIN_ROOM, {\n          conversationId: conversation._id\n        });\n      }\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    } finally {\n      this.setState({\n        processing: false\n      });\n    }\n  }\n\n  roomJoinedHandler({\n    total,\n    members,\n    conversationId\n  }) {\n    var _activeConversation$d3;\n\n    const {\n      activeConversation,\n      performer,\n      user\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d3 = activeConversation.data) === null || _activeConversation$d3 === void 0 ? void 0 : _activeConversation$d3._id) === conversationId) {\n      this.interval = setInterval(() => {\n        const {\n          callTime\n        } = this.state;\n\n        if (user.balance < performer.groupCallPrice) {\n          message.warn('Your balance is not enough token.');\n          setTimeout(() => window.location.reload(), 10 * 1000);\n          return;\n        }\n\n        this.setState({\n          callTime: callTime + 1\n        });\n        this.sendPaidToken(conversationId);\n      }, 60 * 1000);\n      this.setState({\n        total,\n        members,\n        roomJoined: true,\n        callTime: 0\n      });\n    }\n  }\n\n  leave() {\n    this.publisherRef.current && this.publisherRef.current.stop();\n    this.subscriberRef.current && this.subscriberRef.current.stop();\n    setTimeout(() => {\n      window.location.href = '/';\n    }, 10 * 1000);\n  }\n\n  async sendPaidToken(conversationId) {\n    try {\n      const {\n        performer,\n        updateCurrentUserBalance: dispatchUpdateBalance\n      } = this.props;\n      const {\n        paidToken\n      } = this.state;\n      await transactionService.sendPaidToken(conversationId);\n      const newState = {\n        paidToken: paidToken + performer.groupCallPrice\n      };\n      this.setState(newState);\n      dispatchUpdateBalance(performer.groupCallPrice * -1);\n    } catch (err) {\n      const error = await Promise.resolve(err);\n\n      if (error.statusCode === 400) {\n        message.error('Your tokens do not enough, please buy more.');\n        clearInterval(this.interval);\n        this.leave();\n      }\n    }\n  }\n\n  initSocketEvent() {\n    this.socket = this.context;\n    this.socket.on(JOINED_THE_ROOM, ({\n      streamId,\n      streamList,\n      conversationId\n    }) => {\n      const {\n        activeConversation\n      } = this.props;\n      if (conversationId !== activeConversation.data._id) return;\n      this.streamId = streamId;\n      this.streamList = streamList;\n      this.publisherRef.current && this.publisherRef.current.publish(streamId);\n\n      if (streamList.length) {\n        this.subscriberRef.current && this.subscriberRef.current.play(streamList);\n      }\n    });\n    this.socket.on(STREAM_JOINED, data => {\n      const {\n        activeConversation\n      } = this.props;\n      if (data.conversationId !== activeConversation.data._id) return;\n\n      if (this.streamId !== data.streamId) {\n        this.subscriberRef.current && this.subscriberRef.current.play([data.streamId]);\n      }\n    });\n    this.socket.on(STREAM_LEAVED, data => {\n      const {\n        activeConversation\n      } = this.props;\n      if (data.conversationId !== activeConversation.data._id) return;\n      this.streamList = this.streamList.filter(id => id !== data.streamId);\n\n      if (this.streamId !== data.streamId) {\n        this.subscriberRef.current && this.subscriberRef.current.close(data.streamId);\n      }\n    });\n    this.socket.on(MODEL_LEFT_ROOM, data => {\n      const {\n        activeConversation\n      } = this.props;\n      if (data.conversationId !== activeConversation.data._id) return;\n      message.error('Model has left the room. You will be redirected in 10 seconds');\n      setTimeout(() => {\n        Router.push('/');\n      }, 10000);\n    });\n  }\n\n  render() {\n    const {\n      performer\n    } = this.props;\n    const {\n      processing,\n      total,\n      members,\n      roomJoined,\n      callTime,\n      paidToken\n    } = this.state;\n    const dataSource = [{\n      title: 'Call time',\n      description: `${callTime} minute(s)`\n    }, {\n      title: 'Status',\n      description: roomJoined ? 'Live' : ''\n    }, {\n      title: 'Paid Token',\n      description: `${paidToken} token(s)`\n    }, {\n      title: 'Token per minute',\n      description: `${performer.groupCallPrice} token(s)` || 'N/A'\n    }];\n    return __jsx(React.Fragment, null, __jsx(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }\n    }, \"Group Chat\")), __jsx(Event, {\n      event: EVENT.STREAM_INFORMATION_CHANGED,\n      handler: this.handler.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }\n    }), __jsx(Event, {\n      event: JOINED_THE_ROOM,\n      handler: this.roomJoinedHandler.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }\n    }), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }\n    }, __jsx(Col, {\n      md: 12,\n      xs: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }\n    }, !roomJoined ? __jsx(Button, {\n      type: \"primary\",\n      onClick: this.joinGroupChat.bind(this),\n      loading: processing,\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 15\n      }\n    }, \"Join Conversation\") : __jsx(Button, {\n      type: \"primary\",\n      onClick: this.leave.bind(this),\n      block: true,\n      disabled: processing,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 15\n      }\n    }, \"Stop Streaming\"), __jsx(Row, {\n      className: this.remoteVideoContainerClassname,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 13\n      }\n    }, __jsx(GroupPublisher, _extends({}, this.props, {\n      ref: this.publisherRef,\n      containerClassName: this.remoteVideoContainerClassname,\n      configs: {\n        localVideoId: this.localVideoId\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 15\n      }\n    })), __jsx(GroupSubscriber, _extends({}, this.props, {\n      ref: this.subscriberRef,\n      containerClassName: this.remoteVideoContainerClassname,\n      configs: {\n        isPlayMode: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 15\n      }\n    }))), __jsx(List, {\n      dataSource: dataSource,\n      renderItem: item => __jsx(ListItem, {\n        description: item.description,\n        title: item.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 17\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 13\n      }\n    })), __jsx(Col, {\n      xs: 24,\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 11\n      }\n    }, __jsx(ChatBox, _extends({}, this.props, {\n      totalParticipant: total,\n      members: members,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 13\n      }\n    })))));\n  }\n\n}\n\n_defineProperty(UserPrivateChat, \"authenticate\", true);\n\nUserPrivateChat.contextType = SocketContext;\n\nconst mapStateToProps = state => _objectSpread(_objectSpread({}, state.streaming), {}, {\n  ui: state.ui,\n  user: state.user.current,\n  loggedIn: state.auth.loggedIn,\n  activeConversation: state.streamMessage.activeConversation\n});\n\nconst mapDispatchs = {\n  getStreamConversationSuccess,\n  loadMoreStreamMessages,\n  resetStreamMessage,\n  updateCurrentUserBalance\n};\nexport default connect(mapStateToProps, mapDispatchs)(UserPrivateChat);","map":null,"metadata":{},"sourceType":"module"}