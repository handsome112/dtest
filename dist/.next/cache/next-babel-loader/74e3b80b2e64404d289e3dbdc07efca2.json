{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport { Button } from 'antd';\nimport { LeftCircleFilled, RightCircleFilled } from '@ant-design/icons';\nimport Router from 'next/router';\nimport PerformerGrid from './performer-grid';\nimport './performer-carousel.less';\nexport default (({\n  performers,\n  searching,\n  success\n}) => {\n  const ref = React.useRef(null);\n  const [paddleShowing, setPaddleShowing] = React.useState(false);\n  React.useEffect(() => {\n    const performerListElement = document.getElementsByClassName('performer-grid');\n\n    if (performerListElement.length && performerListElement[0].clientWidth < performerListElement[0].scrollWidth) {\n      setPaddleShowing(true);\n    }\n  }, [performers]);\n\n  const scrollTo = width => {\n    const e = ref.current;\n    e.scroll({\n      left: width,\n      behavior: 'smooth'\n    });\n  };\n\n  return !searching && success && __jsx(\"div\", {\n    className: \"performer-carousel\"\n  }, __jsx(\"div\", {\n    className: \"carousel-header\"\n  }, __jsx(\"span\", {\n    className: \"carousel-title\"\n  }, \"Related Cams\"), __jsx(Button, {\n    type: \"primary\",\n    onClick: () => Router.push('/')\n  }, \"See all Items\")), __jsx(LeftCircleFilled, {\n    className: \"left-paddle paddle\",\n    hidden: !paddleShowing,\n    onClick: () => scrollTo(-ref.current.clientWidth)\n  }), __jsx(PerformerGrid, {\n    total: performers ? performers.length : 0,\n    data: performers,\n    success: success,\n    searching: searching\n  }), __jsx(RightCircleFilled, {\n    hidden: !paddleShowing,\n    className: \"right-paddle paddle\",\n    onClick: () => scrollTo(ref.current.clientWidth)\n  }));\n});","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/components/performer/performer-carousel.tsx"],"names":["React","Button","LeftCircleFilled","RightCircleFilled","Router","PerformerGrid","performers","searching","success","ref","useRef","paddleShowing","setPaddleShowing","useState","useEffect","performerListElement","document","getElementsByClassName","length","clientWidth","scrollWidth","scrollTo","width","e","current","scroll","left","behavior","push"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,MAAvB;AAEA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,mBAApD;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AAEA,OAAO,2BAAP;AAQA,gBAAe,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,SAAd;AAAyBC,EAAAA;AAAzB,CAAD,KAAgD;AAC7D,QAAMC,GAAG,GAAGT,KAAK,CAACU,MAAN,CAAa,IAAb,CAAZ;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,KAAK,CAACa,QAAN,CAAe,KAAf,CAA1C;AACAb,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACpB,UAAMC,oBAAoB,GAAGC,QAAQ,CAACC,sBAAT,CAC3B,gBAD2B,CAA7B;;AAGA,QACEF,oBAAoB,CAACG,MAArB,IACGH,oBAAoB,CAAC,CAAD,CAApB,CAAwBI,WAAxB,GAAsCJ,oBAAoB,CAAC,CAAD,CAApB,CAAwBK,WAFnE,EAGE;AACAR,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF,GAVD,EAUG,CAACN,UAAD,CAVH;;AAWA,QAAMe,QAAQ,GAAIC,KAAD,IAAoB;AACnC,UAAMC,CAAc,GAAGd,GAAG,CAACe,OAA3B;AACAD,IAAAA,CAAC,CAACE,MAAF,CAAS;AAAEC,MAAAA,IAAI,EAAEJ,KAAR;AAAeK,MAAAA,QAAQ,EAAE;AAAzB,KAAT;AACD,GAHD;;AAIA,SACE,CAACpB,SAAD,IACGC,OADH,IAEE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAM,IAAA,SAAS,EAAC;AAAhB,oBADF,EAEE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,OAAO,EAAE,MAAMJ,MAAM,CAACwB,IAAP,CAAY,GAAZ;AAAtC,qBAFF,CADF,EAOE,MAAC,gBAAD;AACE,IAAA,SAAS,EAAC,oBADZ;AAEE,IAAA,MAAM,EAAE,CAACjB,aAFX;AAGE,IAAA,OAAO,EAAE,MAAMU,QAAQ,CAAC,CAACZ,GAAG,CAACe,OAAJ,CAAYL,WAAd;AAHzB,IAPF,EAYE,MAAC,aAAD;AACE,IAAA,KAAK,EAAEb,UAAU,GAAGA,UAAU,CAACY,MAAd,GAAuB,CAD1C;AAEE,IAAA,IAAI,EAAEZ,UAFR;AAGE,IAAA,OAAO,EAAEE,OAHX;AAIE,IAAA,SAAS,EAAED;AAJb,IAZF,EAkBE,MAAC,iBAAD;AACE,IAAA,MAAM,EAAE,CAACI,aADX;AAEE,IAAA,SAAS,EAAC,qBAFZ;AAGE,IAAA,OAAO,EAAE,MAAMU,QAAQ,CAACZ,GAAG,CAACe,OAAJ,CAAYL,WAAb;AAHzB,IAlBF,CAHJ;AA6BD,CA/CD","sourcesContent":["import * as React from 'react';\nimport { Button } from 'antd';\nimport { IPerformer } from 'src/interfaces';\nimport { LeftCircleFilled, RightCircleFilled } from '@ant-design/icons';\nimport Router from 'next/router';\nimport PerformerGrid from './performer-grid';\n\nimport './performer-carousel.less';\n\ninterface IProps {\n  performers: IPerformer[];\n  searching: boolean;\n  success: boolean;\n}\n\nexport default ({ performers, searching, success }: IProps) => {\n  const ref = React.useRef(null);\n  const [paddleShowing, setPaddleShowing] = React.useState(false);\n  React.useEffect(() => {\n    const performerListElement = document.getElementsByClassName(\n      'performer-grid'\n    );\n    if (\n      performerListElement.length\n      && performerListElement[0].clientWidth < performerListElement[0].scrollWidth\n    ) {\n      setPaddleShowing(true);\n    }\n  }, [performers]);\n  const scrollTo = (width?: number) => {\n    const e: HTMLElement = ref.current;\n    e.scroll({ left: width, behavior: 'smooth' });\n  };\n  return (\n    !searching\n    && success && (\n      <div className=\"performer-carousel\">\n        <div className=\"carousel-header\">\n          <span className=\"carousel-title\">Related Cams</span>\n          <Button type=\"primary\" onClick={() => Router.push('/')}>\n            See all Items\n          </Button>\n        </div>\n        <LeftCircleFilled\n          className=\"left-paddle paddle\"\n          hidden={!paddleShowing}\n          onClick={() => scrollTo(-ref.current.clientWidth)}\n        />\n        <PerformerGrid\n          total={performers ? performers.length : 0}\n          data={performers}\n          success={success}\n          searching={searching}\n        />\n        <RightCircleFilled\n          hidden={!paddleShowing}\n          className=\"right-paddle paddle\"\n          onClick={() => scrollTo(ref.current.clientWidth)}\n        />\n      </div>\n    )\n  );\n};\n"]},"metadata":{},"sourceType":"module"}