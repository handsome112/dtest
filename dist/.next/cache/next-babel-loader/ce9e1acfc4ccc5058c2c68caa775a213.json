{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { settingService } from 'src/services';\nimport { flatten } from 'lodash';\nimport { getCountries, updateSettings } from './actions';\nvar settingSagas = [{\n  on: getCountries,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker() {\n    var countries, resp;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return select(function (state) {\n              return state.settings.countries;\n            });\n\n          case 3:\n            countries = _context.sent;\n\n            if (!(countries && countries.length)) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return settingService.getCountries();\n\n          case 8:\n            resp = _context.sent;\n            _context.next = 11;\n            return put(updateSettings({\n              countries: resp.data\n            }));\n\n          case 11:\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            // eslint-disable-next-line no-console\n            console.log(_context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 13]]);\n  })\n}];\nexport default flatten([createSagas(settingSagas)]);","map":null,"metadata":{},"sourceType":"module"}