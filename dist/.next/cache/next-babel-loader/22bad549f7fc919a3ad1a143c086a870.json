{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { Card, Pagination, Popconfirm } from 'antd';\nimport { MaleSignIcon, FemaleSignIcon, TransgenderIcon } from '@components/common/base/icons';\nimport { getAge } from 'src/lib';\nimport { HeartFilled } from '@ant-design/icons';\nimport './favourite-performer-grid.less';\nimport { connect } from 'react-redux';\n\nconst renderGender = gender => {\n  switch (gender) {\n    case 'male':\n      return __jsx(MaleSignIcon, {\n        color: \"#666\"\n      });\n\n    case 'female':\n      return __jsx(FemaleSignIcon, {\n        color: \"#666\"\n      });\n\n    case 'transgender':\n      return __jsx(TransgenderIcon, {\n        color: \"#666\"\n      });\n\n    default:\n      return __jsx(React.Fragment, null);\n  }\n};\n\nconst FavouritePerformerGrid = ({\n  data,\n  success,\n  searching,\n  title,\n  dislike,\n  setFilter,\n  countries,\n  total,\n  query: {\n    limit,\n    offset\n  },\n  placeholderAvatarUrl\n}) => {\n  const renderFlag = country => {\n    const pCountry = countries.find(c => c.code === country);\n    return pCountry && __jsx(\"span\", {\n      className: \"performer-flag\"\n    }, __jsx(\"img\", {\n      alt: \"\",\n      src: pCountry.flag\n    }));\n  };\n\n  return __jsx(Card, {\n    className: \"favorite-performer-grid\",\n    title: title,\n    bordered: false,\n    hoverable: false,\n    actions: [total > 0 && total > limit && __jsx(Pagination, {\n      disabled: searching,\n      current: Math.round(offset / limit) + 1,\n      pageSize: limit,\n      total: total,\n      size: \"small\",\n      onChange: page => setFilter('offset', (page - 1) * limit)\n    })]\n  }, success && data.length > 0 ? data.map(favourite => {\n    var _favourite$performer, _favourite$performer2, _favourite$performer3, _favourite$performer4, _favourite$performer5, _favourite$performer6, _favourite$performer7;\n\n    return __jsx(Card.Grid, {\n      className: \"performer-box\",\n      key: favourite.favoriteId,\n      hoverable: false\n    }, __jsx(Link, {\n      href: {\n        pathname: '/stream',\n        query: {\n          performer: JSON.stringify(favourite.performer)\n        }\n      },\n      as: `/profile/${(_favourite$performer = favourite.performer) === null || _favourite$performer === void 0 ? void 0 : _favourite$performer.username}`\n    }, __jsx(\"a\", {\n      className: \"performer-avatar\"\n    }, __jsx(\"img\", {\n      src: ((_favourite$performer2 = favourite.performer) === null || _favourite$performer2 === void 0 ? void 0 : _favourite$performer2.avatar) || placeholderAvatarUrl,\n      alt: \"\"\n    }))), __jsx(\"div\", {\n      className: \"performer-title\"\n    }, __jsx(\"div\", {\n      className: \"performer-name\"\n    }, __jsx(\"span\", null, ((_favourite$performer3 = favourite.performer) === null || _favourite$performer3 === void 0 ? void 0 : _favourite$performer3.username) || 'N/A')), ((_favourite$performer4 = favourite.performer) === null || _favourite$performer4 === void 0 ? void 0 : _favourite$performer4.dateOfBirth) && __jsx(\"span\", null, \"(\", getAge((_favourite$performer5 = favourite.performer) === null || _favourite$performer5 === void 0 ? void 0 : _favourite$performer5.dateOfBirth), \")\"), renderGender((_favourite$performer6 = favourite.performer) === null || _favourite$performer6 === void 0 ? void 0 : _favourite$performer6.gender), renderFlag((_favourite$performer7 = favourite.performer) === null || _favourite$performer7 === void 0 ? void 0 : _favourite$performer7.country)), __jsx(Popconfirm, {\n      placement: \"bottom\",\n      title: \"Are you sure to dislike this performer!\",\n      onConfirm: () => dislike(favourite.performer),\n      okText: \"Yes\",\n      cancelText: \"No\"\n    }, __jsx(HeartFilled, {\n      className: \"icon\"\n    })));\n  }) : __jsx(\"p\", null, \"No favorites\"));\n};\n\nFavouritePerformerGrid.defaultProps = {\n  total: 0,\n  success: false,\n  title: '',\n  placeholderAvatarUrl: '/no-avatar.png'\n};\n\nconst mapStateToProps = state => ({\n  placeholderAvatarUrl: state.ui.placeholderAvatarUrl\n});\n\nexport default connect(mapStateToProps)(FavouritePerformerGrid);","map":null,"metadata":{},"sourceType":"module"}