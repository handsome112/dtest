{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect } from 'react';\nimport { Form, Input, Col, Row, Radio, Button } from 'antd';\nimport FormInputItem from '@components/common/base/input-item-list';\nimport { formItemLayout, tailFormItemLayout } from 'src/lib';\nvar Group = Radio.Group;\nvar DIRECT_DEPOSIT_TYPE = [{\n  key: 'credit',\n  name: 'Credit'\n}, {\n  key: 'savings',\n  name: 'Savings'\n}];\nvar radioStyle = {\n  display: 'block',\n  height: '30px',\n  lineHeight: '30px'\n};\nvar leftFormItem = [{\n  name: 'depositFirstName',\n  rules: [{\n    required: true,\n    message: 'First name is requried'\n  }],\n  label: 'First Name',\n  children: __jsx(Input, null)\n}, {\n  name: 'depositLastName',\n  rules: [{\n    required: true,\n    message: 'Last name is requried'\n  }],\n  label: 'Last Name',\n  children: __jsx(Input, null)\n}, {\n  name: 'accountingEmail',\n  rules: [{\n    required: true,\n    message: 'Account email is requried'\n  }, {\n    type: 'email',\n    message: 'Account email must be email'\n  }],\n  label: 'Account Email',\n  children: __jsx(Input, {\n    type: \"email\"\n  })\n}, {\n  name: 'directBankName',\n  rules: [{\n    required: true,\n    message: 'Bnak name is requried'\n  }],\n  label: 'Bank Name',\n  children: __jsx(Input, null)\n}, {\n  name: 'accountType',\n  rules: [{\n    required: true,\n    message: 'Account type is requried'\n  }],\n  label: 'Account Type',\n  children: __jsx(Group, null, DIRECT_DEPOSIT_TYPE.map(function (type) {\n    return __jsx(Radio, {\n      style: radioStyle,\n      value: type.key,\n      key: type.key\n    }, type.name);\n  }))\n}];\nvar rightInputFrom = [{\n  name: 'accountNumber',\n  rules: [{\n    required: true,\n    message: 'Account number is requried'\n  }],\n  label: 'Account number',\n  children: __jsx(Input, null)\n}, {\n  name: 'routingNumber',\n  rules: [{\n    required: true,\n    message: 'Routing number is requried'\n  }],\n  label: 'Routing number',\n  children: __jsx(Input, null)\n}];\nvar initFormValue = {\n  depositFirstName: '',\n  depositLastName: '',\n  accountingEmail: '',\n  directBankName: '',\n  accountType: 'credit',\n  accountNumber: '',\n  routingNumber: ''\n};\nexport var DirectDepositSettingForm = function DirectDepositSettingForm(_ref) {\n  var onFinish = _ref.onFinish,\n      paymentInformation = _ref.paymentInformation,\n      loading = _ref.loading;\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  useEffect(function () {\n    form.setFieldsValue(paymentInformation);\n  }, [paymentInformation]);\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: onFinish,\n    name: \"directDepositSettingForm\",\n    className: \"performerEditForm\",\n    initialValues: _objectSpread({}, initFormValue)\n  }), __jsx(Row, null, __jsx(Col, {\n    xs: 24,\n    sm: 12\n  }, __jsx(FormInputItem, {\n    fields: leftFormItem\n  })), __jsx(Col, {\n    xs: 24,\n    sm: 12\n  }, __jsx(FormInputItem, {\n    fields: rightInputFrom\n  }))), __jsx(Form.Item, tailFormItemLayout, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading\n  }, \"Save Change\")));\n};","map":null,"metadata":{},"sourceType":"module"}