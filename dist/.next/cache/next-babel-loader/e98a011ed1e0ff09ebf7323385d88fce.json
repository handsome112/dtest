{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport * as React from 'react';\nimport { Table, Tag, Select, message } from 'antd';\nimport { formatDate, getResponseError } from 'src/lib';\nimport { studioService } from 'src/services';\nimport { EditOutlined } from '@ant-design/icons';\nexport class StatusTitle extends React.PureComponent {\n  render() {\n    return __jsx(EditOutlined, null);\n  }\n\n}\nconst {\n  Option\n} = Select;\nconst STUDIO_PAYOUT_REQUEST_STATUS = [{\n  lable: 'Pending',\n  key: 'pending'\n}, {\n  lable: 'Approved',\n  key: 'approved'\n}, {\n  lable: 'Rejected',\n  key: 'rejected'\n}, {\n  lable: 'Done',\n  key: 'done'\n}];\n\nconst EditableCell = _ref => {\n  let {\n    // title,\n    editable,\n    children,\n    // dataIndex,\n    record,\n    handleSave\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"editable\", \"children\", \"record\", \"handleSave\"]);\n\n  const [editing, setEditing] = React.useState(false);\n  let childNode = children;\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n  };\n\n  if (editable) {\n    childNode = editing ? __jsx(Select, {\n      defaultValue: record.status,\n      onChange: async value => {\n        await handleSave(_objectSpread(_objectSpread({}, record), {}, {\n          status: value\n        }));\n        toggleEdit();\n      }\n    }, STUDIO_PAYOUT_REQUEST_STATUS.map(s => __jsx(Option, {\n      key: s.key,\n      value: s.key\n    }, s.lable))) : __jsx(\"div\", {\n      className: \"\",\n      style: {\n        paddingRight: 24,\n        cursor: 'pointer'\n      },\n      onMouseEnter: toggleEdit,\n      onClick: toggleEdit\n    }, children);\n  }\n\n  return __jsx(\"td\", props, childNode);\n};\n\nconst breakPoint = ['md'];\nconst format = 'DD/MM/YYYY';\n\nconst PayoutRequestList = ({\n  payouts,\n  searching,\n  total,\n  pageSize,\n  onChange\n}) => {\n  const [dataSource, setDataSource] = React.useState([]);\n  const columns = [{\n    title: 'Name',\n    key: 'q',\n    dataIndex: 'performerInfo',\n    render: ({\n      name\n    }) => name\n  }, {\n    title: 'Pay Period',\n    key: 'payPeriod',\n    responsive: breakPoint,\n    render: ({\n      fromDate,\n      toDate\n    }) => __jsx(\"span\", null, formatDate(fromDate, format), ' ', \"-\", formatDate(toDate, format)),\n    editable: false\n  }, {\n    title: 'Payment Account Type',\n    key: 'paymentAccountType',\n    dataIndex: 'paymentAccountType',\n    editable: false\n  }, {\n    title: 'Tokens',\n    key: 'tokenMustPay',\n    dataIndex: 'tokenMustPay',\n    editable: false\n  }, {\n    title: 'Status',\n    dataIndex: 'status',\n    key: 'status',\n    render: status => __jsx(Tag, {\n      color: \"magenta\",\n      style: {\n        cursor: 'pointer'\n      }\n    }, status),\n    editable: true\n  }, {\n    title: 'Date Requested',\n    key: 'createdAt',\n    dataIndex: 'createdAt',\n    render: createdAt => __jsx(\"span\", null, formatDate(createdAt)),\n    sorter: true,\n    editable: false\n  }];\n\n  const save = async request => {\n    try {\n      await studioService.updateStatusPerformerRequest(request._id, {\n        status: request.status\n      });\n      const newData = [...dataSource];\n      const item = newData.find(d => d.key === request._id);\n      item.status = request.status;\n      setDataSource(newData);\n      message.success('Update Status Success');\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    }\n  };\n\n  const mergeColumn = columns.map(c => _objectSpread(_objectSpread({}, c), {}, {\n    onCell: record => ({\n      record,\n      editable: c.editable,\n      dataIndex: c.dataIndex,\n      title: c.title,\n      handleSave: save\n    })\n  }));\n  React.useEffect(() => {\n    setDataSource(payouts.map(p => _objectSpread(_objectSpread({}, p), {}, {\n      key: p._id\n    })));\n  }, [payouts]);\n  return __jsx(Table, {\n    dataSource: dataSource,\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    rowClassName: () => 'editable-row',\n    columns: mergeColumn,\n    className: \"table\",\n    pagination: {\n      total,\n      pageSize\n    },\n    scroll: {\n      x: true\n    },\n    showSorterTooltip: false,\n    loading: searching,\n    onChange: onChange\n  });\n};\n\nexport default PayoutRequestList;","map":null,"metadata":{},"sourceType":"module"}