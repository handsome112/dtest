{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Menu, Dropdown } from 'antd';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\nimport { updateUIValue } from 'src/redux/ui/actions';\nimport './left-header-content.less';\nimport { SETTING_KEYS } from 'src/constants';\nimport classnames from 'classnames';\nimport { MoreOutlined } from '@ant-design/icons';\n\nvar LeftHeaderContent = function LeftHeaderContent(_ref) {\n  var loggedIn = _ref.loggedIn,\n      currentUser = _ref.currentUser,\n      pluralTextModel = _ref.pluralTextModel,\n      performerCategories = _ref.performerCategories,\n      settings = _ref.settings;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedKey = _React$useState2[0],\n      setSelectedKey = _React$useState2[1];\n\n  var path = settings[SETTING_KEYS.OPTION_FOR_GROUP] === 'webrtc' ? 'webrtc/' : '';\n\n  var categoryMenu = __jsx(Menu, null, performerCategories.data.length > 0 && performerCategories.data.map(function (category) {\n    return __jsx(Menu.Item, {\n      key: \"category-\".concat(category._id),\n      onClick: function onClick() {\n        setSelectedKey('');\n      }\n    }, __jsx(Link, {\n      href: {\n        pathname: '/performer-category',\n        query: {\n          slug: category.slug,\n          category: JSON.stringify(category)\n        }\n      },\n      as: \"/performer-category/\".concat(category.slug)\n    }, __jsx(\"a\", null, category.name)));\n  }));\n\n  var menu = __jsx(Menu, null, __jsx(Menu.Item, {\n    onClick: function onClick() {\n      setSelectedKey('');\n    }\n  }, __jsx(Link, {\n    href: \"/live\"\n  }, __jsx(\"a\", null, \"Go Live\"))), __jsx(Menu.Item, null, __jsx(Link, {\n    href: \"/live/\".concat(path, \"groupchat\")\n  }, __jsx(\"a\", null, \"Group Chat\"))));\n\n  return __jsx(\"nav\", null, __jsx(\"ul\", {\n    className: \"ant-menu ant-menu-root ant-menu-horizontal ant-menu-light\",\n    style: {\n      display: 'flex'\n    }\n  }, __jsx(\"li\", {\n    className: classnames('ant-menu-item', {\n      'ant-menu-item-selected': selectedKey === 'home'\n    }),\n    onClick: function onClick() {\n      setSelectedKey('home');\n    },\n    \"aria-hidden\": \"true\"\n  }, __jsx(Link, {\n    href: \"/\",\n    shallow: true\n  }, __jsx(\"a\", null, \"Home\"))), __jsx(Dropdown, {\n    overlay: categoryMenu\n  }, __jsx(\"li\", {\n    className: \"ant-menu-item\"\n  }, __jsx(\"span\", null, \"Categories\"))), __jsx(\"li\", {\n    className: classnames('ant-menu-item', {\n      'ant-menu-item-selected': selectedKey === 'model'\n    }),\n    onClick: function onClick() {\n      setSelectedKey('model');\n    },\n    \"aria-hidden\": \"true\"\n  }, __jsx(Link, {\n    href: \"/performer-category\",\n    as: \"/all-models\"\n  }, __jsx(\"a\", null, \"All \".concat(pluralTextModel || 'Models')))), loggedIn && (currentUser === null || currentUser === void 0 ? void 0 : currentUser._id) && (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'performer' && __jsx(React.Fragment, null, __jsx(\"li\", {\n    className: classnames('ant-menu-item hidden-sm', {\n      'ant-menu-item-selected': selectedKey === 'live'\n    }),\n    onClick: function onClick() {\n      setSelectedKey('live');\n    },\n    \"aria-hidden\": \"true\"\n  }, __jsx(Link, {\n    href: \"/live\"\n  }, __jsx(\"a\", null, \"Go Live\"))), __jsx(\"li\", {\n    className: classnames('ant-menu-item hidden-sm', {\n      'ant-menu-item-selected': selectedKey === 'groupchat'\n    }),\n    onClick: function onClick() {\n      setSelectedKey('groupchat');\n    },\n    \"aria-hidden\": \"true\"\n  }, __jsx(Link, {\n    href: \"/live/\".concat(path, \"groupchat\")\n  }, __jsx(\"a\", null, \"Group Chat\"))), __jsx(Dropdown, {\n    overlay: menu\n  }, __jsx(\"li\", {\n    className: \"ant-menu-item visible-sm\"\n  }, __jsx(MoreOutlined, null))))));\n};\n\nLeftHeaderContent.defaultProps = {\n  loggedIn: false,\n  currentUser: null,\n  settings: null,\n  pluralTextModel: '',\n  performerCategories: {\n    total: 0,\n    data: []\n  }\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread(_objectSpread({\n    loggedIn: state.auth.loggedIn\n  }, state.performer.performers), state.ui);\n};\n\nvar mapDispatch = {\n  updateUIValue: updateUIValue\n};\nexport default connect(mapStateToProps, mapDispatch)(LeftHeaderContent);","map":null,"metadata":{},"sourceType":"module"}