{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { loginSuccess, loginFail, performerRegisterFail, performerRegisterSuccess, loginRequesting, setPerformerRegisterSubmitting, setUserRegisterSubmitting, userRegisterFail, userRegisterSuccess, performerloginFail, performerloginSuccess, studioLoginSuccess, studioLoginFail, setUpdatePasswordSubmitting, updatePasswordSuccess, updatePasswordFail, logout, resetLoginData } from './actions';\nconst initialState = {\n  loggedIn: false,\n  authUser: null,\n  performerRegister: {\n    data: null,\n    success: false,\n    submiting: false,\n    error: null\n  },\n  userRegister: {\n    data: null,\n    success: false,\n    submiting: false,\n    error: null\n  },\n  userLogin: {\n    requesting: false,\n    success: false,\n    data: null,\n    error: null\n  },\n  updatePassword: {\n    success: false,\n    submiting: false,\n    error: null\n  }\n};\nconst authReducers = [{\n  on: loginRequesting,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      userLogin: _objectSpread(_objectSpread({}, state.userLogin), {}, {\n        requesting: true\n      })\n    });\n  }\n\n}, {\n  on: loginSuccess,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      loggedIn: true,\n      userLogin: {\n        requesting: false,\n        error: null,\n        data: data.payload,\n        success: true\n      }\n    });\n  }\n\n}, {\n  on: loginFail,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      loggedIn: false,\n      userLogin: {\n        requesting: false,\n        error: data.payload,\n        data: null,\n        success: false\n      }\n    });\n  }\n\n}, {\n  on: performerloginSuccess,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      loggedIn: true,\n      userLogin: {\n        requesting: false,\n        error: null,\n        data: data.payload,\n        success: true\n      }\n    });\n  }\n\n}, {\n  on: performerloginFail,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      loggedIn: false,\n      userLogin: {\n        requesting: false,\n        error: data.payload,\n        data: null,\n        success: false\n      }\n    });\n  }\n\n}, {\n  on: studioLoginSuccess,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      loggedIn: true,\n      userLogin: {\n        requesting: false,\n        error: null,\n        data: data.payload,\n        success: true\n      }\n    });\n  }\n\n}, {\n  on: studioLoginFail,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      loggedIn: false,\n      userLogin: {\n        requesting: false,\n        error: data.payload,\n        data: null,\n        success: false\n      }\n    });\n  }\n\n}, {\n  on: setPerformerRegisterSubmitting,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performerRegister: _objectSpread(_objectSpread({}, state.performerRegister), {}, {\n        submiting: true,\n        error: null\n      })\n    });\n  }\n\n}, {\n  on: performerRegisterSuccess,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performerRegister: {\n        data: data.payload,\n        success: true,\n        submiting: false,\n        error: null\n      }\n    });\n  }\n\n}, {\n  on: performerRegisterFail,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performerRegister: {\n        success: false,\n        submiting: false,\n        error: data.payload\n      }\n    });\n  }\n\n}, {\n  on: setUserRegisterSubmitting,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      userRegister: _objectSpread(_objectSpread({}, state.userRegister), {}, {\n        success: false,\n        requesting: true\n      })\n    });\n  }\n\n}, {\n  on: userRegisterFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      userRegister: {\n        requesting: false,\n        success: false,\n        error: action.payload\n      }\n    });\n  }\n\n}, {\n  on: userRegisterSuccess,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      userRegister: {\n        requesting: false,\n        success: true,\n        error: null\n      }\n    });\n  }\n\n}, {\n  on: setUpdatePasswordSubmitting,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updatePassword: _objectSpread(_objectSpread({}, state.updatePassword), {}, {\n        submiting: true,\n        success: false\n      })\n    });\n  }\n\n}, {\n  on: updatePasswordSuccess,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updatePassword: {\n        success: true,\n        submiting: false,\n        error: null\n      }\n    });\n  }\n\n}, {\n  on: updatePasswordFail,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updatePassword: {\n        success: false,\n        submiting: false,\n        error: data.payload\n      }\n    });\n  }\n\n}, {\n  on: logout,\n\n  reducer() {\n    return _objectSpread({}, initialState);\n  }\n\n}, {\n  on: resetLoginData,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      userLogin: {\n        requesting: false,\n        success: false,\n        data: null,\n        error: null\n      }\n    });\n  }\n\n}];\nexport default merge({}, createReducers('auth', [authReducers], initialState));","map":null,"metadata":{},"sourceType":"module"}