{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { logout } from '@redux/auth/actions';\nimport { updateCurrentUser, updateUserSuccess, updateUserFail, setUpdating, updateCurrentUserAvatar, updateCurrentUserBalance, setReducer, buyTokenSuccess, gettingFavoritePerformers, removeFavorite, getFavoritePerformersSuccess, getFavoritePerformersFailed, gettigPaymentTokenHistory, getPaymentTokenHistroyFail, getPaymentTokenHistroySuccess } from './actions';\nvar initialState = {\n  current: {\n    _id: null,\n    avatar: '/default-user-icon.png',\n    name: '',\n    email: ''\n  },\n  userUpdating: false,\n  updateUserSuccess: false,\n  updateUserError: null,\n  paymentTokenHistory: {\n    searching: false,\n    data: [],\n    total: 0,\n    error: null,\n    success: false\n  },\n  favourites: {\n    searching: false,\n    data: null,\n    total: 0,\n    error: null,\n    success: false\n  }\n};\nvar userReducers = [{\n  on: updateCurrentUser,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload\n    });\n  }\n}, {\n  on: updateCurrentUserAvatar,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        avatar: data.payload\n      })\n    });\n  }\n}, {\n  on: updateCurrentUserBalance,\n  reducer: function reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        balance: state.current.balance + action.payload\n      })\n    });\n  }\n}, {\n  on: updateUserSuccess,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload,\n      updateUserSuccess: true,\n      userUpdating: false,\n      updateUserError: null\n    });\n  }\n}, {\n  on: updateUserFail,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateUserSuccess: false,\n      userUpdating: false,\n      updateUserError: data.payload\n    });\n  }\n}, {\n  on: setUpdating,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      userUpdating: true,\n      updateUserSuccess: false\n    });\n  }\n}, {\n  on: setReducer,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, data.payload.field, data.payload.data));\n  }\n}, {\n  on: buyTokenSuccess,\n  reducer: function reducer(state, data) {\n    var current = state.current;\n    current.balance += data.payload;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        balance: current.balance\n      })\n    });\n  }\n}, {\n  on: gettingFavoritePerformers,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      favourites: _objectSpread(_objectSpread({}, state.favourites), {}, {\n        searching: true,\n        data: null,\n        total: 0,\n        error: null,\n        success: false\n      })\n    });\n  }\n}, {\n  on: getFavoritePerformersSuccess,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      favourites: _objectSpread(_objectSpread({}, state.favourites), {}, {\n        searching: false,\n        data: data.payload.data,\n        total: data.payload.total,\n        error: null,\n        success: true\n      })\n    });\n  }\n}, {\n  on: getFavoritePerformersFailed,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      favourites: _objectSpread(_objectSpread({}, state.favourites), {}, {\n        searching: false,\n        data: null,\n        total: 0,\n        error: data.payload.data,\n        success: false\n      })\n    });\n  }\n}, {\n  on: removeFavorite,\n  reducer: function reducer(state, action) {\n    var favourites = state.favourites;\n    favourites.data = favourites.data.filter(function (f) {\n      return f.performer._id !== action.payload;\n    });\n    return _objectSpread({}, state);\n  }\n}, {\n  on: gettigPaymentTokenHistory,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      paymentTokenHistory: _objectSpread(_objectSpread({}, state.paymentTokenHistory), {}, {\n        searching: true,\n        error: null,\n        success: false\n      })\n    });\n  }\n}, {\n  on: getPaymentTokenHistroySuccess,\n  reducer: function reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      paymentTokenHistory: {\n        searching: false,\n        data: action.payload.data,\n        total: action.payload.total,\n        error: null,\n        success: true\n      }\n    });\n  }\n}, {\n  on: getPaymentTokenHistroyFail,\n  reducer: function reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      paymentTokenHistory: _objectSpread(_objectSpread({}, state.paymentTokenHistory), {}, {\n        searching: false,\n        error: action.payload,\n        success: false\n      })\n    });\n  }\n}, {\n  on: logout,\n  reducer: function reducer() {\n    return _objectSpread({}, initialState);\n  }\n}];\nexport default merge({}, createReducers('user', [userReducers], initialState));","map":null,"metadata":{},"sourceType":"module"}