{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport './ConversationList.less';\nimport { getConversations, setActiveConversation, getConversationDetail, receiveMessageSuccess, searchConversations, updateLastMessage } from '@redux/message/actions';\nimport { Event } from 'src/socket';\nimport { debounce } from 'lodash';\nimport { messageService } from '@services/message.service';\nimport ConversationSearch from './ConversationSearch';\nimport ConversationListItem from './ConversationListItem';\n\nclass ConversationList extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"conversationsRef\", void 0);\n\n    _defineProperty(this, \"state\", {\n      conversationPage: 1,\n      keyword: ''\n    });\n\n    _defineProperty(this, \"onMessage\", async message => {\n      if (!message) {\n        return;\n      }\n\n      const {\n        conversation,\n        currentPerformer,\n        currentUser,\n        getConversationDetail: getConversationDetailHandler,\n        receiveMessageSuccess: receiveMessageSuccessHandler,\n        updateLastMessage: handleUpdateLastMessage\n      } = this.props;\n      const {\n        mapping\n      } = conversation;\n      const {\n        conversationId,\n        text\n      } = message;\n\n      if (!mapping[message.conversationId]) {\n        getConversationDetailHandler({\n          id: message.conversationId\n        });\n      }\n\n      receiveMessageSuccessHandler(message);\n      handleUpdateLastMessage({\n        conversationId,\n        lastMessage: text\n      });\n      await messageService.readAllInConversation(conversationId, currentUser._id ? currentUser._id : currentPerformer._id);\n    });\n\n    _defineProperty(this, \"onSearchConversation\", debounce(async e => {\n      const {\n        value\n      } = e.target;\n      const {\n        searchConversations: getConversationsHandler\n      } = this.props;\n      await this.setState({\n        keyword: value,\n        conversationPage: 0\n      });\n\n      if (value) {\n        return getConversationsHandler({\n          keyword: value,\n          limit: 25,\n          offset: 0,\n          type: 'private'\n        });\n      }\n\n      return getConversationsHandler({\n        limit: 25,\n        offset: 0,\n        type: 'private'\n      });\n    }, 500));\n\n    _defineProperty(this, \"handleScroll\", async event => {\n      const {\n        conversation,\n        getConversations: getConversationsHandler\n      } = this.props;\n      const {\n        requesting,\n        data,\n        total\n      } = conversation.list;\n      const {\n        conversationPage,\n        keyword\n      } = this.state;\n      const canloadmore = total > data.length;\n      const ele = event.target;\n      if (!canloadmore) return;\n\n      if (ele.scrollHeight - ele.scrollTop === ele.clientHeight && !requesting && canloadmore) {\n        this.setState({\n          conversationPage: conversationPage + 1\n        }, () => {\n          getConversationsHandler({\n            keyword,\n            limit: 25,\n            offset: conversationPage * 25,\n            type: 'private'\n          });\n        });\n      }\n    });\n\n    _defineProperty(this, \"setActive\", conversationId => {\n      const {\n        setActiveConversation: setActiveConversationHandler,\n        currentPerformer,\n        currentUser\n      } = this.props;\n      setActiveConversationHandler({\n        conversationId,\n        recipientId: currentUser._id ? currentUser._id : currentPerformer._id\n      });\n    });\n  }\n\n  async componentDidMount() {\n    if (!this.conversationsRef) this.conversationsRef = /*#__PURE__*/createRef();\n    const {\n      getConversations: getConversationsHandler,\n      setActiveConversation: setActiveConversationHandler,\n      toSource,\n      toId,\n      currentUser,\n      currentPerformer\n    } = this.props;\n    const {\n      conversationPage,\n      keyword\n    } = this.state;\n    getConversationsHandler({\n      limit: 25,\n      offset: conversationPage * 25,\n      type: 'private',\n      keyword\n    });\n\n    if (toSource && toId) {\n      setTimeout(() => {\n        setActiveConversationHandler({\n          source: toSource,\n          sourceId: toId,\n          recipientId: currentUser._id ? currentUser._id : currentPerformer._id\n        });\n      }, 1000);\n    }\n  }\n\n  render() {\n    const {\n      conversation\n    } = this.props;\n    const {\n      data: conversations,\n      requesting\n    } = conversation.list;\n    const {\n      mapping,\n      activeConversation = {}\n    } = conversation;\n    if (!this.conversationsRef) this.conversationsRef = /*#__PURE__*/createRef();\n    return __jsx(\"div\", {\n      className: \"conversation-list\",\n      ref: this.conversationsRef,\n      onScroll: this.handleScroll.bind(this)\n    }, __jsx(Event, {\n      event: \"message_created\",\n      handler: this.onMessage\n    }), __jsx(\"h4\", {\n      className: \"text-center\",\n      style: {\n        fontSize: '22px'\n      }\n    }, \"Messenger\"), __jsx(ConversationSearch, {\n      onSearch: e => {\n        e.persist();\n        this.onSearchConversation(e);\n      }\n    }), conversations.length > 0 && conversations.map(conversationId => __jsx(ConversationListItem, {\n      key: conversationId,\n      data: mapping[conversationId],\n      setActive: this.setActive.bind(this),\n      selected: activeConversation._id === conversationId\n    })), requesting && __jsx(\"div\", {\n      className: \"text-center\"\n    }, __jsx(\"img\", {\n      alt: \"loading\",\n      src: \"/loading-ico.gif\",\n      width: \"50px\"\n    })), !requesting && !conversations.length && __jsx(\"p\", {\n      className: \"text-center\"\n    }, \"No conversation found.\"));\n  }\n\n}\n\nconst mapStates = state => ({\n  conversation: state.conversation,\n  message: state.message,\n  currentUser: state.user.current,\n  currentPerformer: state.performer.current\n});\n\nconst mapDispatch = {\n  searchConversations,\n  getConversations,\n  setActiveConversation,\n  getConversationDetail,\n  receiveMessageSuccess,\n  updateLastMessage\n};\nexport default connect(mapStates, mapDispatch)(ConversationList);","map":null,"metadata":{},"sourceType":"module"}