{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { message, Checkbox, Table, Tabs, Button } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport React, { PureComponent } from 'react';\nimport { performerService } from 'src/services';\nimport { getResponseError } from '@lib/utils';\nimport { connect } from 'react-redux';\nimport './index.less';\n\nvar PerformerGeoBlockPage = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PerformerGeoBlockPage, _PureComponent);\n\n  var _super = _createSuper(PerformerGeoBlockPage);\n\n  function PerformerGeoBlockPage(props) {\n    var _this;\n\n    _classCallCheck(this, PerformerGeoBlockPage);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      blockedCountries: [],\n      blockedUsers: [],\n      isLoading: false,\n      isBlocking: false\n    };\n    return _this;\n  }\n\n  _createClass(PerformerGeoBlockPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.search();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_, prevState) {\n      var _this$state = this.state,\n          blockedCountries = _this$state.blockedCountries,\n          isBlocking = _this$state.isBlocking;\n\n      if (isBlocking && blockedCountries !== prevState.blockedCountries) {\n        this.blockCountry(blockedCountries);\n      }\n    }\n  }, {\n    key: \"handleBlockCountry\",\n    value: function handleBlockCountry(code, event) {\n      this.setState({\n        isBlocking: true\n      });\n      var blockedCountries = this.state.blockedCountries;\n\n      if (event.target && event.target.checked) {\n        // performerService.geoBlock({ countries: blockedCountries });\n        this.setState({\n          blockedCountries: [].concat(_toConsumableArray(blockedCountries), [code])\n        });\n      } else {\n        this.setState({\n          blockedCountries: blockedCountries.filter(function (c) {\n            return code !== c;\n          })\n        });\n      }\n    }\n  }, {\n    key: \"handleBlockUser\",\n    value: function () {\n      var _handleBlockUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userId) {\n        var blockedUsers, user, error;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (window.confirm('Are you sure?')) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                blockedUsers = this.state.blockedUsers;\n                _context.prev = 3;\n                user = blockedUsers.find(function (u) {\n                  return u._id === userId;\n                });\n                blockedUsers.splice(user, 1);\n                _context.next = 8;\n                return this.setState(function (state) {\n                  var list = state.blockedUsers.splice(user, 1);\n                  return _objectSpread(_objectSpread({}, state), {\n                    blockedUsers: list\n                  });\n                });\n\n              case 8:\n                performerService.geoBlock({\n                  userIds: blockedUsers.length ? blockedUsers.map(function (b) {\n                    return b._id;\n                  }) : []\n                });\n                _context.next = 17;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](3);\n                _context.next = 15;\n                return Promise.resolve(_context.t0);\n\n              case 15:\n                error = _context.sent;\n                message.error(error || 'Something went wrong, please try again later');\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 11]]);\n      }));\n\n      function handleBlockUser(_x) {\n        return _handleBlockUser.apply(this, arguments);\n      }\n\n      return handleBlockUser;\n    }()\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var resp, error;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                this.setState({\n                  isLoading: true\n                });\n                _context2.next = 4;\n                return performerService.getBlockedList();\n\n              case 4:\n                resp = _context2.sent;\n                this.setState({\n                  blockedCountries: resp.data.countries || [],\n                  blockedUsers: resp.data.usersInfo || []\n                });\n                _context2.next = 14;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                _context2.next = 12;\n                return Promise.resolve(_context2.t0);\n\n              case 12:\n                error = _context2.sent;\n                message.error(getResponseError(error || 'An error occurred, please try again!'));\n\n              case 14:\n                _context2.prev = 14;\n                this.setState({\n                  isLoading: false\n                });\n                return _context2.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8, 14, 17]]);\n      }));\n\n      function search() {\n        return _search.apply(this, arguments);\n      }\n\n      return search;\n    }()\n  }, {\n    key: \"blockCountry\",\n    value: function () {\n      var _blockCountry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(blockedCountries) {\n        var error;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return performerService.geoBlock({\n                  countries: blockedCountries\n                });\n\n              case 3:\n                _context3.next = 11;\n                break;\n\n              case 5:\n                _context3.prev = 5;\n                _context3.t0 = _context3[\"catch\"](0);\n                _context3.next = 9;\n                return Promise.resolve(_context3.t0);\n\n              case 9:\n                error = _context3.sent;\n                message.error(error || 'Something went wrong, please try again later');\n\n              case 11:\n                _context3.prev = 11;\n                this.setState({\n                  isBlocking: false\n                });\n                return _context3.finish(11);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 5, 11, 14]]);\n      }));\n\n      function blockCountry(_x2) {\n        return _blockCountry.apply(this, arguments);\n      }\n\n      return blockCountry;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var countries = this.props.countries;\n      var _this$state2 = this.state,\n          isLoading = _this$state2.isLoading,\n          isBlocking = _this$state2.isBlocking,\n          blockedCountries = _this$state2.blockedCountries,\n          blockedUsers = _this$state2.blockedUsers;\n      var countriesColumns = [{\n        title: 'Country',\n        dataIndex: 'name',\n        key: 'name'\n      }, {\n        title: 'Coutry Code',\n        dataIndex: 'code',\n        key: 'code'\n      }, {\n        title: 'Flag',\n        dataIndex: 'flag',\n        key: 'flag',\n        render: function render(flag) {\n          return __jsx(\"img\", {\n            src: flag,\n            width: \"50px\",\n            alt: \"\"\n          });\n        }\n      }, {\n        title: '#',\n        dataIndex: 'code',\n        key: 'check',\n        render: function render(code) {\n          return __jsx(Checkbox, {\n            disabled: isBlocking,\n            defaultChecked: !!(blockedCountries.length > 0 && blockedCountries.find(function (c) {\n              return c === code;\n            })),\n            onChange: _this2.handleBlockCountry.bind(_this2, code)\n          });\n        }\n      }];\n      var usersColumns = [{\n        title: '# ',\n        dataIndex: '_id',\n        key: 'avatar',\n        render: function render(avatar, record) {\n          return __jsx(\"img\", {\n            src: (record === null || record === void 0 ? void 0 : record.avatar) || '/default-user-icon.png',\n            width: \"50px\",\n            alt: \"\"\n          });\n        }\n      }, {\n        title: 'Name ',\n        dataIndex: 'name',\n        key: 'name'\n      }, {\n        title: 'Username',\n        dataIndex: 'username',\n        key: 'username'\n      }, {\n        title: '#',\n        dataIndex: '_id',\n        key: 'check',\n        render: function render(id) {\n          return __jsx(\"div\", null, __jsx(Button, {\n            onClick: _this2.handleBlockUser.bind(_this2, id)\n          }, \"Unblock\"));\n        }\n      }];\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Blocking\")), __jsx(\"div\", {\n        className: \"geo-blocking-page\"\n      }, __jsx(PageHeader, {\n        title: \"Blocking\"\n      }), __jsx(Tabs, {\n        defaultActiveKey: \"geo-block\"\n      }, __jsx(Tabs.TabPane, {\n        tab: \"GEO Blocking\",\n        key: \"geo-block\"\n      }, __jsx(\"div\", null, countries && countries.length > 0 && !isLoading ? __jsx(Table, {\n        pagination: false,\n        dataSource: countries.map(function (c, index) {\n          return _objectSpread(_objectSpread({}, c), {}, {\n            key: \"key-country-\".concat(index)\n          });\n        }),\n        columns: countriesColumns\n      }) : __jsx(\"p\", {\n        className: \"text-center\"\n      }, \"loading...\"))), __jsx(Tabs.TabPane, {\n        tab: \"Black list users\",\n        key: \"user-block\"\n      }, __jsx(\"div\", null, !isLoading ? __jsx(Table, {\n        pagination: false,\n        dataSource: blockedUsers.map(function (c, index) {\n          return _objectSpread(_objectSpread({}, c), {}, {\n            key: \"key-country-\".concat(index)\n          });\n        }),\n        columns: usersColumns\n      }) : __jsx(\"p\", {\n        className: \"text-center\"\n      }, \"loading...\"))))));\n    }\n  }]);\n\n  return PerformerGeoBlockPage;\n}(PureComponent);\n\n_defineProperty(PerformerGeoBlockPage, \"authenticate\", true);\n\n_defineProperty(PerformerGeoBlockPage, \"layout\", 'primary');\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    countries: state.settings.countries\n  };\n};\n\nexport default connect(mapStateToProps)(PerformerGeoBlockPage);","map":null,"metadata":{},"sourceType":"module"}