{"ast":null,"code":"import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport { authService, userService, performerService, studioService } from 'src/services';\nimport { PERFORMER_ROLE, USER_ROLE, STUDIO_ROLE } from 'src/services/api-request';\nimport { message } from 'antd';\nimport { updateCurrentStudio } from '../studio/actions';\nimport { updateCurrentPerformer } from '../performer/actions';\nimport { updateCurrentUser } from '../user/actions';\nimport { login, loginSuccess, logout, loginFail, performerRegister, performerRegisterFail, setPerformerRegisterSubmitting, loginRequesting, userRegister, userRegisterFail, userRegisterSuccess, setUserRegisterSubmitting, performerRegisterSuccess, performerlogin, performerloginFail, performerloginSuccess, studioLogin, studioLoginSuccess, studioLoginFail, updatePassword, updatePasswordSuccess, updatePasswordFail, setUpdatePasswordSubmitting } from './actions';\nconst authSagas = [{\n  on: login,\n\n  *worker(data) {\n    try {\n      yield put(loginRequesting());\n      const payload = data.payload;\n      const resp = (yield authService.login(payload)).data; // store token, update store and redirect to dashboard page\n\n      yield authService.setAuthHeader(resp.token, USER_ROLE);\n      const userResp = (yield userService.me()).data;\n      yield put(updateCurrentUser(userResp));\n      yield put(loginSuccess());\n      Router.push('/');\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(loginFail(error));\n    }\n  }\n\n}, {\n  on: performerlogin,\n\n  *worker(data) {\n    try {\n      yield put(loginRequesting());\n      const payload = data.payload;\n      const resp = (yield authService.performerLogin(payload)).data; // store token, update store and redirect to dashboard page\n\n      yield authService.setAuthHeader(resp.token, PERFORMER_ROLE);\n      const performerResp = (yield performerService.me()).data;\n      yield put(updateCurrentPerformer(performerResp));\n      yield put(performerloginSuccess());\n      Router.push('/live');\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(performerloginFail(error));\n    }\n  }\n\n}, {\n  on: studioLogin,\n\n  *worker(data) {\n    try {\n      yield put(loginRequesting());\n      const payload = data.payload;\n      const resp = (yield authService.studioLogin(payload)).data; // store token, update store and redirect to dashboard page\n\n      yield authService.setAuthHeader(resp.token, STUDIO_ROLE);\n      const studioResp = (yield studioService.me()).data;\n      yield put(updateCurrentStudio(studioResp));\n      yield put(studioLoginSuccess());\n      Router.push('/studio/account-settings');\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(studioLoginFail(error));\n    }\n  }\n\n}, {\n  on: performerRegister,\n\n  *worker(data) {\n    try {\n      yield put(setPerformerRegisterSubmitting());\n      const {\n        payload\n      } = data;\n      const resp = yield authService.performersRegister(payload);\n      yield put(performerRegisterSuccess(resp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(performerRegisterFail(error));\n    }\n  }\n\n}, {\n  on: logout,\n\n  *worker() {\n    try {\n      yield authService.removeToken();\n      yield authService.removeRemember();\n      Router.push('/');\n      message.success('Log out!');\n    } catch (e) {\n      message.error('Something went wrong!');\n    }\n  }\n\n}, {\n  on: userRegister,\n\n  *worker(data) {\n    try {\n      yield put(setUserRegisterSubmitting());\n      const resp = yield authService.userRegister(data.payload);\n      yield put(userRegisterSuccess(resp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(userRegisterFail(error));\n    }\n  }\n\n}, {\n  on: updatePassword,\n\n  *worker(action) {\n    try {\n      yield put(setUpdatePasswordSubmitting());\n      const resp = yield authService.updatePassword(action.payload);\n      yield put(updatePasswordSuccess(resp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(updatePasswordFail(error));\n    }\n  }\n\n}];\nexport default flatten([createSagas(authSagas)]);","map":null,"metadata":{},"sourceType":"module"}