{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable camelcase */\nimport * as React from 'react';\nimport { streamService } from 'src/services';\nimport classnames from 'classnames';\nimport withAntMedia from 'src/antmedia';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\n\nvar Subscriber = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(Subscriber, _React$PureComponent);\n\n  var _super = _createSuper(Subscriber);\n\n  function Subscriber() {\n    var _this;\n\n    _classCallCheck(this, Subscriber);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"streamIds\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"availableStreamIds\", []);\n\n    return _this;\n  }\n\n  _createClass(Subscriber, [{\n    key: \"handler\",\n    value: function () {\n      var _handler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(info, obj) {\n        var _this$props, webRTCAdaptor, settings, tokens, token, availableStream, _token;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = this.props, webRTCAdaptor = _this$props.webRTCAdaptor, settings = _this$props.settings;\n\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.INITIALIZED)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                if (!Array.isArray(this.streamIds)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 5;\n                return Promise.all(this.streamIds.map(function (streamId) {\n                  return streamService.getSubscriberToken({\n                    streamId: streamId,\n                    settings: settings\n                  });\n                }));\n\n              case 5:\n                tokens = _context.sent;\n                this.streamIds.map(function (id, i) {\n                  return webRTCAdaptor.play(id, tokens[i]);\n                });\n                return _context.abrupt(\"return\");\n\n              case 8:\n                _context.next = 10;\n                return streamService.getSubscriberToken({\n                  streamId: this.streamIds,\n                  settings: settings\n                });\n\n              case 10:\n                token = _context.sent;\n                webRTCAdaptor.play(this.streamIds, token);\n                _context.next = 31;\n                break;\n\n              case 14:\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.NEW_STREAM_AVAILABLE)) {\n                  _context.next = 19;\n                  break;\n                }\n\n                availableStream = this.availableStreamIds.find(function (id) {\n                  return id === obj.streamId;\n                });\n\n                if (!availableStream) {\n                  this.availableStreamIds.push(obj.streamId);\n                  this.createRemoteVideo(obj);\n                }\n\n                _context.next = 31;\n                break;\n\n              case 19:\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.PLAY_FINISHED)) {\n                  _context.next = 25;\n                  break;\n                }\n\n                this.availableStreamIds = this.availableStreamIds.filter(function (id) {\n                  return id !== obj.streamId;\n                });\n                this.removeRemoteVideo(obj.streamId);\n                setTimeout(function () {\n                  webRTCAdaptor.getStreamInfo(obj.streamId);\n                }, 3000);\n                _context.next = 31;\n                break;\n\n              case 25:\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.STREAM_INFORMATION)) {\n                  _context.next = 31;\n                  break;\n                }\n\n                if (!this.streamIds.includes(obj.streamId)) {\n                  _context.next = 31;\n                  break;\n                }\n\n                _context.next = 29;\n                return streamService.getSubscriberToken({\n                  streamId: obj.streamId,\n                  settings: settings\n                });\n\n              case 29:\n                _token = _context.sent;\n                webRTCAdaptor.play(obj.streamId, _token);\n\n              case 31:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handler(_x, _x2) {\n        return _handler.apply(this, arguments);\n      }\n\n      return handler;\n    }()\n  }, {\n    key: \"cbErrorHandler\",\n    value: function () {\n      var _cbErrorHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(error) {\n        var _this$props2, webRTCAdaptor, initWebRTCAdaptor;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (error === 'no_stream_exist') {\n                  _this$props2 = this.props, webRTCAdaptor = _this$props2.webRTCAdaptor, initWebRTCAdaptor = _this$props2.initWebRTCAdaptor;\n\n                  if (!webRTCAdaptor) {\n                    initWebRTCAdaptor(this.handler.bind(this), this.cbErrorHandler.bind(this));\n                  } else {\n                    this.streamIds.forEach(function (id) {\n                      return webRTCAdaptor.getStreamInfo(id);\n                    });\n                  }\n                }\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function cbErrorHandler(_x3) {\n        return _cbErrorHandler.apply(this, arguments);\n      }\n\n      return cbErrorHandler;\n    }()\n  }, {\n    key: \"createRemoteVideo\",\n    value: function createRemoteVideo(_ref) {\n      var stream = _ref.stream,\n          streamId = _ref.streamId;\n      var _this$props3 = this.props,\n          classNames = _this$props3.classNames,\n          containerClassName = _this$props3.containerClassName;\n      var video = document.createElement('video');\n      var container = document.getElementsByClassName(containerClassName)[0];\n      video.setAttribute('id', \"streamId-subscriber-\".concat(streamId));\n      video.setAttribute('class', classnames(classNames));\n      video.autoplay = true;\n      video.muted = true;\n      video.controls = true;\n      video.playsInline = true;\n      video.width = container.clientWidth / 4;\n      video.height = 100.5;\n      video.srcObject = stream;\n      container.append(video);\n    }\n  }, {\n    key: \"removeRemoteVideo\",\n    value: function removeRemoteVideo(streamId) {\n      var containerClassName = this.props.containerClassName;\n      var video = document.getElementById(\"streamId-subscriber-\".concat(streamId));\n\n      if (video) {\n        video.srcObject = null;\n        var container = document.getElementsByClassName(containerClassName)[0];\n        container.removeChild(video);\n      }\n    }\n  }, {\n    key: \"play\",\n    value: function () {\n      var _play = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(streamIds) {\n        var _this$props4, initWebRTCAdaptor, initialized, webRTCAdaptor, settings, tokens;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props4 = this.props, initWebRTCAdaptor = _this$props4.initWebRTCAdaptor, initialized = _this$props4.initialized, webRTCAdaptor = _this$props4.webRTCAdaptor, settings = _this$props4.settings;\n                this.streamIds = [].concat(_toConsumableArray(this.streamIds), _toConsumableArray(streamIds));\n\n                if (!initialized) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                if (!Array.isArray(streamIds)) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.next = 6;\n                return Promise.all(streamIds.map(function (streamId) {\n                  return streamService.getSubscriberToken({\n                    streamId: streamId,\n                    settings: settings\n                  });\n                }));\n\n              case 6:\n                tokens = _context3.sent;\n                streamIds.map(function (id, i) {\n                  return webRTCAdaptor.play(id, tokens[i]);\n                });\n\n              case 8:\n                return _context3.abrupt(\"return\");\n\n              case 9:\n                initWebRTCAdaptor(this.handler.bind(this), this.cbErrorHandler.bind(this));\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function play(_x4) {\n        return _play.apply(this, arguments);\n      }\n\n      return play;\n    }()\n  }, {\n    key: \"close\",\n    value: function close(streamId) {\n      this.streamIds = this.streamIds.filter(function (id) {\n        return id !== streamId;\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var leaveSession = this.props.leaveSession;\n      this.streamIds = [];\n      this.availableStreamIds = [];\n      leaveSession();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(React.Fragment, null);\n    }\n  }]);\n\n  return Subscriber;\n}(React.PureComponent);\n\nexport default withAntMedia(Subscriber);","map":null,"metadata":{},"sourceType":"module"}