{"ast":null,"code":"import moment from 'moment';\nimport { message } from 'antd';\nimport { getResponseError } from 'src/lib';\nimport { APIRequest } from './api-request';\n\nclass StreamService extends APIRequest {\n  getSessionId(id, type) {\n    return this.get(`/streaming/session/${id}/${type}`);\n  }\n\n  goLive() {\n    return this.post('/streaming/live');\n  }\n\n  joinPublicChat(performerId) {\n    return this.post(`/streaming/join/${performerId}`);\n  }\n\n  requestPrivateChat(performerId) {\n    return this.post(`/streaming/private-chat/${performerId}`);\n  }\n\n  acceptPrivateChat(id) {\n    return this.get(`/streaming/private-chat/${id}`);\n  }\n\n  startGroupChat() {\n    return this.post('/streaming/group-chat');\n  }\n\n  joinGroupChat(id) {\n    return this.get(`/streaming/group-chat/${id}`);\n  }\n\n  generateOneTimeToken(data) {\n    return this.post('/streaming/token', data);\n  }\n\n  async getPublishToken(options, expireDate = moment().add(1, 'd').toDate().getTime()) {\n    try {\n      const {\n        settings,\n        streamId\n      } = options;\n      const {\n        secureOption\n      } = settings;\n\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'publish',\n          expireDate\n        });\n        return resp.data.tokenId;\n      }\n\n      return null;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return null;\n    }\n  }\n\n  async getSubscriberToken(options, expireDate = moment().add(1, 'd').toDate().getTime()) {\n    try {\n      const {\n        settings,\n        streamId\n      } = options;\n      const {\n        secureOption\n      } = settings;\n\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'play',\n          expireDate\n        });\n        return resp.data.tokenId;\n      }\n\n      return null;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return null;\n    }\n  }\n\n  async getLiveStreamOrVodURL(options, expireDate = moment().add(1, 'd').toDate().getTime(), _player = 'hls') {\n    // http://[IP_Address]/<Application_Name>/streams/streamID.mp4?token=tokenId\n    // http://[IP_Address]/<Application_Name>/streams/streamID.m3u8?token=tokenId\n    // http://[IP_Address]/<Application_Name>/play.html?name=streamID&playOrder=hls&token=tokenId\n    try {\n      // const src = `https://${viewerURL}:5443/${appName}/streams/${streamId}.m3u8${oneTimeToken ? `?token=${oneTimeToken}` : ''}`;\n      // eslint-disable-next-line no-shadow\n      const {\n        appName,\n        settings,\n        streamId\n      } = options;\n      const {\n        secureOption,\n        viewerURL\n      } = settings;\n      const extension = _player === 'hls' ? 'm3u8' : 'mp4';\n\n      if (!viewerURL || !appName) {\n        return '';\n      }\n\n      let oneTimeToken = '';\n\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'play',\n          expireDate\n        });\n        oneTimeToken = resp.data.tokenId;\n      }\n\n      const {\n        protocol\n      } = window.location;\n      return `${protocol}//${viewerURL}/${appName}/streams/${streamId}.${extension}${oneTimeToken ? `?token=${oneTimeToken}` : ''}`;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return '';\n    }\n  }\n\n}\n\nexport const streamService = new StreamService();","map":null,"metadata":{},"sourceType":"module"}