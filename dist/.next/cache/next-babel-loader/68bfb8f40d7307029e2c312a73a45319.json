{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\n/* eslint-disable func-names */\n\n/* eslint-disable no-param-reassign */\nimport { reduce, isArray, isEmpty, flatten } from 'lodash';\nimport { createSelector } from 'reselect';\nimport { takeLatest, delay } from 'redux-saga/effects';\nimport { createAction as ReduxCreateAction, handleActions as handleReduxActions } from 'redux-actions';\n\nfunction createAction(type) {\n  var action = ReduxCreateAction(type);\n\n  action.is = function (aType) {\n    return action.toString() === aType;\n  };\n\n  return action;\n}\n/* tslint:disable-next-line */\n\n\nfunction createAsyncAction(action, type) {\n  var _ref;\n\n  return _ref = {}, _defineProperty(_ref, action, createAction(type)), _defineProperty(_ref, \"\".concat(action, \"Success\"), createAction(\"\".concat(type, \"_SUCCESS\"))), _defineProperty(_ref, \"\".concat(action, \"Fail\"), createAction(\"\".concat(type, \"_FAIL\"))), _ref;\n}\n\nfunction createAsyncActions(type) {\n  return [createAction(type), createAction(\"\".concat(type, \"_SUCCESS\")), createAction(\"\".concat(type, \"_FAIL\"))];\n}\n/* tslint:disable */\n\n\nfunction handleActions(actions, initialState) {\n  return handleReduxActions(reduce(actions, function (reducer, handler, action) {\n    reducer[action] = function (state, act) {\n      return handler(state.set('action', action), act);\n    };\n\n    return reducer;\n  }, {}), initialState);\n}\n\nfunction createReducers(stateContext, reducers, initialState) {\n  var preventResetting = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return _defineProperty({}, stateContext, handleReduxActions(reduce(flatten(reducers), function (reducer, action) {\n    if (isArray(action.on)) {\n      action.on.forEach(function (act) {\n        reducer[act] = action.reducer;\n      });\n    } else reducer[action.on] = action.reducer;\n\n    return reducer;\n  }, preventResetting ? {} : {\n    APP_STATE_RESET: function APP_STATE_RESET() {\n      return initialState;\n    }\n  }), initialState));\n}\n\nexport function createSagas(sagas) {\n  return flatten(sagas).map(function (saga) {\n    var on = saga.on,\n        _saga$effect = saga.effect,\n        effect = _saga$effect === void 0 ? takeLatest : _saga$effect,\n        worker = saga.worker;\n    return /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return effect(on, /*#__PURE__*/_regeneratorRuntime.mark(function _callee(action) {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return delay(0);\n\n                      case 2:\n                        _context.next = 4;\n                        return worker(action);\n\n                      case 4:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    });\n  });\n}\n\nfunction createSelectorsA(context) {\n  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var stateSelector = function stateSelector(state) {\n    return state[context];\n  };\n\n  if (isEmpty(keys)) return stateSelector;\n  return keys.map(function (key) {\n    return function (state) {\n      return isArray(key) ? stateSelector(state).getIn(key) : stateSelector(state).get(key);\n    };\n  });\n}\n\nfunction createSelectors(context, keys) {\n  var stateSelector = function stateSelector(state) {\n    return state[context];\n  };\n\n  return reduce(keys, function (selectors, key) {\n    selectors[\"\".concat(key, \"Selector\")] = function (state) {\n      return stateSelector(state).get(key);\n    };\n\n    return selectors;\n  }, {});\n}\n\nfunction createJSSelectors(context, keys) {\n  var stateSelector = function stateSelector(state) {\n    return state[context];\n  };\n\n  return reduce(keys, function (selectors, key) {\n    selectors[\"\".concat(key, \"Selector\")] = function (state) {\n      return stateSelector(state)[key];\n    };\n\n    return selectors;\n  }, {});\n}\n\nexport { createAction, createAsyncAction, createAsyncActions, createSelectorsA, handleActions, createReducers, createSelectors, createSelector, createJSSelectors };","map":null,"metadata":{},"sourceType":"module"}