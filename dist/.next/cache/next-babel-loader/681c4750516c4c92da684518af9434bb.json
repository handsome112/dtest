{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable camelcase */\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Row, Col, Button, message } from 'antd';\nimport { connect } from 'react-redux';\nimport { messageService, streamService } from 'src/services';\nimport LivePublisher from '@components/streaming/publisher';\nimport { SocketContext, Event } from 'src/socket';\nimport { getStreamConversationSuccess, loadStreamMessages, resetStreamMessage, resetAllStreamMessage } from '@redux/stream-chat/actions';\nimport { updateStreamingStatus } from '@redux/performer/actions';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport UpdateSatusForm from '@components/performer/streaming-status-update-form';\nimport Router from 'next/router';\nimport { getResponseError } from '@lib/utils';\nimport './index.less'; // eslint-disable-next-line no-shadow\n\nvar EVENT_NAME;\n\n(function (EVENT_NAME) {\n  EVENT_NAME[\"ROOM_INFORMATIOM_CHANGED\"] = \"public-room-changed\";\n  EVENT_NAME[\"USER_LEFT_ROOM\"] = \"USER_LEFT_ROOM\";\n})(EVENT_NAME || (EVENT_NAME = {}));\n\nvar PerformerLivePage = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PerformerLivePage, _PureComponent);\n\n  var _super = _createSuper(PerformerLivePage);\n\n  function PerformerLivePage(props) {\n    var _this;\n\n    _classCallCheck(this, PerformerLivePage);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"publisherRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"socket\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onbeforeunload\", function () {\n      _this.leavePublicRoom();\n    });\n\n    _this.state = {\n      loading: false,\n      initialized: false,\n      publish_started: false,\n      total: 0,\n      members: []\n    };\n    return _this;\n  }\n\n  _createClass(PerformerLivePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.socket = this.context;\n      this.joinPublicRoom();\n      window.addEventListener('beforeunload', this.onbeforeunload);\n      Router.events.on('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          updateSuccess = _this$props.updateSuccess,\n          updateError = _this$props.updateError;\n\n      if (prevProps.updateSuccess !== updateSuccess && updateSuccess) {\n        message.success('Update Status Success.');\n      }\n\n      if (prevProps.updateError !== updateError && updateError) {\n        message.error(getResponseError(updateError));\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('beforeunload', this.onbeforeunload);\n      Router.events.off('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"handler\",\n    value: function handler(_ref) {\n      var _activeConversation$d;\n\n      var total = _ref.total,\n          members = _ref.members,\n          conversationId = _ref.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n        this.setState({\n          total: total,\n          members: members\n        });\n      }\n    }\n  }, {\n    key: \"handleUpdateStatusForm\",\n    value: function handleUpdateStatusForm(data) {\n      var dispatchUpdateStreamingStatus = this.props.updateStreamingStatus;\n      dispatchUpdateStreamingStatus(data);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.publisherRef && this.publisherRef.start();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      window.location.reload();\n    }\n  }, {\n    key: \"callback\",\n    value: function () {\n      var _callback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(info) {\n        var activeConversation, resp, error;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                activeConversation = this.props.activeConversation;\n\n                if (!(activeConversation && activeConversation.data)) {\n                  _context.next = 25;\n                  break;\n                }\n\n                this.socket = this.context;\n\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.INITIALIZED)) {\n                  _context.next = 24;\n                  break;\n                }\n\n                this.setState({\n                  initialized: true\n                });\n                _context.prev = 5;\n                this.setState({\n                  loading: true\n                });\n                _context.next = 9;\n                return streamService.goLive();\n\n              case 9:\n                resp = _context.sent;\n                this.publisherRef && this.publisherRef.publish(resp.data.sessionId);\n                _context.next = 19;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](5);\n                _context.next = 17;\n                return Promise.resolve(_context.t0);\n\n              case 17:\n                error = _context.sent;\n                message.error(getResponseError(error));\n\n              case 19:\n                _context.prev = 19;\n                this.setState({\n                  loading: false\n                });\n                return _context.finish(19);\n\n              case 22:\n                _context.next = 25;\n                break;\n\n              case 24:\n                if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_STARTED) {\n                  this.setState({\n                    publish_started: true,\n                    loading: false\n                  });\n                  this.socket.emit('public-stream/live', {\n                    conversationId: activeConversation.data._id\n                  });\n                } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_FINISHED) {\n                  this.setState({\n                    loading: false,\n                    publish_started: false\n                  });\n                } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.CLOSED) {\n                  this.setState({\n                    loading: false,\n                    initialized: false,\n                    publish_started: false\n                  });\n                }\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 13, 19, 22]]);\n      }));\n\n      function callback(_x) {\n        return _callback.apply(this, arguments);\n      }\n\n      return callback;\n    }()\n  }, {\n    key: \"joinPublicRoom\",\n    value: function () {\n      var _joinPublicRoom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this$props2, dispatchLoadStreamMessages, dispatchGetStreamConversationSuccess, resp, conversation, error;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props2 = this.props, dispatchLoadStreamMessages = _this$props2.loadStreamMessages, dispatchGetStreamConversationSuccess = _this$props2.getStreamConversationSuccess;\n                _context2.prev = 1;\n                this.setState({\n                  loading: true\n                });\n                _context2.next = 5;\n                return streamService.goLive();\n\n              case 5:\n                resp = _context2.sent;\n                conversation = resp.data.conversation;\n\n                if (conversation && conversation._id) {\n                  // this.publisherRef && this.publisherRef.start();\n                  dispatchGetStreamConversationSuccess({\n                    data: conversation\n                  });\n                  dispatchLoadStreamMessages({\n                    conversationId: conversation._id,\n                    limit: 25,\n                    offset: 0,\n                    type: conversation.type\n                  });\n                  this.socket = this.context;\n                  this.socket && this.socket.emit('public-stream/join', {\n                    conversationId: conversation._id\n                  });\n                }\n\n                _context2.next = 16;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](1);\n                _context2.next = 14;\n                return Promise.resolve(_context2.t0);\n\n              case 14:\n                error = _context2.sent;\n                message.error(getResponseError(error));\n\n              case 16:\n                _context2.prev = 16;\n                this.setState({\n                  loading: false\n                });\n                return _context2.finish(16);\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 10, 16, 19]]);\n      }));\n\n      function joinPublicRoom() {\n        return _joinPublicRoom.apply(this, arguments);\n      }\n\n      return joinPublicRoom;\n    }()\n  }, {\n    key: \"leavePublicRoom\",\n    value: function leavePublicRoom() {\n      var _this$props3 = this.props,\n          activeConversation = _this$props3.activeConversation,\n          dispatchResetStreamMessage = _this$props3.resetStreamMessage;\n\n      if (this.socket && activeConversation && activeConversation.data) {\n        var conversation = _objectSpread({}, activeConversation.data);\n\n        this.socket.emit('public-stream/leave', {\n          conversationId: conversation._id\n        });\n        dispatchResetStreamMessage();\n      }\n    }\n  }, {\n    key: \"userLeftRoomHandle\",\n    value: function userLeftRoomHandle(_ref2) {\n      var _activeConversation$d2;\n\n      var username = _ref2.username,\n          conversationId = _ref2.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d2 = activeConversation.data) === null || _activeConversation$d2 === void 0 ? void 0 : _activeConversation$d2._id) === conversationId) {\n        var _this$state = this.state,\n            total = _this$state.total,\n            members = _this$state.members;\n        this.setState({\n          total: total - 1,\n          members: members.filter(function (m) {\n            return m.username !== username;\n          })\n        });\n      }\n    }\n  }, {\n    key: \"removeAllMessage\",\n    value: function () {\n      var _removeAllMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this$props4, activeConversation, performer, dispatchResetAllMessage, error;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props4 = this.props, activeConversation = _this$props4.activeConversation, performer = _this$props4.performer, dispatchResetAllMessage = _this$props4.resetAllStreamMessage;\n\n                if (!(!activeConversation.data || performer._id !== activeConversation.data.performerId)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                _context3.prev = 3;\n\n                if (window.confirm('Are you sure you want to remove chat history?')) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 6:\n                _context3.next = 8;\n                return messageService.deleteAllMessageInConversation(activeConversation.data._id);\n\n              case 8:\n                dispatchResetAllMessage({\n                  conversationId: activeConversation.data._id\n                });\n                _context3.next = 17;\n                break;\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](3);\n                _context3.next = 15;\n                return Promise.resolve(_context3.t0);\n\n              case 15:\n                error = _context3.sent;\n                message.error(getResponseError(error));\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3, 11]]);\n      }));\n\n      function removeAllMessage() {\n        return _removeAllMessage.apply(this, arguments);\n      }\n\n      return removeAllMessage;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          performer = _this$props5.performer,\n          activeConversation = _this$props5.activeConversation,\n          updating = _this$props5.updating;\n      var _this$state2 = this.state,\n          loading = _this$state2.loading,\n          initialized = _this$state2.initialized,\n          publish_started = _this$state2.publish_started,\n          members = _this$state2.members,\n          total = _this$state2.total;\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Go Live\")), __jsx(Event, {\n        event: EVENT_NAME.ROOM_INFORMATIOM_CHANGED,\n        handler: this.handler.bind(this)\n      }), __jsx(Event, {\n        event: EVENT_NAME.USER_LEFT_ROOM,\n        handler: this.userLeftRoomHandle.bind(this)\n      }), __jsx(Row, null, __jsx(Col, {\n        xs: 24,\n        sm: 24,\n        md: 12\n      }, __jsx(UpdateSatusForm, {\n        status: performer.streamingTitle,\n        updating: updating,\n        submit: this.handleUpdateStatusForm.bind(this)\n      }), initialized && publish_started && __jsx(Button, {\n        type: \"text\",\n        style: {\n          background: 'black',\n          color: 'white'\n        },\n        onClick: this.stop.bind(this),\n        block: true,\n        className: \"mb-10\"\n      }, \"Stop Publishing\"), (!initialized || !publish_started) && __jsx(Button, {\n        type: \"primary\",\n        onClick: this.start.bind(this),\n        loading: loading,\n        block: true,\n        className: \"mb-10\"\n      }, \"Start Publishing\"), __jsx(LivePublisher, {\n        ref: function ref(_ref3) {\n          _this2.publisherRef = _ref3;\n        },\n        onChange: this.callback.bind(this),\n        configs: {\n          debug: true,\n          bandwidth: 900,\n          localVideoId: 'publisher'\n        }\n      })), __jsx(Col, {\n        xs: 24,\n        sm: 24,\n        md: 12\n      }, __jsx(ChatBox, _extends({}, this.props, {\n        members: members,\n        totalParticipant: total,\n        currentPerformer: performer\n      })), (activeConversation === null || activeConversation === void 0 ? void 0 : activeConversation.data) && __jsx(\"div\", {\n        style: {\n          margin: '10px'\n        }\n      }, __jsx(Button, {\n        type: \"primary\",\n        onClick: this.removeAllMessage.bind(this)\n      }, \"Clear message history\")))));\n    }\n  }]);\n\n  return PerformerLivePage;\n}(PureComponent);\n\n_defineProperty(PerformerLivePage, \"authenticate\", true);\n\nPerformerLivePage.contextType = SocketContext;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    performer: state.performer.current,\n    updating: state.performer.updating,\n    updateSuccess: state.performer.updateSuccess,\n    updateError: state.performer.updateError,\n    activeConversation: state.streamMessage.activeConversation\n  };\n};\n\nvar mapDispatchs = {\n  updateStreamingStatus: updateStreamingStatus,\n  getStreamConversationSuccess: getStreamConversationSuccess,\n  loadStreamMessages: loadStreamMessages,\n  resetStreamMessage: resetStreamMessage,\n  resetAllStreamMessage: resetAllStreamMessage\n};\nexport default connect(mapStateToProps, mapDispatchs)(PerformerLivePage);","map":null,"metadata":{},"sourceType":"module"}