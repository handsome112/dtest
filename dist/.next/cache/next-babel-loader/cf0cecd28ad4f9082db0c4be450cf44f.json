{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-nested-ternary */\nimport { Row, Col, message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport Loader from 'src/components/common/base/loader';\nimport TokenCard from 'src/components/common/base/token-card';\nimport React, { PureComponent } from 'react';\nimport './index.less';\nimport { getResponseError } from 'src/lib/utils';\nimport { tokenPackageService } from '@services/token-package.service';\nimport { buyTokenSuccess } from 'src/redux/user/actions';\nimport { connect } from 'react-redux';\nimport { isUrl } from '@lib/string';\n\nclass UserTokensPage extends PureComponent {\n  static getInitialProps({\n    ctx\n  }) {\n    const {\n      query\n    } = ctx;\n    return {\n      action: query.action\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tokens: [],\n      fetching: false,\n      buying: null\n    };\n  }\n\n  componentDidMount() {\n    this.getTokens();\n  }\n\n  async getTokens() {\n    try {\n      this.setState({\n        fetching: true\n      });\n      const resp = await tokenPackageService.search({\n        sortBy: 'ordering',\n        sort: 'asc'\n      });\n      this.setState({\n        tokens: resp.data.data || []\n      });\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    } finally {\n      this.setState({\n        fetching: false\n      });\n    }\n  }\n\n  async buyToken(tokenPackage) {\n    try {\n      this.setState({\n        buying: tokenPackage._id\n      });\n      const resp = await tokenPackageService.buyTokens(tokenPackage._id);\n\n      if (resp.data) {\n        if (isUrl(resp.data.paymentUrl)) {\n          window.open(resp.data.paymentUrl);\n        } // message.success('Buy token success');\n        // this.props.buyTokenSuccess(tokenPackage.tokens);\n\n      }\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    } finally {\n      this.setState({\n        buying: null\n      });\n    }\n  }\n\n  render() {\n    const {\n      fetching,\n      tokens,\n      buying\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Funds - Tokens\")), __jsx(\"div\", {\n      className: \"funds-tokens-box\"\n    }, __jsx(PageHeader, {\n      title: \"Buy More Tokens\"\n    }), __jsx(\"div\", {\n      className: \"tokens-section\"\n    }, __jsx(\"div\", {\n      className: \"tokens-card\"\n    }, __jsx(Row, null, fetching ? __jsx(Loader, null) : tokens && tokens.length ? tokens.map(item => __jsx(Col, {\n      xs: 12,\n      md: 8,\n      xl: 6,\n      xxl: 4,\n      key: item._id\n    }, __jsx(TokenCard, {\n      name: item.name,\n      token: item.tokens,\n      price: item.price,\n      onBuyToken: () => this.buyToken(item),\n      buying: item._id === buying\n    }))) : 'There is no data')))));\n  }\n\n}\n\n_defineProperty(UserTokensPage, \"authenticate\", true);\n\n_defineProperty(UserTokensPage, \"layout\", 'primary');\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatch = {\n  buyTokenSuccess\n};\nexport default connect(mapStateToProps, mapDispatch)(UserTokensPage);","map":null,"metadata":{},"sourceType":"module"}