{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { logout } from '@redux/auth/actions';\nimport { getPerformerCategoriesFail, getPerformerCategoriesSuccess, setPerformerSearching, searchPerformerSuccess, searchPerformerFail, updatePerformerProfile, updatePerformerProfileFail, updatePerformerProfileSuccess, setupdatingPerformerProfile, updateCurrentPerformer, getPerformerDetailsSuccess, getPerformerDetailsFail, setGettingPerformerDetails, setPerformerDetails, setFavoritePerformerDetails, getMyProductsSuccess, getMyProductsFail, setGettingMyProducts, addMyProduct, removeMyProduct, getMyVideosSuccess, getMyVideosFail, setgettingMyVideos, removeMyVideo, addMyVideos, getMyPhotosSuccess, getMyPhotosFail, addMyPhotos, removeMyPhoto, setgettingMyPhotos, getMyGalleriesSuccess, getMyGalleriesFail, addMyGalleries, setgettingMyGalleries, updatePerformerFavourite, removeMyGalleries, getPayoutRequestSuccess, getEarningFail, getEarningSuccess, setGettingEarning, getPayoutRequestFail, setGettingPayoutRequest, updatePerformerAsset } from './actions';\nexport const initialState = {\n  current: {\n    _id: null,\n    avatar: '/no-avatar.png',\n    name: '',\n    steamingStatus: '',\n    email: ''\n  },\n  earning: {\n    data: [],\n    stats: null,\n    total: 0,\n    searching: false,\n    success: false,\n    error: null,\n    fromDate: null,\n    toDate: null\n  },\n  payout: {\n    data: [],\n    total: 0,\n    searching: false,\n    success: false,\n    error: null\n  },\n  assets: {\n    products: {\n      data: [],\n      total: 0,\n      searching: false,\n      success: false\n    },\n    videos: {\n      data: [],\n      total: 0,\n      searching: false,\n      success: false\n    },\n    photos: {\n      data: [],\n      total: 0,\n      searching: false,\n      success: false\n    },\n    galleries: {\n      data: [],\n      total: 0,\n      searching: false,\n      success: false\n    }\n  },\n  categories: {\n    data: [],\n    total: 0\n  },\n  performers: {\n    data: [],\n    total: 0,\n    success: false,\n    searching: false,\n    error: null\n  },\n  performerDetails: {\n    data: {\n      _id: null,\n      avatar: '/no-avatar.png',\n      name: '',\n      email: '',\n      products: [],\n      videos: [],\n      photos: [],\n      galleries: [],\n      relatedPerformer: [],\n      tags: [],\n      categoryIds: [],\n      categories: [],\n      languages: []\n    },\n    products: {},\n    videos: {},\n    photos: {},\n    galleries: {},\n    success: false,\n    searching: false,\n    error: null\n  },\n  getCagetoriesError: null,\n  updateSuccess: false,\n  updating: false,\n  updateError: null\n};\nconst performerReducers = [{\n  on: getPerformerCategoriesSuccess,\n\n  reducer(state, actions) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      categories: _objectSpread({}, actions.payload),\n      getCagetoriesError: null\n    });\n  }\n\n}, {\n  on: getPerformerCategoriesFail,\n\n  reducer(state, actions) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      getCagetoriesError: actions.payload\n    });\n  }\n\n}, {\n  on: searchPerformerSuccess,\n\n  reducer(state, actions) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performers: {\n        success: true,\n        searching: false,\n        error: null,\n        data: actions.payload.data,\n        total: actions.payload.total\n      }\n    });\n  }\n\n}, {\n  on: searchPerformerFail,\n\n  reducer(state, actions) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performers: {\n        success: false,\n        error: actions.payload,\n        searching: false,\n        data: []\n      }\n    });\n  }\n\n}, {\n  on: setPerformerSearching,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performers: _objectSpread(_objectSpread({}, state.performers), {}, {\n        searching: true\n      })\n    });\n  }\n\n}, {\n  on: updatePerformerProfile,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updating: true\n    });\n  }\n\n}, {\n  on: updatePerformerProfileSuccess,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload,\n      updateSuccess: true,\n      updating: false,\n      updateError: null\n    });\n  }\n\n}, {\n  on: updatePerformerProfileFail,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateSuccess: false,\n      updating: false,\n      updateError: data.payload\n    });\n  }\n\n}, {\n  on: setupdatingPerformerProfile,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updating: true,\n      updateSuccess: false\n    });\n  }\n\n}, {\n  on: setPerformerDetails,\n\n  reducer(state, action) {\n    const {\n      performerDetails\n    } = state;\n    performerDetails.data = _objectSpread(_objectSpread({}, performerDetails.data), action.payload);\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: setFavoritePerformerDetails,\n\n  reducer(state, action) {\n    const {\n      performerDetails\n    } = state;\n    const {\n      data\n    } = performerDetails;\n    data.isFavorite = action.payload;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performerDetails: _objectSpread({}, performerDetails)\n    });\n  }\n\n}, {\n  on: getPerformerDetailsSuccess,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performerDetails: {\n        data: data.payload.performer,\n        products: data.payload.products,\n        videos: data.payload.videos,\n        photos: data.payload.photos,\n        galleries: data.payload.galleries,\n        searching: false,\n        success: true,\n        error: null\n      }\n    });\n  }\n\n}, {\n  on: getPerformerDetailsFail,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performerDetails: {\n        error: data.payload,\n        success: false,\n        searching: false\n      }\n    });\n  }\n\n}, {\n  on: setGettingPerformerDetails,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performerDetails: _objectSpread(_objectSpread({}, state.performerDetails), {}, {\n        success: false,\n        searching: true\n      })\n    });\n  }\n\n}, {\n  on: getMyProductsSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      assets: _objectSpread(_objectSpread({}, state.assets), {}, {\n        products: {\n          data: action.payload.data,\n          total: action.payload.total,\n          searching: false,\n          success: true,\n          error: null\n        }\n      })\n    });\n  }\n\n}, {\n  on: getMyProductsFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      assets: _objectSpread(_objectSpread({}, state.assets), {}, {\n        products: _objectSpread(_objectSpread({}, state.assets.products), {}, {\n          searching: false,\n          success: false,\n          error: action.payload\n        })\n      })\n    });\n  }\n\n}, {\n  on: setGettingMyProducts,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      assets: _objectSpread(_objectSpread({}, state.assets), {}, {\n        products: _objectSpread(_objectSpread({}, state.assets.products), {}, {\n          searching: true,\n          success: false\n        })\n      })\n    });\n  }\n\n}, {\n  on: getEarningSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      earning: {\n        data: action.payload.data.data,\n        total: action.payload.data.total,\n        fromDate: action.payload.fromDate,\n        toDate: action.payload.toDate,\n        stats: action.payload.stats,\n        searching: false,\n        success: true,\n        error: null\n      }\n    });\n  }\n\n}, {\n  on: getEarningFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      earning: _objectSpread(_objectSpread({}, state.earning), {}, {\n        searching: false,\n        success: false,\n        error: action.payload\n      })\n    });\n  }\n\n}, {\n  on: setGettingEarning,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      earning: _objectSpread(_objectSpread({}, state.earning), {}, {\n        searching: true,\n        success: false\n      })\n    });\n  }\n\n}, {\n  on: addMyProduct,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      assets: _objectSpread(_objectSpread({}, state.assets), {}, {\n        products: _objectSpread(_objectSpread({}, state.assets.products), {}, {\n          data: [...state.assets.products.data, action.payload],\n          total: state.assets.products.total + 1\n        })\n      })\n    });\n  }\n\n}, {\n  on: removeMyProduct,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      assets: _objectSpread(_objectSpread({}, state.assets), {}, {\n        products: _objectSpread(_objectSpread({}, state.assets.products), {}, {\n          data: state.assets.products.data.filter(product => product._id !== action.payload),\n          total: state.assets.products.total - 1\n        })\n      })\n    });\n  }\n\n}, {\n  on: getMyVideosSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      assets: _objectSpread(_objectSpread({}, state.assets), {}, {\n        videos: {\n          data: action.payload.data,\n          total: action.payload.total,\n          searching: false,\n          success: true,\n          error: null\n        }\n      })\n    });\n  }\n\n}, {\n  on: getMyVideosFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      assets: _objectSpread(_objectSpread({}, state.assets), {}, {\n        videos: _objectSpread(_objectSpread({}, state.assets.videos), {}, {\n          searching: false,\n          success: false,\n          error: action.payload\n        })\n      })\n    });\n  }\n\n}, {\n  on: setgettingMyVideos,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      assets: _objectSpread(_objectSpread({}, state.assets), {}, {\n        videos: _objectSpread(_objectSpread({}, state.assets.videos), {}, {\n          searching: true,\n          success: false\n        })\n      })\n    });\n  }\n\n}, {\n  on: removeMyVideo,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      assets: _objectSpread(_objectSpread({}, state.assets), {}, {\n        videos: _objectSpread(_objectSpread({}, state.assets.videos), {}, {\n          data: state.assets.videos.data.filter(video => video._id !== action.payload),\n          total: state.assets.videos.total - 1\n        })\n      })\n    });\n  }\n\n}, {\n  on: addMyVideos,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      assets: _objectSpread(_objectSpread({}, state.assets), {}, {\n        videos: _objectSpread(_objectSpread({}, state.assets.videos), {}, {\n          data: [...state.assets.videos.data, ...action.payload]\n        })\n      })\n    });\n  }\n\n}, {\n  on: getMyPhotosSuccess,\n\n  reducer(state, action) {\n    const {\n      assets\n    } = state;\n    assets.photos = {\n      data: action.payload.data,\n      total: action.payload.total,\n      searching: false,\n      success: true,\n      error: null\n    };\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: getMyPhotosFail,\n\n  reducer(state, action) {\n    const {\n      assets\n    } = state;\n    assets.photos = _objectSpread(_objectSpread({}, state.assets.photos), {}, {\n      searching: false,\n      success: false,\n      error: action.payload\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: setgettingMyPhotos,\n\n  reducer(state) {\n    const {\n      assets\n    } = state;\n    assets.photos = _objectSpread(_objectSpread({}, state.assets.photos), {}, {\n      searching: true,\n      success: false\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: removeMyPhoto,\n\n  reducer(state, action) {\n    const {\n      assets\n    } = state;\n    assets.photos = _objectSpread(_objectSpread({}, state.assets.photos), {}, {\n      data: state.assets.photos.data.filter(p => p._id !== action.payload),\n      total: state.assets.photos.total - 1\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: addMyPhotos,\n\n  reducer(state, action) {\n    const {\n      assets\n    } = state;\n    assets.photos = _objectSpread(_objectSpread({}, state.assets.photos), {}, {\n      data: [...state.assets.photos.data, ...action.payload]\n    });\n    return _objectSpread({}, state);\n  }\n\n}, // galleries\n{\n  on: setgettingMyGalleries,\n\n  reducer(state) {\n    const {\n      assets\n    } = state;\n    assets.galleries = _objectSpread(_objectSpread({}, state.assets.galleries), {}, {\n      searching: true,\n      success: false\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: getMyGalleriesSuccess,\n\n  reducer(state, action) {\n    const {\n      assets\n    } = state;\n    assets.galleries = {\n      data: action.payload.data,\n      total: action.payload.total,\n      searching: false,\n      success: true,\n      error: null\n    };\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: getMyGalleriesFail,\n\n  reducer(state, action) {\n    const {\n      assets\n    } = state;\n    assets.galleries = _objectSpread(_objectSpread({}, state.assets.galleries), {}, {\n      searching: false,\n      success: false,\n      error: action.payload\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: removeMyGalleries,\n\n  reducer(state, action) {\n    const {\n      assets\n    } = state;\n    assets.galleries = _objectSpread(_objectSpread({}, state.assets.galleries), {}, {\n      data: state.assets.galleries.data.filter(p => p._id !== action.payload),\n      total: state.assets.galleries.total - 1\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: addMyGalleries,\n\n  reducer(state, action) {\n    const {\n      assets\n    } = state;\n    assets.galleries = _objectSpread(_objectSpread({}, state.assets.galleries), {}, {\n      data: [...state.assets.galleries.data, ...action.payload]\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: getPayoutRequestSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      payout: {\n        data: action.payload.data,\n        total: action.payload.total,\n        searching: false,\n        success: true,\n        error: null\n      }\n    });\n  }\n\n}, {\n  on: getPayoutRequestFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      payout: _objectSpread(_objectSpread({}, state.payout), {}, {\n        searching: false,\n        success: false,\n        error: action.payload\n      })\n    });\n  }\n\n}, {\n  on: setGettingPayoutRequest,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      payout: _objectSpread(_objectSpread({}, state.payout), {}, {\n        searching: true,\n        error: null\n      })\n    });\n  }\n\n}, //= =====================================\n{\n  on: updateCurrentPerformer,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload\n    });\n  }\n\n}, {\n  on: updatePerformerFavourite,\n\n  reducer(state, action) {\n    const {\n      data\n    } = state.performers;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performers: _objectSpread(_objectSpread({}, state.performers), {}, {\n        data: data.map(d => {\n          if (d._id === action.payload) {\n            return _objectSpread(_objectSpread({}, d), {}, {\n              isFavorite: !d.isFavorite\n            });\n          }\n\n          return d;\n        })\n      })\n    });\n  }\n\n}, {\n  on: updatePerformerAsset,\n\n  reducer(state, action) {\n    const {\n      type,\n      id,\n      payload\n    } = action.payload;\n    const {\n      performerDetails\n    } = state;\n\n    if (type === 'gallery') {\n      const {\n        galleries\n      } = performerDetails;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        performerDetails: _objectSpread(_objectSpread({}, performerDetails), {}, {\n          galleries: _objectSpread(_objectSpread({}, galleries), {}, {\n            [id]: _objectSpread(_objectSpread({}, galleries[id]), payload)\n          })\n        })\n      });\n    }\n\n    if (type === 'product') {\n      const {\n        products\n      } = performerDetails;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        performerDetails: _objectSpread(_objectSpread({}, performerDetails), {}, {\n          products: _objectSpread(_objectSpread({}, products), {}, {\n            [id]: _objectSpread(_objectSpread({}, products[id]), payload)\n          })\n        })\n      });\n    }\n\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: logout,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, initialState), {}, {\n      performers: state.performers,\n      categories: state.categories\n    });\n  }\n\n}];\nexport default merge({}, createReducers('performer', [performerReducers], initialState));","map":null,"metadata":{},"sourceType":"module"}