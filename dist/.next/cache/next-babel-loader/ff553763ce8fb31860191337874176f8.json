{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/* eslint-disable no-console */\nimport { flatten } from 'lodash';\nimport { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { messageService } from '@services/message.service';\nimport { message } from 'antd';\nimport { getStreamConversation, getStreamConversationSuccess, fetchingStreamMessage, loadMoreStreamMessages, loadMoreStreamMessagesSuccess, loadStreamMessages, loadStreamMessagesSuccess, sendStreamMessage, sendStreamMessageSuccess, deleteMessage, deleteMessageSuccess } from './actions';\nvar streamMessageSagas = [{\n  on: getStreamConversation,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var conversation, type, resp;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            conversation = data.payload.conversation;\n            type = conversation.type;\n\n            if (!(type === 'stream_public')) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 6;\n            return messageService.findPublicConversationPerformer(conversation.performerId);\n\n          case 6:\n            _context.t0 = _context.sent;\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return messageService.getConversationByStreamId(conversation.streamId);\n\n          case 11:\n            _context.t0 = _context.sent;\n\n          case 12:\n            resp = _context.t0;\n\n            if (!(resp && resp.data)) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 16;\n            return put(getStreamConversationSuccess({\n              data: resp.data\n            }));\n\n          case 16:\n            _context.next = 18;\n            return put(loadStreamMessages({\n              conversationId: resp.data._id,\n              limit: 25,\n              offset: 0,\n              type: type\n            }));\n\n          case 18:\n            _context.next = 23;\n            break;\n\n          case 20:\n            _context.prev = 20;\n            _context.t1 = _context[\"catch\"](0);\n            // load error\n            console.log('err-get-conversation', _context.t1);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 20]]);\n  })\n}, {\n  on: loadStreamMessages,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var _data$payload, conversationId, offset, limit, type, resp;\n\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _data$payload = data.payload, conversationId = _data$payload.conversationId, offset = _data$payload.offset, limit = _data$payload.limit, type = _data$payload.type;\n            _context2.next = 4;\n            return put(fetchingStreamMessage({\n              conversationId: conversationId\n            }));\n\n          case 4:\n            if (!(type === 'stream_public')) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 7;\n            return messageService.getPublicMessages(conversationId, {\n              sort: 'desc',\n              offset: offset,\n              limit: limit\n            });\n\n          case 7:\n            _context2.t0 = _context2.sent;\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.next = 12;\n            return messageService.getMessages(conversationId, {\n              sort: 'desc',\n              offset: offset,\n              limit: limit\n            });\n\n          case 12:\n            _context2.t0 = _context2.sent;\n\n          case 13:\n            resp = _context2.t0;\n            _context2.next = 16;\n            return put(loadStreamMessagesSuccess({\n              conversationId: conversationId,\n              items: resp.data.data,\n              total: resp.data.total\n            }));\n\n          case 16:\n            _context2.next = 21;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t1 = _context2[\"catch\"](0);\n            // load error\n            console.log('err', _context2.t1);\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 18]]);\n  })\n}, {\n  on: loadMoreStreamMessages,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var messageMap, _data$payload2, conversationId, offset, limit, type, resp;\n\n    return _regeneratorRuntime.wrap(function worker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            messageMap = select(function (state) {\n              return state.streamMessage.messages;\n            });\n            _data$payload2 = data.payload, conversationId = _data$payload2.conversationId, offset = _data$payload2.offset, limit = _data$payload2.limit, type = _data$payload2.type;\n\n            if (!(messageMap && messageMap.fetching)) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 5:\n            _context3.next = 7;\n            return put(fetchingStreamMessage({\n              conversationId: conversationId\n            }));\n\n          case 7:\n            if (!(type === 'stream_public')) {\n              _context3.next = 13;\n              break;\n            }\n\n            _context3.next = 10;\n            return messageService.getPublicMessages(conversationId, {\n              sort: 'desc',\n              offset: offset,\n              limit: limit\n            });\n\n          case 10:\n            _context3.t0 = _context3.sent;\n            _context3.next = 16;\n            break;\n\n          case 13:\n            _context3.next = 15;\n            return messageService.getMessages(conversationId, {\n              sort: 'desc',\n              offset: offset,\n              limit: limit\n            });\n\n          case 15:\n            _context3.t0 = _context3.sent;\n\n          case 16:\n            resp = _context3.t0;\n            _context3.next = 19;\n            return put(loadMoreStreamMessagesSuccess({\n              conversationId: conversationId,\n              items: resp.data.data,\n              total: resp.data.total\n            }));\n\n          case 19:\n            _context3.next = 25;\n            break;\n\n          case 21:\n            _context3.prev = 21;\n            _context3.t1 = _context3[\"catch\"](0);\n            // load error\n            message.error('Error occured, please try again later');\n            console.log('err', _context3.t1);\n\n          case 25:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, worker, null, [[0, 21]]);\n  })\n}, {\n  on: sendStreamMessage,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(req) {\n    var _req$payload, conversationId, data, type, resp;\n\n    return _regeneratorRuntime.wrap(function worker$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _req$payload = req.payload, conversationId = _req$payload.conversationId, data = _req$payload.data, type = _req$payload.type;\n\n            if (!(type === 'stream_public')) {\n              _context4.next = 8;\n              break;\n            }\n\n            _context4.next = 5;\n            return messageService.sendPublicStreamMessage(conversationId, data);\n\n          case 5:\n            _context4.t0 = _context4.sent;\n            _context4.next = 11;\n            break;\n\n          case 8:\n            _context4.next = 10;\n            return messageService.sendStreamMessage(conversationId, data);\n\n          case 10:\n            _context4.t0 = _context4.sent;\n\n          case 11:\n            resp = _context4.t0;\n            _context4.next = 14;\n            return put(sendStreamMessageSuccess(resp.data));\n\n          case 14:\n            _context4.next = 20;\n            break;\n\n          case 16:\n            _context4.prev = 16;\n            _context4.t1 = _context4[\"catch\"](0);\n            _context4.next = 20;\n            return put(sendStreamMessageSuccess(_context4.t1));\n\n          case 20:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, worker, null, [[0, 16]]);\n  })\n}, {\n  on: deleteMessage,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(req) {\n    var messageId, resp;\n    return _regeneratorRuntime.wrap(function worker$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            messageId = req.payload.messageId;\n            _context5.next = 4;\n            return messageService.deleteMessage(messageId);\n\n          case 4:\n            resp = _context5.sent;\n            _context5.next = 7;\n            return put(deleteMessageSuccess(resp.data));\n\n          case 7:\n            _context5.next = 13;\n            break;\n\n          case 9:\n            _context5.prev = 9;\n            _context5.t0 = _context5[\"catch\"](0);\n            _context5.next = 13;\n            return put(deleteMessageSuccess(_context5.t0));\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, worker, null, [[0, 9]]);\n  })\n}];\nexport default flatten([createSagas(streamMessageSagas)]);","map":null,"metadata":{},"sourceType":"module"}