{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/performer/settings/default-price-form.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Form, Button, InputNumber } from 'antd';\nimport FormInputItem from '@components/common/base/input-item-list';\nimport { formItemLayout, tailFormItemLayout } from 'src/lib';\nconst leftFormItem = [{\n  name: 'privateCallPrice',\n  rules: [{\n    validator: (_, value) => new Promise((resolve, reject) => {\n      if (parseInt(value, 10) > 0) return resolve(null);\n      return reject(new Error('The price must be greater than 0!'));\n    })\n  }],\n  label: 'Private call tokens/minute',\n  children: __jsx(InputNumber, {\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 15\n    }\n  })\n}, {\n  name: 'groupCallPrice',\n  rules: [{\n    validator: (_, value) => new Promise((resolve, reject) => {\n      if (parseInt(value, 10) > 0) return resolve(null);\n      return reject(new Error('The price must be greater than 0!'));\n    })\n  }],\n  label: 'Group call tokens/minute',\n  children: __jsx(InputNumber, {\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 15\n    }\n  })\n}];\nconst initFormValue = {\n  privateCallPrice: 0,\n  groupCallPrice: 0\n};\nexport default (({\n  onFinish,\n  privateCallPrice,\n  groupCallPrice,\n  loading\n}) => {\n  const [form] = Form.useForm();\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: onFinish,\n    name: \"defaultPriceForm\",\n    className: \"performerEditForm\",\n    initialValues: _objectSpread(_objectSpread({}, initFormValue), {}, {\n      privateCallPrice,\n      groupCallPrice\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }), __jsx(FormInputItem, {\n    fields: leftFormItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), __jsx(Form.Item, _extends({}, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Save Change\")));\n});","map":null,"metadata":{},"sourceType":"module"}