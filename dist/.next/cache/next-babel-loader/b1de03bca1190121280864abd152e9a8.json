{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport { getResponseError } from 'src/lib';\nimport { galleryService } from 'src/services';\nimport { getPerformerGalleries, getPerformerGalleriesSuccess, getPerformerGalleriesFail, gettingPerformerGalleries } from './actions';\nvar galleriedSagas = [{\n  on: getPerformerGalleries,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, galleries, ids, data, err;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(gettingPerformerGalleries());\n\n          case 3:\n            _context.next = 5;\n            return galleryService.search(action.payload, false);\n\n          case 5:\n            resp = _context.sent;\n            galleries = resp.data.data;\n            ids = galleries.map(function (g) {\n              return g._id;\n            });\n            data = galleries.length && (galleries.length > 1 ? galleries.reduce(function (previousValue, currentValue, index) {\n              if (index === 1) {\n                var _ref;\n\n                return _ref = {}, _defineProperty(_ref, previousValue._id, previousValue), _defineProperty(_ref, currentValue._id, currentValue), _ref;\n              }\n\n              var value = _objectSpread({}, previousValue);\n\n              value[currentValue._id] = currentValue;\n              return value;\n            }) : _defineProperty({}, galleries[0]._id, galleries[0]));\n            _context.next = 11;\n            return put(getPerformerGalleriesSuccess({\n              data: data,\n              ids: ids,\n              total: resp.data.total\n            }));\n\n          case 11:\n            _context.next = 20;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 17;\n            return getResponseError(_context.t0);\n\n          case 17:\n            err = _context.sent;\n            _context.next = 20;\n            return put(getPerformerGalleriesFail(err));\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 13]]);\n  })\n}];\nexport default flatten([createSagas(galleriedSagas)]);","map":null,"metadata":{},"sourceType":"module"}