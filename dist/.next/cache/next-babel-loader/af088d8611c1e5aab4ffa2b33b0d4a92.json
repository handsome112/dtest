{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/no-array-index-key */\nimport React, { PureComponent } from 'react';\nimport { Menu } from 'antd';\nimport Link from 'next/link';\nimport Router, { withRouter } from 'next/router';\n\nclass SiderMenu extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      selectedKeys: ['dashboard'],\n      openKeys: []\n    });\n\n    _defineProperty(this, \"onOpenChange\", openKeys => {\n      const {\n        menus\n      } = this.props;\n      const rootSubmenuKeys = menus.filter(_ => !_.menuParentId).map(_ => _.id);\n      const latestOpenKey = openKeys.find(key => openKeys.indexOf(key) === -1);\n      let newOpenKeys = openKeys;\n\n      if (rootSubmenuKeys.indexOf(latestOpenKey) !== -1) {\n        newOpenKeys = latestOpenKey ? [latestOpenKey] : [];\n      }\n\n      this.setState({\n        openKeys: newOpenKeys\n      });\n    });\n\n    _defineProperty(this, \"generateMenus\", data => {\n      const {\n        totalNotReadMessage\n      } = this.props;\n      return data.map((item, index) => {\n        if (item.children) {\n          return __jsx(Menu.SubMenu, {\n            icon: item.icon,\n            key: `sub-${index}`,\n            title: __jsx(React.Fragment, null, __jsx(\"span\", null, item.name))\n          }, this.generateMenus(item.children));\n        }\n\n        return (// <h1>Be happy!</h1>\n          __jsx(Menu.Item, {\n            key: item.id,\n            icon: item.icon\n          }, __jsx(Link, {\n            href: item.route,\n            as: item.as || item.route\n          }, __jsx(\"a\", null, item.name, ' ', item.id === 'messages' && `(${totalNotReadMessage})`)))\n        );\n      });\n    });\n  }\n\n  componentDidMount() {\n    // Router.events.on('routeChangeStart', this.routerChange.bind(this));\n    const {\n      menus\n    } = this.props;\n    const selectedKeys = false ? this.getSelectedKeys(menus) : [];\n    this.setSelectedKeys(selectedKeys);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      menus,\n      router\n    } = this.props;\n\n    if (router.pathname !== prevProps.router.pathname) {\n      const selectedKeys = false ? this.getSelectedKeys(menus) : [];\n      this.setSelectedKeys(selectedKeys);\n    }\n  }\n\n  onSelect({\n    key\n  }) {\n    const {\n      menus\n    } = this.props;\n    const flatTree = this.flatten(menus);\n    const selectedKeys = flatTree.filter(m => m.id === key).map(m => m.id);\n    this.setSelectedKeys(selectedKeys);\n  }\n\n  getSelectedKeys(menus) {\n    const pathname = false ? Router.pathname : '';\n    const flatTree = this.flatten(menus);\n    return flatTree // .filter((m) => pathname.includes(m.as || m.route))\n    .filter(m => pathname === m.route || pathname === m.as).map(m => m.id);\n  }\n\n  setSelectedKeys(selectedKeys) {\n    this.setState({\n      selectedKeys\n    });\n  }\n\n  flatten(menus, flattenMenus = []) {\n    menus.forEach(m => {\n      if (m.children) {\n        this.flatten(m.children, flattenMenus);\n      }\n\n      const tmp = _objectSpread({}, m);\n\n      delete tmp.children;\n      flattenMenus.push(tmp);\n    });\n    return flattenMenus;\n  }\n\n  render() {\n    const {\n      theme,\n      menus,\n      collapsed,\n      onClick\n    } = this.props;\n    const {\n      selectedKeys,\n      openKeys\n    } = this.state;\n    const menuProps = collapsed ? {} : {\n      openKeys\n    };\n    return __jsx(Menu, _extends({\n      key: \"profile-menu\",\n      mode: \"inline\",\n      theme: theme,\n      selectedKeys: selectedKeys,\n      onOpenChange: this.onOpenChange.bind(this),\n      onSelect: this.onSelect.bind(this),\n      onClick: onClick // onClick={\n      //   isMobile\n      //     ? () => {\n      //         onCollapseChange(true);\n      //       }\n      //     : undefined\n      // }\n\n    }, menuProps), this.generateMenus(menus));\n  }\n\n}\n\nexport default withRouter(SiderMenu);","map":null,"metadata":{},"sourceType":"module"}