{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { merge, findIndex } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { getStreamConversation, getStreamConversationSuccess, fetchingStreamMessage, sendStreamMessage, sendStreamMessageSuccess, sendStreamMessageFail, receiveStreamMessageSuccess, loadMoreStreamMessagesSuccess, loadStreamMessagesSuccess, resetStreamMessage, resetAllStreamMessage, deleteMessageSuccess } from './actions';\nvar initialMessageState = {\n  activeConversation: {},\n  sendMessage: {\n    sending: false\n  },\n  receiveMessage: {},\n  conversationMap: {}\n};\nvar streamMessageReducer = [{\n  on: getStreamConversation,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: {\n        fetching: true\n      }\n    });\n  }\n}, {\n  on: getStreamConversationSuccess,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: {\n        fetching: false,\n        data: data.payload.data\n      }\n    });\n  }\n}, {\n  on: fetchingStreamMessage,\n  reducer: function reducer(state, data) {\n    var conversationMap = state.conversationMap;\n    var conversationId = data.payload.conversationId;\n    conversationMap[conversationId] = _objectSpread(_objectSpread({}, conversationMap[conversationId]), {}, {\n      fetching: true\n    });\n    return _objectSpread({}, state);\n  }\n}, {\n  on: loadStreamMessagesSuccess,\n  reducer: function reducer(state, data) {\n    var conversationMap = state.conversationMap;\n    var _data$payload = data.payload,\n        conversationId = _data$payload.conversationId,\n        items = _data$payload.items,\n        total = _data$payload.total;\n    conversationMap[conversationId] = {\n      items: _toConsumableArray(items.reverse()),\n      total: total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n}, {\n  on: loadMoreStreamMessagesSuccess,\n  reducer: function reducer(state, data) {\n    var conversationMap = state.conversationMap;\n    var _data$payload2 = data.payload,\n        conversationId = _data$payload2.conversationId,\n        items = _data$payload2.items,\n        total = _data$payload2.total;\n    conversationMap[conversationId] = {\n      items: [].concat(_toConsumableArray(items.reverse()), _toConsumableArray(conversationMap[conversationId].items || [])),\n      total: total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n}, {\n  on: sendStreamMessage,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: true,\n        success: false,\n        data: null\n      }\n    });\n  }\n}, {\n  on: sendStreamMessageSuccess,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n}, {\n  on: sendStreamMessageFail,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: false,\n        success: false,\n        error: data.payload\n      }\n    });\n  }\n}, {\n  on: receiveStreamMessageSuccess,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n\n    var conversationId = data.payload.conversationId;\n\n    if (!nextState.conversationMap[conversationId] || !nextState.conversationMap[conversationId].items) {\n      nextState.conversationMap[conversationId] = {\n        items: []\n      };\n    }\n\n    nextState.conversationMap[conversationId].items = [].concat(_toConsumableArray(nextState.conversationMap[conversationId].items), [data.payload]);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      receiveMessage: data.payload\n    });\n  }\n}, {\n  on: resetStreamMessage,\n  reducer: function reducer(state) {\n    var nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      activeConversation: {},\n      sendMessage: {\n        sending: false\n      },\n      receiveMessage: {},\n      conversationMap: {}\n    });\n  }\n}, {\n  on: resetAllStreamMessage,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n\n    var conversationId = data.payload.conversationId;\n    nextState.conversationMap[conversationId] = {\n      items: []\n    };\n    return _objectSpread({}, nextState);\n  }\n}, {\n  on: deleteMessageSuccess,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n\n    var _data$payload3 = data.payload,\n        conversationId = _data$payload3.conversationId,\n        _id = _data$payload3._id;\n    var i = findIndex(nextState.conversationMap[conversationId].items, function (item) {\n      return item && item._id === _id;\n    });\n\n    if (nextState.conversationMap[conversationId].items && nextState.conversationMap[conversationId].items[i]) {\n      nextState.conversationMap[conversationId].items[i].text = 'Message deleted';\n      nextState.conversationMap[conversationId].items[i].isDeleted = true;\n    }\n\n    return _objectSpread({}, nextState);\n  }\n}];\nexport default merge({}, createReducers('streamMessage', [streamMessageReducer], initialMessageState));","map":null,"metadata":{},"sourceType":"module"}