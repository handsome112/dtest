{"ast":null,"code":"import { omit } from 'lodash';\nimport { isUrl } from '@lib/string';\nimport cookie from 'js-cookie';\nimport { TOKEN } from 'src/services/api-request';\nimport { APIRequest } from './api-request';\nexport class PhotoService extends APIRequest {\n  search(params) {\n    return this.get(this.buildUrl('/performer/performer-assets/photos/search', params));\n  }\n\n  searchByGallery(galleryId, params, headers) {\n    return this.get(this.buildUrl(`/user/performer-assets/photos/${galleryId}/search`, params), headers);\n  }\n\n  details(id, headers) {\n    return this.get(`/performer/performer-assets/photos/${id}/view`, headers);\n  }\n\n  myPhotos(query) {\n    return this.get(this.buildUrl('/performer/performer-assets/photos/search', query));\n  }\n\n  remove(id) {\n    return this.del(`/performer/performer-assets/photos/${id}`);\n  }\n\n  create(url, data, options = {\n    onProgress() {}\n\n  }) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData(); // formData.append('file', file, file.name);\n\n      if (data.photo) {\n        const photo = data.photo.file.originFileObj;\n        formData.append('photo', photo, photo.name);\n      }\n\n      Object.keys(omit(data, ['photo'])).forEach(v => {\n        formData.append(v, data[v]);\n      });\n      req.responseType = 'json';\n      req.open('POST', isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n      const token = cookie.get(TOKEN);\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n  update(url, data, options = {\n    onProgress() {}\n\n  }) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData(); // formData.append('file', file, file.name);\n\n      if (data.photo && data.photo.file) {\n        const photo = data.photo.file.originFileObj;\n        formData.append('photo', photo, photo.name);\n      }\n\n      Object.keys(omit(data, ['photo'])).forEach(v => {\n        formData.append(v, data[v]);\n      });\n      req.responseType = 'json';\n      req.open('PUT', isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n      const token = cookie.get(TOKEN);\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n  uploadImages(file, payload, onProgress) {\n    return this.upload('/performer/performer-assets/photos/upload', [{\n      fieldname: 'photo',\n      file\n    }], {\n      onProgress,\n      customData: payload\n    });\n  }\n\n}\nexport const photoService = new PhotoService();","map":null,"metadata":{},"sourceType":"module"}