{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-console */\nimport React, { PureComponent } from 'react';\nimport Header from 'next/head';\nimport { Row, Col, message, Button } from 'antd';\nimport Router from 'next/router';\nimport { streamService } from 'src/services';\nimport { connect } from 'react-redux';\nimport { SocketContext, Event } from 'src/socket';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport { getStreamConversationSuccess, resetStreamMessage } from '@redux/stream-chat/actions';\nimport GroupPublisher from 'src/components/streaming/webrtc/groupchat/publisher';\nimport GroupSubscriber from 'src/components/streaming/webrtc/groupchat/subscriber';\nimport { getResponseError } from '@lib/utils';\nimport { Description } from '@components/streaming'; // eslint-disable-next-line no-shadow\n\nvar STREAM_EVENT;\n\n(function (STREAM_EVENT) {\n  STREAM_EVENT[\"JOINED_THE_ROOM\"] = \"JOINED_THE_ROOM\";\n  STREAM_EVENT[\"JOIN_ROOM\"] = \"JOIN_ROOM\";\n  STREAM_EVENT[\"LEAVE_ROOM\"] = \"LEAVE_ROOM\";\n  STREAM_EVENT[\"RECEIVED_PAID_TOKEN\"] = \"RECEIVED_PAID_TOKEN\";\n  STREAM_EVENT[\"STREAM_INFORMATION_CHANGED\"] = \"private-stream/streamInformationChanged\";\n})(STREAM_EVENT || (STREAM_EVENT = {}));\n\nconst STREAM_JOINED = 'private-stream/streamJoined';\nconst STREAM_LEAVED = 'private-stream/streamLeaved';\nconst JOINED_THE_ROOM = 'JOINED_THE_ROOM';\n\nclass ModelPrivateChat extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"localVideoId\", 'group-publisher');\n\n    _defineProperty(this, \"remoteVideoContainerClassname\", 'group-video-container');\n\n    _defineProperty(this, \"mainVideoRef\", void 0);\n\n    _defineProperty(this, \"publisherRef\", void 0);\n\n    _defineProperty(this, \"subscriberRef\", void 0);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"streamId\", void 0);\n\n    _defineProperty(this, \"streamList\", void 0);\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      this.leaveSession();\n    });\n\n    _defineProperty(this, \"receivedPaidTokenHandler\", ({\n      token,\n      conversationId\n    }) => {\n      var _activeConversation$d;\n\n      const {\n        activeConversation\n      } = this.props;\n      const {\n        receivedToken\n      } = this.state;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n        this.setState({\n          receivedToken: receivedToken + token\n        });\n      }\n    });\n\n    this.state = {\n      // sessionId: '',\n      processing: false,\n      roomJoined: false,\n      total: 0,\n      receivedToken: 0,\n      members: []\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('beforeunload', this.onbeforeunload);\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n    this.socket = this.context;\n    this.publisherRef = /*#__PURE__*/React.createRef();\n    this.subscriberRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidUpdate(prevProps) {\n    var _activeConversation$d2;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if (activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d2 = activeConversation.data) !== null && _activeConversation$d2 !== void 0 && _activeConversation$d2._id && activeConversation !== prevProps.activeConversation) {\n      this.initSocketEvent();\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n  }\n\n  handler({\n    total,\n    members,\n    conversationId\n  }) {\n    var _activeConversation$d3;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d3 = activeConversation.data) === null || _activeConversation$d3 === void 0 ? void 0 : _activeConversation$d3._id) === conversationId) {\n      this.setState({\n        total,\n        members\n      });\n    }\n  }\n\n  handleRemoteVideo(event) {\n    const {\n      srcObject\n    } = event.target;\n    this.mainVideoRef.current.srcObject = srcObject;\n    this.mainVideoRef.current.hidden = false;\n    this.mainVideoRef.current.play();\n  }\n\n  initSocketEvent() {\n    this.socket = this.context;\n    this.socket.on(JOINED_THE_ROOM, ({\n      streamId,\n      streamList,\n      conversationId\n    }) => {\n      const {\n        activeConversation\n      } = this.props;\n      if (conversationId !== activeConversation.data._id) return;\n      this.streamId = streamId;\n      this.streamList = streamList;\n      this.publisherRef.current && this.publisherRef.current.publish(streamId);\n\n      if (streamList.length) {\n        this.subscriberRef.current && this.subscriberRef.current.play(streamList);\n      }\n    });\n    this.socket.on(STREAM_JOINED, data => {\n      if (this.streamId !== data.streamId) {\n        this.subscriberRef.current && this.subscriberRef.current.play([data.streamId]);\n      }\n    });\n    this.socket.on(STREAM_LEAVED, data => {\n      this.streamList = this.streamList.filter(id => id !== data.streamId);\n\n      if (this.streamId !== data.streamId) {\n        this.subscriberRef.current && this.subscriberRef.current.close(data.streamId);\n      }\n    });\n  }\n\n  leaveSession() {\n    var _activeConversation$d4;\n\n    const {\n      activeConversation,\n      resetStreamMessage: dispatchResetStreamMessage\n    } = this.props;\n    dispatchResetStreamMessage();\n\n    if (this.socket && activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d4 = activeConversation.data) !== null && _activeConversation$d4 !== void 0 && _activeConversation$d4._id) {\n      this.socket.off(JOINED_THE_ROOM);\n      this.socket.off(STREAM_JOINED);\n      this.socket.off(STREAM_LEAVED);\n      this.socket.off(STREAM_EVENT.RECEIVED_PAID_TOKEN);\n      this.socket.emit(STREAM_EVENT.LEAVE_ROOM, {\n        conversationId: activeConversation.data._id\n      });\n    }\n\n    this.setState({\n      processing: false,\n      roomJoined: false,\n      total: 0,\n      receivedToken: 0,\n      members: []\n    });\n  }\n\n  async startConversation() {\n    const {\n      getStreamConversationSuccess: dispatchGetStreamConversationSuccess\n    } = this.props;\n\n    try {\n      this.setState({\n        processing: true\n      });\n      const resp = await streamService.startGroupChat();\n\n      if (resp && resp.data) {\n        const {\n          sessionId,\n          conversation\n        } = resp.data;\n        this.socket = this.context;\n        this.publisherRef.current && this.publisherRef.current.start(conversation._id, sessionId);\n        dispatchGetStreamConversationSuccess({\n          data: conversation\n        });\n        this.socket && this.socket.emit(STREAM_EVENT.JOIN_ROOM, {\n          conversationId: resp.data.conversation._id\n        });\n      }\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    } finally {\n      this.setState({\n        processing: false\n      });\n    }\n  }\n\n  roomJoinedHandler({\n    total,\n    members,\n    conversationId\n  }) {\n    var _activeConversation$d5;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d5 = activeConversation.data) === null || _activeConversation$d5 === void 0 ? void 0 : _activeConversation$d5._id) === conversationId) {\n      this.setState({\n        roomJoined: true,\n        total,\n        members\n      });\n    }\n  }\n\n  leave() {\n    this.publisherRef.current && this.publisherRef.current.stop();\n    this.subscriberRef.current && this.subscriberRef.current.stop();\n    setTimeout(() => {\n      window.location.href = '/';\n    }, 10 * 1000);\n  }\n\n  render() {\n    // const { user } = this.props;\n    const {\n      processing,\n      total,\n      members,\n      roomJoined,\n      receivedToken\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Header, null, __jsx(\"title\", null, \"Group Chat\")), __jsx(Event, {\n      event: STREAM_EVENT.STREAM_INFORMATION_CHANGED,\n      handler: this.handler.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.JOINED_THE_ROOM,\n      handler: this.roomJoinedHandler.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.RECEIVED_PAID_TOKEN,\n      handler: this.receivedPaidTokenHandler.bind(this)\n    }), __jsx(Row, null, __jsx(Col, {\n      md: 12,\n      xs: 24\n    }, !roomJoined ? __jsx(Button, {\n      type: \"primary\",\n      onClick: this.startConversation.bind(this),\n      loading: processing,\n      block: true\n    }, \"Start Conversation\") : __jsx(Button, {\n      type: \"primary\",\n      onClick: this.leave.bind(this),\n      block: true,\n      disabled: processing\n    }, \"Stop Streaming\"), __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      }\n    }, __jsx(\"video\", {\n      id: \"subscriber\",\n      ref: this.mainVideoRef,\n      hidden: true,\n      controls: true\n    })), __jsx(Row, {\n      className: this.remoteVideoContainerClassname\n    }, __jsx(GroupPublisher, _extends({}, this.props, {\n      containerClassName: this.remoteVideoContainerClassname,\n      ref: this.publisherRef,\n      configs: {\n        localVideoId: this.localVideoId\n      }\n    })), __jsx(GroupSubscriber, _extends({}, this.props, {\n      ref: this.subscriberRef,\n      containerClassName: this.remoteVideoContainerClassname,\n      configs: {\n        isPlayMode: true\n      }\n    }))), __jsx(Description, {\n      roomJoined: roomJoined,\n      receivedToken: receivedToken\n    })), __jsx(Col, {\n      xs: 24,\n      md: 12\n    }, __jsx(ChatBox, _extends({}, this.props, {\n      totalParticipant: total,\n      members: members\n    })))));\n  }\n\n}\n\n_defineProperty(ModelPrivateChat, \"authenticate\", true);\n\n_defineProperty(ModelPrivateChat, \"onlyPerformer\", true);\n\nModelPrivateChat.contextType = SocketContext;\n\nconst mapStateToProps = state => _objectSpread({\n  user: state.user.current,\n  loggedIn: state.auth.loggedIn,\n  activeConversation: state.streamMessage.activeConversation\n}, state.streaming);\n\nconst mapDispatchs = {\n  getStreamConversationSuccess,\n  resetStreamMessage\n};\nexport default connect(mapStateToProps, mapDispatchs)(ModelPrivateChat);","map":null,"metadata":{},"sourceType":"module"}