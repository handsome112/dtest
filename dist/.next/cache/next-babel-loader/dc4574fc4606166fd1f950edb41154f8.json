{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/socket/Socket.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport SocketIO from 'socket.io-client';\nimport { authService } from '@services/auth.service';\nimport { connect } from 'react-redux';\nimport { warning, debug } from './utils';\nimport { SocketContext } from './SocketContext';\n\nclass Socket extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    this.connect();\n  }\n\n  componentDidUpdate(nextProps) {\n    const {\n      loggedIn\n    } = this.props;\n\n    if (nextProps.loggedIn !== loggedIn) {\n      this.connect();\n    }\n\n    return true;\n  }\n\n  componentWillUnmount() {\n    this.socket && this.socket.close();\n  }\n\n  connect() {\n    const {\n      loggedIn\n    } = this.props;\n    const token = loggedIn && authService.getToken();\n\n    if (!false) {\n      return;\n    }\n\n    const {\n      uri = process.env.NEXT_PUBLIC_SOCKET_ENDPOINT\n    } = this.props;\n    const options = {\n      transports: ['websocket', 'polling', 'long-polling'],\n      query: token ? `token=${token}` : ''\n    };\n    this.socket && this.socket.close();\n    this.socket = SocketIO(uri, this.mergeOptions(options));\n    this.socket.status = 'initialized';\n    this.socket.on('connect', () => {\n      this.socket.status = 'connected';\n      debug('connected');\n    });\n    this.socket.on('disconnect', () => {\n      this.socket.status = 'disconnected';\n      debug('disconnect');\n    });\n    this.socket.on('error', err => {\n      this.socket.status = 'failed';\n      warning('error', err);\n    });\n    this.socket.on('reconnect', data => {\n      this.socket.status = 'connected';\n      debug('reconnect', data);\n    });\n    this.socket.on('reconnect_attempt', () => {\n      debug('reconnect_attempt');\n    });\n    this.socket.on('reconnecting', () => {\n      this.socket.status = 'reconnecting';\n      debug('reconnecting');\n    });\n    this.socket.on('reconnect_failed', error => {\n      this.socket.status = 'failed';\n      warning('reconnect_failed', error);\n    });\n  }\n\n  mergeOptions(options = {}) {\n    const defaultOptions = {\n      reconnection: true,\n      reconnectionAttempts: Infinity,\n      reconnectionDelay: 1 * 1000,\n      reconnectionDelayMax: 5 * 1000,\n      autoConnect: true,\n      transports: ['websocket', 'polling', 'long-polling'],\n      rejectUnauthorized: true\n    };\n    return _objectSpread(_objectSpread({}, defaultOptions), options);\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    return __jsx(SocketContext.Provider, {\n      value: this.socket,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, React.Children.only(children));\n  }\n\n}\n\nconst mapStates = state => ({\n  loggedIn: state.auth.loggedIn\n});\n\nexport default connect(mapStates)(Socket);","map":null,"metadata":{},"sourceType":"module"}