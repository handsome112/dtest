{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService, favouriteService, purchaseItemService } from '@services/index';\nimport { updateUser, updateUserSuccess, updateUserFail, setUpdating, getFavoritePerformers, getFavoritePerformersSuccess, getFavoritePerformersFailed, gettingFavoritePerformers, getPaymentTokenHistroy, getPaymentTokenHistroySuccess, getPaymentTokenHistroyFail, gettigPaymentTokenHistory } from './actions';\nvar userSagas = [// TODO - defind update current user or get from auth user info to reload current user data if needed\n{\n  on: updateUser,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var updated, err;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(setUpdating());\n\n          case 3:\n            _context.next = 5;\n            return userService.updateMe(data.payload);\n\n          case 5:\n            updated = _context.sent;\n            _context.next = 8;\n            return put(updateUserSuccess(updated.data));\n\n          case 8:\n            _context.next = 17;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 14;\n            return Promise.resolve(_context.t0);\n\n          case 14:\n            err = _context.sent;\n            _context.next = 17;\n            return put(updateUserFail(err));\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getFavoritePerformers,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return put(gettingFavoritePerformers());\n\n          case 3:\n            _context2.next = 5;\n            return favouriteService.search(action.payload);\n\n          case 5:\n            resp = _context2.sent;\n            _context2.next = 8;\n            return put(getFavoritePerformersSuccess(resp.data));\n\n          case 8:\n            _context2.next = 17;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            _context2.next = 14;\n            return Promise.resolve(_context2.t0);\n\n          case 14:\n            err = _context2.sent;\n            _context2.next = 17;\n            return put(getFavoritePerformersFailed(err));\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getPaymentTokenHistroy,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return put(gettigPaymentTokenHistory());\n\n          case 3:\n            _context3.next = 5;\n            return purchaseItemService.search(action.payload);\n\n          case 5:\n            resp = _context3.sent;\n            _context3.next = 8;\n            return put(getPaymentTokenHistroySuccess(resp.data));\n\n          case 8:\n            _context3.next = 17;\n            break;\n\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3[\"catch\"](0);\n            _context3.next = 14;\n            return Promise.resolve(_context3.t0);\n\n          case 14:\n            err = _context3.sent;\n            _context3.next = 17;\n            return put(getPaymentTokenHistroyFail(err));\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}];\nexport default flatten([createSagas(userSagas)]);","map":null,"metadata":{},"sourceType":"module"}