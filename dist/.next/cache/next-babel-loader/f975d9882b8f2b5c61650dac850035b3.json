{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/auth/register/user-register-form.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport { Form, Input, Button, DatePicker, Select, Alert } from 'antd';\nimport moment from 'moment';\nimport { getResponseError } from '@lib/utils';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\nimport { updateUIValue } from 'src/redux/ui/actions';\n\nconst RegisterFrom = ({\n  onFinish,\n  submiting,\n  countries,\n  error,\n  singularTextModel\n}) => {\n  const [form] = Form.useForm();\n  return __jsx(Form, {\n    layout: \"vertical\",\n    form: form,\n    onFinish: onFinish,\n    name: \"performerRegisterForm\",\n    initialValues: {\n      country: undefined\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"Member register\"), __jsx(Form.Item, {\n    name: \"dateOfBirth\",\n    rules: [{\n      required: true,\n      message: 'Please input your date of birth!'\n    }, {\n      validator: (rule, value) => {\n        if (!value) return Promise.resolve();\n        const years = moment().diff(value, 'years');\n\n        if (years >= 18) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject(new Error('Minimum of 18 years'));\n      }\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, __jsx(DatePicker, {\n    placeholder: \"Date of Birth\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"gender\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    placeholder: \"Gender\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, __jsx(Select.Option, {\n    value: \"male\",\n    key: \"male\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, \"Male\"), __jsx(Select.Option, {\n    value: \"female\",\n    key: \"female\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, \"Female\"), __jsx(Select.Option, {\n    value: \"transgender\",\n    key: \"transgender\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, \"Transgender\"))), __jsx(Form.Item, {\n    name: \"firstName\",\n    rules: [{\n      required: true,\n      message: 'Please input your first name!'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input your first name!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    placeholder: \"First Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"lastName\",\n    rules: [{\n      required: true,\n      message: 'Please input your last name!'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input your last name!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    placeholder: \"Last Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"email\",\n    rules: [{\n      required: true,\n      message: 'Please input your E-mail!'\n    }, {\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    placeholder: \"E-mail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"phone\",\n    rules: [{\n      min: 9\n    }, {\n      max: 14\n    }, {\n      pattern: new RegExp(/^[0-9\\b\\\\+ ]+$/),\n      message: 'The phone number is not in the correct format'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    placeholder: \"Phone Number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"username\",\n    rules: [{\n      required: true,\n      message: 'Username is required!'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9]*$'),\n      message: 'Dont allow special chars or space'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    placeholder: \"Username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: 'Please input your password!'\n    }, {\n      min: 6,\n      max: 14,\n      message: 'Passoword should be 6-14 characters'\n    }],\n    hasFeedback: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, __jsx(Input.Password, {\n    placeholder: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"confirm\",\n    dependencies: ['password'],\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue('password') === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject(new Error('The two passwords that you entered do not match!'));\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, __jsx(Input.Password, {\n    placeholder: \"Confirm Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"country\",\n    rules: [{\n      required: true,\n      message: 'Please input your country!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: \"Country\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, countries.length > 0 && countries.map(country => __jsx(Select.Option, {\n    value: country.name,\n    key: country.code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }, country.name)))), error && __jsx(Alert, {\n    description: getResponseError(error),\n    type: \"error\",\n    message: \"Error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: submiting,\n    disabled: submiting,\n    className: \"btn-submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, \"Register new account\")), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }, \"Are you member?\", ' ', __jsx(Link, {\n    href: \"/auth/login/user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }, \"Login\"))), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }\n  }, \"Are you\", ' ', singularTextModel || 'Performer', \"?\", ' ', __jsx(Link, {\n    href: \"/auth/register/model\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 11\n    }\n  }, \"Signup now\"))));\n};\n\nconst mapStateToProps = state => _objectSpread({}, state.ui);\n\nconst mapDispatchs = {\n  updateUIValue\n};\nexport default connect(mapStateToProps, mapDispatchs)(RegisterFrom);","map":null,"metadata":{},"sourceType":"module"}