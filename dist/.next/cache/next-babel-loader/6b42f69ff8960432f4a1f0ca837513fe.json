{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { cloneDeep } from 'lodash';\nimport * as pathToRegexp from 'path-to-regexp';\nimport moment from 'moment';\nimport { SORT } from '@services/api-request';\nimport classnames from 'classnames';\n/**\n * Convert an array to a tree-structured array.\n * @param   {array}     array     The Array need to Converted.\n * @param   {string}    id        The alias of the unique ID of the object in the array.\n * @param   {string}    parentId       The alias of the parent ID of the object in the array.\n * @param   {string}    children  The alias of children of the object in the array.\n * @return  {array}    Return a tree-structured array.\n */\n\nexport function arrayToTree(array, id = 'id', parentId = 'pid', children = 'children') {\n  const result = [];\n  const hash = {};\n  const data = cloneDeep(array);\n  data.forEach((item, index) => {\n    hash[data[index][id]] = data[index];\n  });\n  data.forEach(item => {\n    const hashParent = hash[item[parentId]];\n\n    if (hashParent) {\n      !hashParent[children] && (hashParent[children] = []);\n      hashParent[children].push(item);\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n}\n/**\n * Whether the path matches the regexp if the language prefix is ignored, https://github.com/pillarjs/path-to-regexp.\n * @param   {string|regexp|array}     regexp     Specify a string, array of strings, or a regular expression.\n * @param   {string}                  pathname   Specify the pathname to match.\n * @return  {array|null}              Return the result of the match or null.\n */\n\nexport function pathMatchRegexp(regexp, pathname) {\n  return pathToRegexp.pathToRegexp(regexp).exec(pathname);\n}\n/**\n * In an array of objects, specify an object that traverses the objects whose parent ID matches.\n * @param   {array}     array     The Array need to Converted.\n * @param   {string}    current   Specify the object that needs to be queried.\n * @param   {string}    parentId  The alias of the parent ID of the object in the array.\n * @param   {string}    id        The alias of the unique ID of the object in the array.\n * @return  {array}    Return a key array.\n */\n\nexport function queryAncestors(array, current, parentId, id = 'id') {\n  const result = [current];\n  const hashMap = new Map();\n  array.forEach(item => hashMap.set(item[id], item)); // eslint-disable-next-line no-shadow\n\n  const getPath = current => {\n    const currentParentId = hashMap.get(current[id])[parentId];\n\n    if (currentParentId) {\n      result.push(hashMap.get(currentParentId));\n      getPath(hashMap.get(currentParentId));\n    }\n  };\n\n  getPath(current);\n  return result;\n}\nexport function getResponseError(data) {\n  if (!data) {\n    return '';\n  }\n\n  if (typeof data === 'string') {\n    return data;\n  }\n\n  if (Array.isArray(data.message)) {\n    const item = data.message[0];\n\n    if (!item.constraints) {\n      return data.error || 'Bad request!';\n    }\n\n    return Object.values(item.constraints)[0];\n  } // TODO - parse for langauge or others\n\n\n  return typeof data.message === 'string' ? data.message : 'Bad request!';\n}\nexport function isMobile() {\n  if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {\n    return true;\n  }\n\n  return false;\n} // eslint-disable-next-line consistent-return\n\nexport function getUrlParameter(sParam) {\n  const sPageURL = decodeURIComponent(window.location.search.substring(1));\n  const sURLVariables = sPageURL.split('&');\n  let sParameterName;\n  let i;\n\n  for (i = 0; i < sURLVariables.length; i += 1) {\n    sParameterName = sURLVariables[i].split('=');\n\n    if (sParameterName[0] === sParam) {\n      return sParameterName[1] === undefined ? true : sParameterName[1];\n    }\n  }\n}\nexport const DAY_OF_WEEK = {\n  mon: 'Monday',\n  tue: 'Tuesday',\n  wed: 'Wednesday',\n  thu: 'Thursday',\n  fri: 'Friday',\n  sat: 'Saturday',\n  sun: 'Sunday'\n};\nexport function getDefaultSchedule() {\n  const defaultVal = {\n    start: null,\n    end: null,\n    closed: true\n  };\n  return {\n    mon: _objectSpread({}, defaultVal),\n    tue: _objectSpread({}, defaultVal),\n    wed: _objectSpread({}, defaultVal),\n    thu: _objectSpread({}, defaultVal),\n    fri: _objectSpread({}, defaultVal),\n    sat: _objectSpread({}, defaultVal),\n    sun: _objectSpread({}, defaultVal)\n  };\n}\nexport function getNextShow(schedule) {\n  let weekDay = parseInt(moment().format('e'), 10);\n  let i = 0;\n  let nextShow;\n  const performerShows = Object.keys(schedule).filter(key => !schedule[key].closed);\n\n  do {\n    const date = moment().day(weekDay).format('ddd').toLowerCase();\n\n    if (performerShows.indexOf(date) > -1) {\n      nextShow = date;\n    }\n\n    weekDay += 1;\n    i += 1;\n  } while (i < 7 && !nextShow);\n\n  if (nextShow) {\n    return `${schedule[nextShow].start} ${moment().day(weekDay - 1).format('DD/MM/YYYY')}`;\n  }\n\n  return '';\n}\nexport function getSearchData(pagination, filters, sorter, state) {\n  let {\n    sort,\n    sortBy,\n    filter\n  } = state;\n  const {\n    limit\n  } = state;\n\n  if (filters) {\n    Object.keys(filters).forEach(key => {\n      if (filters[key] && filters[key].length) {\n        // eslint-disable-next-line prefer-destructuring\n        filter[key] = filters[key][0];\n      }\n\n      if (!filters[key]) {\n        filter[key] = '';\n      }\n    });\n  } else {\n    filter = {};\n  }\n\n  if (sorter) {\n    if (sorter.order) {\n      const {\n        field,\n        order\n      } = sorter;\n      sort = SORT[order];\n      sortBy = field;\n    } else {\n      sortBy = 'createdAt';\n      sort = 'desc';\n    }\n  }\n\n  return _objectSpread(_objectSpread(_objectSpread({}, state), filter), {}, {\n    sort,\n    sortBy,\n    offset: (pagination.current - 1) * limit\n  });\n}\nexport function getBase64(originFileObj, status = 'uploading', file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    if (originFileObj) {\n      reader.readAsDataURL(originFileObj);\n\n      reader.onload = () => resolve(_objectSpread(_objectSpread({}, originFileObj), {}, {\n        status,\n        name: originFileObj.name,\n        url: reader.result,\n        originFileObj\n      }));\n\n      reader.onerror = error => reject(error);\n    } else {\n      resolve(file);\n    }\n  });\n}\nexport function convertConnectionData(data) {\n  const arr = data.split('%/%');\n  const serverData = arr[1] && JSON.parse(arr[1]);\n  const clientData = arr[0] && JSON.parse(arr[0]);\n  return {\n    serverData,\n    clientData\n  };\n}\nexport function checkUserLogin(isLoggedIn, user) {\n  if (!isLoggedIn) return false;\n  if (!user && !user._id) return false;\n  return true;\n}\nexport function getCurrentUser(user, performer) {\n  if (user && user._id) return user;\n  if (performer && performer._id) return performer;\n  return null;\n}\nexport function isPhysicalProduct(item) {\n  if (item && item.type === 'physical') return true;\n  return false;\n}\nexport function chatBoxMessageClassName(req) {\n  const {\n    isMine,\n    startsSequence,\n    endsSequence,\n    data: {\n      type\n    }\n  } = req;\n  return classnames('message', {\n    mine: isMine && type !== 'tip'\n  }, {\n    tip: type === 'tip'\n  }, {\n    start: !!startsSequence\n  }, {\n    end: !!endsSequence\n  });\n}\n\nfunction convertFeetToCm(feet, inch) {\n  const [f] = feet.split('.');\n  const [i] = inch.split('.');\n  return (parseInt(f, 10) * 12 + parseInt(i, 10)) * 2.54;\n}\n\nexport function formatDataWeight(min = 99, max = 319) {\n  let i = min;\n  const result = [];\n\n  do {\n    result[i] = (i * 0.45).toFixed(2);\n    i += 1;\n  } while (i < max);\n\n  return result.map((v, index) => ({\n    label: `${index}  lbs (${v}kg)`,\n    value: `${index} lbs`\n  }));\n}\nexport function formatDataHeight(min = 4, max = 7) {\n  const result = [];\n\n  for (let feet = min; feet < max; feet += 1) {\n    for (let inch = 0; inch <= 11; inch += 1) {\n      const a = convertFeetToCm(feet.toFixed(1).toString(), inch.toFixed(1).toString());\n      result.push(`${feet}'${inch}\" (${a.toFixed(2)} cm)`);\n    }\n  }\n\n  return result.map(f => ({\n    label: `${f}`,\n    value: `${f}`\n  }));\n}\nexport function formatPrice(price, fractionDigits = 2) {\n  if (price) {\n    return price.toFixed(fractionDigits);\n  }\n\n  return '';\n}","map":null,"metadata":{},"sourceType":"module"}