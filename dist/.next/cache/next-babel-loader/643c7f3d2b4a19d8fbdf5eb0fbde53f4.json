{"ast":null,"code":"import cookie from 'js-cookie';\nimport { APIRequest, TOKEN, ROLE } from './api-request';\nexport class AuthService extends APIRequest {\n  login(data) {\n    return this.post('/auth/users/login', data);\n  }\n\n  setAuthHeader(token, role) {\n    // https://github.com/js-cookie/js-cookie\n    // since Safari does not support, need a better solution\n    cookie.set(TOKEN, token, {\n      expires: 365\n    });\n    cookie.set(ROLE, role, {\n      expires: 365\n    });\n    this.setAuthHeaderToken(token);\n  }\n\n  performerLogin(data) {\n    return this.post('/auth/performers/login', data);\n  }\n\n  studioLogin(data) {\n    return this.post('/auth/studio/login', data);\n  }\n\n  setToken(token) {\n    // https://github.com/js-cookie/js-cookie\n    // since Safari does not support, need a better solution\n    cookie.set(TOKEN, token, {\n      expires: 365\n    });\n    this.setAuthHeaderToken(token);\n  }\n\n  getToken() {\n    const token = cookie.get(TOKEN);\n    return token || null;\n  }\n\n  getRole() {\n    const role = cookie.get(ROLE);\n    return role || null;\n  }\n\n  removeToken() {\n    cookie.remove(TOKEN);\n    cookie.remove(ROLE);\n  }\n\n  removeRemember() {\n    false && cookie.remove('rememberMe');\n  }\n\n  updatePassword(body) {\n    return this.put('/auth/users/me/password', body);\n  }\n\n  performersRegister(data) {\n    return this.register('/auth/performers/register', data);\n  }\n\n  userRegister(data) {\n    return this.post('/auth/users/register', data);\n  }\n\n  studioRegister(data) {\n    return this.register('/auth/studio/register', data);\n  }\n\n  forgotPassword(email, type) {\n    const data = {\n      email,\n      type\n    };\n    return this.post('/auth/users/forgot', data);\n  }\n\n  resendVerificationEmail(data) {\n    return this.post('/verification/resend-verification-email', data);\n  }\n\n}\nexport const authService = new AuthService();","map":null,"metadata":{},"sourceType":"module"}