{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/dtest.live/src/components/messages/MessageList.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport '../stream-chat/MessageList.less';\nimport { loadMoreMessages } from '@redux/message/actions';\nimport Compose from './Compose';\nimport Message from './Message';\n\nvar MessageList = /*#__PURE__*/function (_PureComponent) {\n  _inherits(MessageList, _PureComponent);\n\n  var _super = _createSuper(MessageList);\n\n  function MessageList() {\n    var _this;\n\n    _classCallCheck(this, MessageList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"messagesRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      offset: 1,\n      onloadmore: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderMessages\", function () {\n      var _this$props = _this.props,\n          message = _this$props.message,\n          currentUser = _this$props.currentUser,\n          currentPerformer = _this$props.currentPerformer;\n      var messages = message.items;\n      var i = 0;\n      var messageCount = messages.length;\n      var tempMessages = [];\n\n      while (i < messageCount) {\n        var previous = messages[i - 1];\n        var current = messages[i];\n        var next = messages[i + 1];\n        var isMine = current.senderId === (currentUser && currentUser._id || currentPerformer && currentPerformer._id);\n        var currentMoment = moment(current.createdAt);\n        var prevBySameAuthor = false;\n        var nextBySameAuthor = false;\n        var startsSequence = true;\n        var endsSequence = true;\n        var showTimestamp = true;\n\n        if (previous) {\n          var previousMoment = moment(previous.createdAt);\n          var previousDuration = moment.duration(currentMoment.diff(previousMoment));\n          prevBySameAuthor = previous.senderId === current.senderId;\n\n          if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n            startsSequence = false;\n          }\n\n          if (previousDuration.as('hours') < 1) {\n            showTimestamp = false;\n          }\n        }\n\n        if (next) {\n          var nextMoment = moment(next.createdAt);\n          var nextDuration = moment.duration(nextMoment.diff(currentMoment));\n          nextBySameAuthor = next.senderId === current.senderId;\n\n          if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n            endsSequence = false;\n          }\n        }\n\n        if (current._id) {\n          tempMessages.push(__jsx(Message, {\n            key: i,\n            isMine: isMine,\n            startsSequence: startsSequence,\n            endsSequence: endsSequence,\n            showTimestamp: showTimestamp,\n            data: current,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 11\n            }\n          }));\n        } // Proceed to the next message.\n\n\n        i += 1;\n      }\n\n      _this.scrollToBottom();\n\n      return tempMessages;\n    });\n\n    return _this;\n  }\n\n  _createClass(MessageList, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.messagesRef) this.messagesRef = /*#__PURE__*/createRef();\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(prevState) {\n        var conversation;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                conversation = this.props.conversation;\n\n                if (prevState && prevState.conversation && prevState.conversation._id !== conversation._id) {\n                  this.setOffset();\n                }\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidUpdate(_x) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: \"handleScroll\",\n    value: function () {\n      var _handleScroll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(conversation, event) {\n        var _this$props2, message, dispatchLoadMoreMessages, fetching, items, total, offset, canloadmore, ele;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props2 = this.props, message = _this$props2.message, dispatchLoadMoreMessages = _this$props2.loadMoreMessages;\n                fetching = message.fetching, items = message.items, total = message.total;\n                offset = this.state.offset;\n                canloadmore = total > items.length;\n                ele = event.target;\n\n                if (canloadmore) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 7:\n                if (!(ele.scrollTop === 0 && conversation._id && !fetching && canloadmore)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                _context3.next = 10;\n                return this.setState({\n                  offset: offset + 1,\n                  onloadmore: true\n                });\n\n              case 10:\n                dispatchLoadMoreMessages({\n                  conversationId: conversation._id,\n                  limit: 20,\n                  offset: (offset - 1) * 20\n                });\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleScroll(_x2, _x3) {\n        return _handleScroll.apply(this, arguments);\n      }\n\n      return handleScroll;\n    }()\n  }, {\n    key: \"setOffset\",\n    value: function () {\n      var _setOffset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.setState({\n                  offset: 1\n                });\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function setOffset() {\n        return _setOffset.apply(this, arguments);\n      }\n\n      return setOffset;\n    }()\n  }, {\n    key: \"scrollToBottom\",\n    value: function scrollToBottom() {\n      var onloadmore = this.state.onloadmore;\n\n      if (onloadmore) {\n        return;\n      }\n\n      if (this.messagesRef && this.messagesRef.current) {\n        var ele = this.messagesRef.current;\n        window.setTimeout(function () {\n          ele.scrollTop = ele.scrollHeight;\n        }, 300);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          conversation = _this$props3.conversation,\n          message = _this$props3.message;\n      var fetching = message.fetching;\n      if (!this.messagesRef) this.messagesRef = /*#__PURE__*/createRef();\n      return __jsx(\"div\", {\n        className: \"message-list custom\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 7\n        }\n      }, conversation && conversation._id ? __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"message-list-container\",\n        ref: this.messagesRef,\n        onScroll: this.handleScroll.bind(this, conversation),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }\n      }, fetching && __jsx(\"p\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 28\n        }\n      }, \"fetching...\"), this.renderMessages()), __jsx(Compose, {\n        conversation: conversation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }\n      })) : __jsx(\"div\", {\n        className: \"start-conversation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }\n      }, \"Click conversation to start\")));\n    }\n  }]);\n\n  return MessageList;\n}(PureComponent);\n\nvar mapStates = function mapStates(state) {\n  var conversationMap = state.message.conversationMap;\n  var activeConversation = state.conversation.activeConversation;\n  var messages = conversationMap[activeConversation._id] ? conversationMap[activeConversation._id].items || [] : [];\n  var totalMessages = conversationMap[activeConversation._id] ? conversationMap[activeConversation._id].total || 0 : 0;\n  var fetching = conversationMap[activeConversation._id] ? conversationMap[activeConversation._id].fetching || false : false;\n  return {\n    message: {\n      items: messages,\n      total: totalMessages,\n      fetching: fetching\n    },\n    conversation: activeConversation,\n    currentUser: state.user.current,\n    currentPerformer: state.performer.current\n  };\n};\n\nvar mapDispatch = {\n  loadMoreMessages: loadMoreMessages\n};\nexport default connect(mapStates, mapDispatch)(MessageList);","map":null,"metadata":{},"sourceType":"module"}