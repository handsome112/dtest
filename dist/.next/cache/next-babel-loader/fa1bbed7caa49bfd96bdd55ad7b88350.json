{"ast":null,"code":"import { isUrl } from '@lib/string';\nimport { omit } from 'lodash';\nimport cookie from 'js-cookie';\nimport { APIRequest, TOKEN } from './api-request';\nexport class PerformerService extends APIRequest {\n  me(headers) {\n    return this.get('/performers/me', headers);\n  }\n\n  updateMe(payload) {\n    return this.put('/performers', payload);\n  }\n\n  search(query) {\n    return this.get(this.buildUrl('/performers/search', query));\n  }\n\n  details(username, headers = {}) {\n    return this.get(`/performers/${username}/view`, headers);\n  }\n\n  getAvatarUploadUrl() {\n    return `${process.env.NEXT_PUBLIC_API_ENDPOINT}/performers/avatar/upload`;\n  }\n\n  getDocumentsUploadUrl() {\n    return `${process.env.NEXT_PUBLIC_API_ENDPOINT}/performers/documents/upload`;\n  }\n\n  getReleaseFormUrl() {\n    return `${process.env.NEXT_PUBLIC_API_ENDPOINT}/performers/release-form/upload`;\n  }\n\n  myProduct(query) {\n    return this.get(this.buildUrl('/performer/performer-assets/products/search', query));\n  }\n\n  createProduct(url, data, options = {\n    onProgress() {}\n\n  }) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData(); // formData.append('file', file, file.name);\n\n      if (data.image) {\n        const image = data.image.file.originFileObj;\n        formData.append('image', image, image.name);\n      }\n\n      if (data.digitalFile) {\n        const digitalFile = data.digitalFile.file.originFileObj;\n        formData.append('digitalFile', digitalFile, digitalFile.name);\n      }\n\n      Object.keys(omit(data, ['image', 'digitalFile'])).forEach(v => {\n        formData.append(v, data[v]);\n      });\n      req.responseType = 'json';\n      req.open('POST', isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n      const token = cookie.get(TOKEN);\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n  updateProduct(url, data, options = {\n    onProgress() {}\n\n  }) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData(); // formData.append('file', file, file.name);\n\n      if (data.image && data.image.file) {\n        const image = data.image.file.originFileObj;\n        formData.append('image', image, image.name);\n      }\n\n      if (data.digitalFile && data.digitalFile.file) {\n        const digitalFile = data.digitalFile.file.originFileObj;\n        formData.append('digitalFile', digitalFile, digitalFile.name);\n      }\n\n      Object.keys(omit(data, ['image', 'digitalFile'])).forEach(v => {\n        formData.append(v, data[v]);\n      });\n      req.responseType = 'json';\n      req.open('PUT', isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n      const token = cookie.get(TOKEN);\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n  removeProduct(id) {\n    return this.del(`/performer/performer-assets/products/${id}`);\n  }\n\n  getCommission() {\n    return this.get('/settings/performer/commission');\n  }\n\n  updatePaymentInfo(payload) {\n    return this.post('/performers/bank-transfer/update', payload);\n  }\n\n  updateDirectDepost(payload) {\n    return this.post('/performers/direct-deposit/update', payload);\n  }\n\n  updatePaxum(payload) {\n    return this.post('/performers/paxum/update', payload);\n  }\n\n  updateBitpay(payload) {\n    return this.post('/performers/bitpay/update', payload);\n  }\n\n  updateStreamingStatus(payload) {\n    return this.post('/performers/streaming-status/update', payload);\n  }\n\n  geoBlock(payload) {\n    return this.post('/performers/blocking/update', payload);\n  }\n\n  getBlockedList() {\n    return this.get(this.buildUrl('/performers/blocking'));\n  }\n\n  increaseView(performerId) {\n    return this.post(`/performers/${performerId}/inc-view`);\n  }\n\n  updateDefaultPrice(payload) {\n    return this.post('/performers/default-price/update', payload);\n  }\n\n  updateBroadcastSetting(payload) {\n    return this.post('/performers/broadcast-setting/update', payload);\n  }\n\n  suspendAccount(password) {\n    return this.post('/performers/suspend-account', {\n      password\n    });\n  }\n\n  checkBlock(performerId) {\n    return this.get(`/performers/${performerId}/check-blocking`);\n  }\n\n}\nexport const GENNDER_PERFORMER = ['female', 'transgender', 'male'];\nexport const performerService = new PerformerService();","map":null,"metadata":{},"sourceType":"module"}