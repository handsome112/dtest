{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/performer-category/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport { performerCategories } from 'src/services/perfomer-categories.service';\nimport { updateUIValue } from 'src/redux/ui/actions';\nimport Head from 'next/head';\nimport PerformerGrid from '@components/performer/performer-grid';\nimport { searchPerformer, updatePerformerFavourite } from '@redux/performer/actions';\nimport { favouriteService } from 'src/services';\nimport { getResponseError } from 'src/lib';\nimport { SocketContext } from 'src/socket';\nconst initQueryState = {\n  offset: 0,\n  limit: 60,\n  gender: '',\n  category: '',\n  country: '',\n  sortBy: '',\n  sort: 'desc'\n};\n\nclass PerformerCategoryPage extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    try {\n      if (false && ctx.query.category) {\n        return {\n          category: JSON.parse(ctx.query.category)\n        };\n      }\n\n      if (!ctx.query.slug) {\n        return {};\n      }\n\n      const resp = await performerCategories.details(ctx.query.slug);\n      return {\n        category: resp.data\n      };\n    } catch (err) {\n      return {};\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"search\", () => {\n      const {\n        searchPerformer: dispatchSearchPerformer,\n        category\n      } = this.props;\n      const {\n        query\n      } = this.state;\n      dispatchSearchPerformer(_objectSpread(_objectSpread({}, query), {}, {\n        category: category ? category._id : ''\n      }));\n    });\n\n    this.state = {\n      query: initQueryState\n    };\n  }\n\n  componentDidMount() {\n    this.search();\n    this.socket = this.context;\n    this.socket.on('modelUpdateStatus', this.search);\n    this.socket.on('modelUpdateStreamingStatus', this.search);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      category,\n      loggedIn\n    } = this.props;\n\n    if (category !== prevProps.category) {\n      this.search();\n    }\n\n    if (!loggedIn && loggedIn !== prevProps.loggedIn) {\n      this.search();\n    }\n  }\n\n  componentWillUnmount() {\n    this.socket = this.context;\n\n    if (this.socket) {\n      this.socket.off('modelUpdateStatus');\n      this.socket.off('modelUpdateStreamingStatus');\n    }\n  }\n\n  async onLike(performer) {\n    const {\n      _id,\n      isFavorite\n    } = performer;\n    const {\n      updatePerformerFavourite: dispatchUpdatePerformerFavourite\n    } = this.props;\n\n    try {\n      await favouriteService.favorite(_id, isFavorite);\n      dispatchUpdatePerformerFavourite(_id);\n    } catch (error) {\n      const e = await Promise.resolve(error);\n      message.error(getResponseError(e));\n    }\n  }\n\n  setFilter(name, value) {\n    const {\n      query\n    } = this.state;\n    this.setState({\n      query: _objectSpread(_objectSpread({}, query), {}, {\n        [name]: value\n      })\n    });\n  }\n\n  render() {\n    const {\n      category,\n      pluralTextModel\n    } = this.props;\n    const {\n      query\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }, category ? `Category - ${category.name}` : `All ${pluralTextModel || 'Performers'}`)), __jsx(PageHeader, {\n      title: category ? category.name : `All ${pluralTextModel || 'Performers'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, __jsx(PerformerGrid, _extends({}, this.props, query, {\n      isPage: true,\n      setFilter: this.setFilter.bind(this),\n      onLike: this.onLike.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\n_defineProperty(PerformerCategoryPage, \"authenticate\", false);\n\n_defineProperty(PerformerCategoryPage, \"layout\", 'public');\n\nPerformerCategoryPage.contextType = SocketContext;\n\nconst mapStateToProps = state => _objectSpread(_objectSpread({\n  loggedIn: state.auth.loggedIn\n}, state.performer.performers), state.ui);\n\nconst mapDispatch = {\n  searchPerformer,\n  updatePerformerFavourite,\n  updateUIValue\n};\nexport default connect(mapStateToProps, mapDispatch)(PerformerCategoryPage);","map":null,"metadata":{},"sourceType":"module"}