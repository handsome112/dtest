{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/common/layout/header.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport React, { PureComponent } from 'react';\nimport { SettingOutlined, HeartOutlined, MessageOutlined, UserOutlined, LogoutOutlined, SearchOutlined, CloseOutlined, BellOutlined } from '@ant-design/icons';\nimport { FundsIcon } from '@components/common/base/icons';\nimport { Layout, Menu, Avatar, Input, Button, Dropdown, Badge, Card, message, Tooltip } from 'antd';\nimport { messageService } from 'src/services/index';\nimport { createSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport Router, { withRouter } from 'next/router';\nimport { logout } from '@redux/auth/actions';\nimport { getPerformerCategories } from '@redux/performer/actions';\nimport { getCountries } from '@redux/settings/actions';\nimport { SocketContext } from 'src/socket';\nimport { addPrivateRequest } from '@redux/streaming/actions';\nimport { formatDate } from 'src/lib';\nimport { getStudioStats } from 'src/redux/studio/actions';\nimport { countNotReadMessage } from '@redux/message/actions';\nimport NumberFormat from '@components/common/layout/numberformat';\nimport './header.less';\nimport { SETTING_KEYS } from 'src/constants';\nimport LeftHeaderContent from './left-header-content';\n\nconst roundBalance = balance => {\n  if (balance < 10000) return Math.round(balance);\n  return '9999+';\n};\n\nconst EVENT = {\n  RECEIVED_PRIVATE_CHAT_REQUEST: 'private-chat-request',\n  NOTIFY_READ_MESSAGE: 'nofify_read_messages_in_conversation',\n  TIPPED: 'tipped'\n};\n\nclass Header extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"_audio\", void 0);\n\n    _defineProperty(this, \"handleMessage\", event => {\n      const {\n        countNotReadMessage: dispatchCountNotReadMessage\n      } = this.props;\n      event && dispatchCountNotReadMessage(event.total);\n    });\n\n    _defineProperty(this, \"handlePrivateChat\", data => {\n      const {\n        addPrivateRequest: dispatchAddPrivateRequest,\n        settings\n      } = this.props;\n      const path = settings[SETTING_KEYS.OPTION_FOR_PRIVATE] === 'webrtc' ? 'webrtc/' : '';\n      message.success({\n        content: __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 9\n          }\n        }, data.user.username, ' ', \"sent you a private chat request.\"),\n        duration: 10,\n        key: data.conversationId,\n        onClick: () => {\n          Router.push({\n            pathname: `/live/${path}privatechat`,\n            query: {\n              id: data.conversationId\n            }\n          }, `/live/${path}privatechat/${data.conversationId}`);\n          message.destroy(data.conversationId);\n        }\n      });\n      this._audio && this._audio.play();\n      dispatchAddPrivateRequest(_objectSpread(_objectSpread({}, data), {}, {\n        createdAt: new Date()\n      }));\n    });\n\n    _defineProperty(this, \"sendTipHandler\", ({\n      token,\n      senderInfo\n    }) => {\n      message.success(`${senderInfo.username} tip ${token === null || token === void 0 ? void 0 : token.toFixed(2)} tokens`, 10);\n      this._audio && this._audio.play();\n    });\n\n    _defineProperty(this, \"initSocketEvent\", () => {\n      this.socket = this.context;\n      const {\n        currentUser\n      } = this.props;\n\n      if (this.socket.connected) {\n        if (currentUser.role === 'performer') {\n          this.socket.on(EVENT.RECEIVED_PRIVATE_CHAT_REQUEST, this.handlePrivateChat);\n          this.socket.on(EVENT.TIPPED, this.sendTipHandler);\n        }\n\n        this.socket.on(EVENT.NOTIFY_READ_MESSAGE, this.handleMessage);\n      } else {\n        this.socket.on('connect', () => {\n          if (currentUser.role === 'performer') {\n            this.socket.on(EVENT.RECEIVED_PRIVATE_CHAT_REQUEST, this.handlePrivateChat);\n            this.socket.on(EVENT.TIPPED, this.sendTipHandler);\n          }\n\n          this.socket.on(EVENT.NOTIFY_READ_MESSAGE, this.handleMessage);\n        });\n      }\n    });\n\n    this.state = {\n      showSearch: false\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      getPerformerCategories: dispatchGetPerformerCategories,\n      getCountries: dispatchGetCountries,\n      getStudioStats: dispatchGetStudioStats,\n      currentUser,\n      loggedIn,\n      tipSound,\n      countNotReadMessage: dispatchCountNotReadMessage\n    } = this.props; // this.socket = this.context;\n\n    dispatchGetPerformerCategories({\n      limit: 0\n    });\n    dispatchGetCountries();\n\n    if (currentUser !== null && currentUser !== void 0 && currentUser._id) {\n      const data = await (await messageService.countTotalNotRead()).data;\n\n      if (data) {\n        dispatchCountNotReadMessage(data.total);\n      }\n    }\n\n    if (currentUser !== null && currentUser !== void 0 && currentUser._id && currentUser.role === 'studio') {\n      dispatchGetStudioStats();\n    }\n\n    if (loggedIn) {\n      this.initSocketEvent();\n      this.checkPermissionAccess();\n    }\n\n    this._audio = new Audio(tipSound);\n    this._audio.volume = 0.5;\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      loggedIn,\n      router: {\n        query: {\n          unauthorized\n        }\n      }\n    } = this.props;\n\n    if (loggedIn && prevProps.loggedIn !== loggedIn) {\n      setTimeout(this.initSocketEvent, 1000);\n    }\n\n    if (unauthorized !== prevProps.router.query.unauthorized) {\n      this.checkPermissionAccess();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.socket) {\n      this.socket.off(EVENT.NOTIFY_READ_MESSAGE);\n      this.socket.off(EVENT.RECEIVED_PRIVATE_CHAT_REQUEST);\n      this.socket.off(EVENT.TIPPED);\n    }\n  }\n\n  onSearchPerformer(key) {\n    this.search(key);\n  }\n\n  onPressEnter(event) {\n    const target = event.currentTarget;\n    const key = target.value;\n    this.search(key);\n  }\n\n  search(key) {\n    Router.push({\n      pathname: '/',\n      query: {\n        q: key\n      }\n    }, `/?q=${key}`);\n  }\n\n  async checkPermissionAccess() {\n    const {\n      loggedIn,\n      router: {\n        query: {\n          unauthorized\n        }\n      }\n    } = this.props;\n\n    if (!loggedIn || !unauthorized) {\n      return;\n    }\n\n    this.beforeLogout();\n  }\n\n  async beforeLogout() {\n    const {\n      logout: dispatchLogout\n    } = this.props;\n    dispatchLogout();\n  }\n\n  render() {\n    const {\n      ui,\n      loggedIn,\n      privateRequests,\n      currentUser,\n      totalNotReadMessage,\n      settings\n    } = this.props;\n    const {\n      showSearch\n    } = this.state;\n    const path = settings[SETTING_KEYS.OPTION_FOR_PRIVATE] === 'webrtc' ? 'webrtc/' : '';\n    const rightContent = loggedIn ? __jsx(React.Fragment, null, __jsx(Link, {\n      href: loggedIn && currentUser.role === 'user' ? '/account/user/funds-tokens' : '#',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }\n    }, __jsx(Tooltip, {\n      title: `${currentUser.balance && currentUser.balance.toFixed(2) || 0} Tokens`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      style: {\n        margin: '0px 10px',\n        color: '#ff0066'\n      },\n      className: \"btn-tokens\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 13\n      }\n    }, `${roundBalance((currentUser === null || currentUser === void 0 ? void 0 : currentUser.balance) || 0)} Tokens`))), currentUser.role === 'performer' && __jsx(Dropdown, {\n      overlay: __jsx(Menu, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 15\n        }\n      }, privateRequests.length > 0 ? privateRequests.map(request => {\n        var _request$user, _request$user2, _request$user3;\n\n        return __jsx(Menu.Item, {\n          onClick: () => message.destroy(request.conversationId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 21\n          }\n        }, __jsx(Link, {\n          href: {\n            pathname: `/live/${path}privatechat`,\n            query: {\n              id: request.conversationId,\n              streamId: request.id\n            }\n          },\n          as: `/live/${path}privatechat/${request.conversationId}?streamId=${request.id}`,\n          key: request.conversationId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 23\n          }\n        }, __jsx(\"a\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 25\n          }\n        }, __jsx(Card, {\n          bordered: false,\n          hoverable: false,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 27\n          }\n        }, __jsx(Card.Meta, {\n          avatar: __jsx(Avatar, {\n            src: ((_request$user = request.user) === null || _request$user === void 0 ? void 0 : _request$user.avatar) || '/default-user-icon.png',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 33\n            }\n          }),\n          title: __jsx(React.Fragment, null, __jsx(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 35\n            }\n          }, (_request$user2 = request.user) === null || _request$user2 === void 0 ? void 0 : _request$user2.username), ' ', \"(\", __jsx(NumberFormat, {\n            value: ((_request$user3 = request.user) === null || _request$user3 === void 0 ? void 0 : _request$user3.balance) || 0,\n            suffix: \" tokens\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 35\n            }\n          }), \")\"),\n          description: formatDate(request === null || request === void 0 ? void 0 : request.createdAt),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 29\n          }\n        })))));\n      }) : __jsx(Menu.Item, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 19\n        }\n      }, \"There are no private request.\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }\n    }, __jsx(\"span\", {\n      className: \"call-requests\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }\n    }, __jsx(Badge, {\n      count: privateRequests.length,\n      showZero: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 15\n      }\n    }, __jsx(BellOutlined, {\n      style: {\n        color: '#ffffff'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }\n    })))), __jsx(Dropdown, {\n      overlay: __jsx(Menu, {\n        key: \"menu-right-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }\n      }, currentUser.role === 'user' && [__jsx(Menu.Item, {\n        key: \"settings-menu-right-content\",\n        onClick: () => Router.push('/account/user/account-settings'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 17\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 19\n        }\n      }, __jsx(SettingOutlined, {\n        className: \"primary-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 21\n        }\n      }), ' ', \"Profile\")), __jsx(Menu.Item, {\n        key: \"favorite-menu-right-content\",\n        onClick: () => Router.push('/account/user/favorites'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 17\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 19\n        }\n      }, __jsx(HeartOutlined, {\n        className: \"primary-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 21\n        }\n      }), ' ', \"My Favorites\")), __jsx(Menu.Item, {\n        key: \"funds-tokens-menu-right-content\",\n        onClick: () => Router.push('/account/user/funds-tokens'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 17\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 19\n        }\n      }, __jsx(\"span\", {\n        className: \"anticon primary-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 21\n        }\n      }, __jsx(FundsIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 23\n        }\n      })), ' ', \"Funds / Tokens\")), __jsx(Menu.Item, {\n        key: \"user-messages-menu-right-content\",\n        onClick: () => Router.push('/messages'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 17\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 19\n        }\n      }, __jsx(MessageOutlined, {\n        className: \"primary-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 21\n        }\n      }), ' ', \"Messages (\", totalNotReadMessage || 0, \")\"))], currentUser.role === 'performer' && [__jsx(Menu.Item, {\n        key: \"profile-menu-right-content\",\n        onClick: () => Router.push('/account/performer/profile'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 17\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 19\n        }\n      }, __jsx(UserOutlined, {\n        className: \"primary-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 21\n        }\n      }), ' ', \"Profile\")), __jsx(Menu.Item, {\n        key: \"account-settings-menu-right-content\",\n        onClick: () => Router.push('/account/performer/account-settings'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 17\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 19\n        }\n      }, __jsx(SettingOutlined, {\n        className: \"primary-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 21\n        }\n      }), ' ', \"Account Settings\")), __jsx(Menu.Item, {\n        key: \"model-messages-menu-right-content\",\n        onClick: () => Router.push('/messages'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 17\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 19\n        }\n      }, __jsx(MessageOutlined, {\n        className: \"primary-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 21\n        }\n      }), ' ', \"Messages (\", totalNotReadMessage, \")\"))], currentUser.role === 'studio' && [__jsx(Menu.Item, {\n        key: \"account-settings-menu-right-content\",\n        onClick: () => Router.push('/studio/account-settings'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 17\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 19\n        }\n      }, __jsx(SettingOutlined, {\n        className: \"primary-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 21\n        }\n      }), ' ', \"Account Settings\"))], __jsx(Menu.Item, {\n        key: \"log-out\",\n        onClick: this.beforeLogout.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 15\n        }\n      }, __jsx(LogoutOutlined, {\n        className: \"primary-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 17\n        }\n      }), ' ', \"Log out\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }\n    }, __jsx(Avatar, {\n      style: {\n        margin: '0 15px',\n        cursor: 'pointer',\n        background: '#ffffff'\n      },\n      src: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.avatar) || '/default-user-icon.png',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }\n    }))) : __jsx(Button, {\n      className: \"btn-login\",\n      onClick: () => Router.push('/auth/login/user', '/auth/login'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 7\n      }\n    }, \"Login\");\n    return __jsx(Layout.Header, {\n      className: \"header\",\n      id: \"layoutHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"left-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }\n    }, __jsx(Link, {\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      className: \"header-logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 13\n      }\n    }, __jsx(\"img\", {\n      src: typeof ui.logo === 'string' && ui.logo.length > 0 ? ui.logo : '/xcam-logo-white.png',\n      alt: \"header-logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 15\n      }\n    }))), __jsx(\"div\", {\n      className: \"menu-left-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 11\n      }\n    }, __jsx(LeftHeaderContent, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 13\n      }\n    })))), __jsx(\"div\", {\n      className: \"right-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: showSearch ? 'search-icon active' : 'search-icon',\n      \"aria-hidden\": true,\n      onClick: () => this.setState({\n        showSearch: !showSearch\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }\n    }, showSearch ? __jsx(CloseOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 27\n      }\n    }) : __jsx(SearchOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 47\n      }\n    })), __jsx(\"div\", {\n      className: !showSearch ? 'hide search-bar' : 'search-bar',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 11\n      }\n    }, __jsx(Input.Search, {\n      placeholder: \"Enter keyword\",\n      loading: false,\n      allowClear: true,\n      enterButton: true,\n      onPressEnter: this.onPressEnter.bind(this),\n      onSearch: this.onSearchPerformer.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 13\n      }\n    })), rightContent));\n  }\n\n}\n\nHeader.contextType = SocketContext;\n\nconst userSelecter = state => state.user.current;\n\nconst performerSelecter = state => state.performer.current;\n\nconst studioSelecter = state => state.studio.current;\n\nconst authSelecter = state => state.auth;\n\nconst currentUserSelecter = createSelector(userSelecter, performerSelecter, studioSelecter, authSelecter, (user, performer, studio, auth) => {\n  if (!auth.loggedIn) return {};\n\n  if (user !== null && user !== void 0 && user._id) {\n    return _objectSpread(_objectSpread({}, user), {}, {\n      role: 'user'\n    });\n  }\n\n  if (performer !== null && performer !== void 0 && performer._id) {\n    return _objectSpread(_objectSpread({}, performer), {}, {\n      role: 'performer'\n    });\n  }\n\n  if (studio !== null && studio !== void 0 && studio._id) {\n    return _objectSpread(_objectSpread({}, studio), {}, {\n      role: 'studio'\n    });\n  }\n\n  return {};\n});\nHeader.contextType = SocketContext;\n\nconst mapStateToProps = state => _objectSpread({\n  ui: _objectSpread({}, state.ui),\n  currentUser: currentUserSelecter(state),\n  tipSound: state.settings.tipSound,\n  loggedIn: state.auth.loggedIn,\n  performerCategories: state.performer.categories,\n  totalNotReadMessage: state.message.totalNotReadMessage\n}, state.streaming);\n\nconst mapDispatch = {\n  logout,\n  getPerformerCategories,\n  getCountries,\n  addPrivateRequest,\n  getStudioStats,\n  countNotReadMessage\n};\nexport default connect(mapStateToProps, mapDispatch)(withRouter(Header));","map":null,"metadata":{},"sourceType":"module"}