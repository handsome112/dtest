{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Menu, Dropdown } from 'antd';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\nimport { updateUIValue } from 'src/redux/ui/actions';\nimport './left-header-content.less';\nimport { SETTING_KEYS } from 'src/constants';\nimport classnames from 'classnames';\nimport { MoreOutlined } from '@ant-design/icons';\n\nconst LeftHeaderContent = ({\n  loggedIn,\n  currentUser,\n  pluralTextModel,\n  performerCategories,\n  settings\n}) => {\n  const [selectedKey, setSelectedKey] = React.useState('');\n  const path = settings[SETTING_KEYS.OPTION_FOR_GROUP] === 'webrtc' ? 'webrtc/' : '';\n\n  const categoryMenu = __jsx(Menu, null, performerCategories.data.length > 0 && performerCategories.data.map(category => __jsx(Menu.Item, {\n    key: `category-${category._id}`,\n    onClick: () => {\n      setSelectedKey('');\n    }\n  }, __jsx(Link, {\n    href: {\n      pathname: '/performer-category',\n      query: {\n        slug: category.slug,\n        category: JSON.stringify(category)\n      }\n    },\n    as: `/performer-category/${category.slug}`\n  }, __jsx(\"a\", null, category.name)))));\n\n  const menu = __jsx(Menu, null, __jsx(Menu.Item, {\n    onClick: () => {\n      setSelectedKey('');\n    }\n  }, __jsx(Link, {\n    href: \"/live\"\n  }, __jsx(\"a\", null, \"Go Live\"))), __jsx(Menu.Item, null, __jsx(Link, {\n    href: `/live/${path}groupchat`\n  }, __jsx(\"a\", null, \"Group Chat\"))));\n\n  return __jsx(\"nav\", null, __jsx(\"ul\", {\n    className: \"ant-menu ant-menu-root ant-menu-horizontal ant-menu-light\",\n    style: {\n      display: 'flex'\n    }\n  }, __jsx(\"li\", {\n    className: classnames('ant-menu-item', {\n      'ant-menu-item-selected': selectedKey === 'home'\n    }),\n    onClick: () => {\n      setSelectedKey('home');\n    },\n    \"aria-hidden\": \"true\"\n  }, __jsx(Link, {\n    href: \"/\",\n    shallow: true\n  }, __jsx(\"a\", null, \"Home\"))), __jsx(Dropdown, {\n    overlay: categoryMenu\n  }, __jsx(\"li\", {\n    className: \"ant-menu-item\"\n  }, __jsx(\"span\", null, \"Categories\"))), __jsx(\"li\", {\n    className: classnames('ant-menu-item', {\n      'ant-menu-item-selected': selectedKey === 'model'\n    }),\n    onClick: () => {\n      setSelectedKey('model');\n    },\n    \"aria-hidden\": \"true\"\n  }, __jsx(Link, {\n    href: \"/performer-category\",\n    as: \"/all-models\"\n  }, __jsx(\"a\", null, `All ${pluralTextModel || 'Models'}`))), loggedIn && (currentUser === null || currentUser === void 0 ? void 0 : currentUser._id) && (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'performer' && __jsx(React.Fragment, null, __jsx(\"li\", {\n    className: classnames('ant-menu-item hidden-sm', {\n      'ant-menu-item-selected': selectedKey === 'live'\n    }),\n    onClick: () => {\n      setSelectedKey('live');\n    },\n    \"aria-hidden\": \"true\"\n  }, __jsx(Link, {\n    href: \"/live\"\n  }, __jsx(\"a\", null, \"Go Live\"))), __jsx(\"li\", {\n    className: classnames('ant-menu-item hidden-sm', {\n      'ant-menu-item-selected': selectedKey === 'groupchat'\n    }),\n    onClick: () => {\n      setSelectedKey('groupchat');\n    },\n    \"aria-hidden\": \"true\"\n  }, __jsx(Link, {\n    href: `/live/${path}groupchat`\n  }, __jsx(\"a\", null, \"Group Chat\"))), __jsx(Dropdown, {\n    overlay: menu\n  }, __jsx(\"li\", {\n    className: \"ant-menu-item visible-sm\"\n  }, __jsx(MoreOutlined, null))))));\n};\n\nLeftHeaderContent.defaultProps = {\n  loggedIn: false,\n  currentUser: null,\n  settings: null,\n  pluralTextModel: '',\n  performerCategories: {\n    total: 0,\n    data: []\n  }\n};\n\nconst mapStateToProps = state => _objectSpread(_objectSpread({\n  loggedIn: state.auth.loggedIn\n}, state.performer.performers), state.ui);\n\nconst mapDispatch = {\n  updateUIValue\n};\nexport default connect(mapStateToProps, mapDispatch)(LeftHeaderContent);","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/components/common/layout/left-header-content.tsx"],"names":["React","Menu","Dropdown","Link","connect","updateUIValue","SETTING_KEYS","classnames","MoreOutlined","LeftHeaderContent","loggedIn","currentUser","pluralTextModel","performerCategories","settings","selectedKey","setSelectedKey","useState","path","OPTION_FOR_GROUP","categoryMenu","data","length","map","category","_id","pathname","query","slug","JSON","stringify","name","menu","display","role","defaultProps","total","mapStateToProps","state","auth","performer","performers","ui","mapDispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Menu, Dropdown } from 'antd';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\nimport { updateUIValue } from 'src/redux/ui/actions';\nimport {\n  IPerformerCategogies,\n  IDataResponse,\n  IPerformer,\n  IStudio,\n  IUser,\n  StreamSettings\n} from 'src/interfaces';\nimport './left-header-content.less';\nimport { SETTING_KEYS } from 'src/constants';\nimport classnames from 'classnames';\nimport { MoreOutlined } from '@ant-design/icons';\n\ninterface Props {\n  loggedIn?: boolean;\n  currentUser?: IPerformer & IUser & IStudio;\n  performerCategories?: IDataResponse<IPerformerCategogies>;\n  settings?: StreamSettings;\n  pluralTextModel?: string;\n}\n\nconst LeftHeaderContent = ({\n  loggedIn,\n  currentUser,\n  pluralTextModel,\n  performerCategories,\n  settings\n}: Props) => {\n  const [selectedKey, setSelectedKey] = React.useState('');\n  const path = settings[SETTING_KEYS.OPTION_FOR_GROUP] === 'webrtc' ? 'webrtc/' : '';\n  const categoryMenu = (\n    <Menu>\n      {performerCategories.data.length > 0\n        && performerCategories.data.map((category: IPerformerCategogies) => (\n          <Menu.Item\n            key={`category-${category._id}`}\n            onClick={() => {\n              setSelectedKey('');\n            }}\n          >\n            <Link\n              href={{\n                pathname: '/performer-category',\n                query: {\n                  slug: category.slug,\n                  category: JSON.stringify(category)\n                }\n              }}\n              as={`/performer-category/${category.slug}`}\n            >\n              <a>{category.name}</a>\n            </Link>\n          </Menu.Item>\n        ))}\n    </Menu>\n  );\n\n  const menu = (\n    <Menu>\n      <Menu.Item\n        onClick={() => {\n          setSelectedKey('');\n        }}\n      >\n        <Link href=\"/live\">\n          <a>Go Live</a>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link href={`/live/${path}groupchat`}>\n          <a>Group Chat</a>\n        </Link>\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <nav>\n      <ul\n        className=\"ant-menu ant-menu-root ant-menu-horizontal ant-menu-light\"\n        style={{ display: 'flex' }}\n      >\n        <li\n          className={classnames('ant-menu-item', {\n            'ant-menu-item-selected': selectedKey === 'home'\n          })}\n          onClick={() => {\n            setSelectedKey('home');\n          }}\n          aria-hidden=\"true\"\n        >\n          <Link href=\"/\" shallow>\n            <a>Home</a>\n          </Link>\n        </li>\n        <Dropdown overlay={categoryMenu}>\n          <li className=\"ant-menu-item\">\n            <span>Categories</span>\n          </li>\n        </Dropdown>\n        <li\n          className={classnames('ant-menu-item', {\n            'ant-menu-item-selected': selectedKey === 'model'\n          })}\n          onClick={() => {\n            setSelectedKey('model');\n          }}\n          aria-hidden=\"true\"\n        >\n          <Link href=\"/performer-category\" as=\"/all-models\">\n            <a>{`All ${pluralTextModel || 'Models'}`}</a>\n          </Link>\n        </li>\n        {loggedIn && currentUser?._id && currentUser?.role === 'performer' && (\n          <>\n            <li\n              className={classnames('ant-menu-item hidden-sm', {\n                'ant-menu-item-selected': selectedKey === 'live'\n              })}\n              onClick={() => {\n                setSelectedKey('live');\n              }}\n              aria-hidden=\"true\"\n            >\n              <Link href=\"/live\">\n                <a>Go Live</a>\n              </Link>\n            </li>\n            <li\n              className={classnames('ant-menu-item hidden-sm', {\n                'ant-menu-item-selected': selectedKey === 'groupchat'\n              })}\n              onClick={() => {\n                setSelectedKey('groupchat');\n              }}\n              aria-hidden=\"true\"\n            >\n              <Link href={`/live/${path}groupchat`}>\n                <a>Group Chat</a>\n              </Link>\n            </li>\n            <Dropdown overlay={menu}>\n              <li className=\"ant-menu-item visible-sm\">\n                <MoreOutlined />\n              </li>\n            </Dropdown>\n          </>\n        )}\n      </ul>\n    </nav>\n  );\n};\n\nLeftHeaderContent.defaultProps = {\n  loggedIn: false,\n  currentUser: null,\n  settings: null,\n  pluralTextModel: '',\n  performerCategories: {\n    total: 0,\n    data: []\n  }\n};\nconst mapStateToProps = (state) => ({\n  loggedIn: state.auth.loggedIn,\n  ...state.performer.performers,\n  ...state.ui\n});\nconst mapDispatch = { updateUIValue };\nexport default connect(mapStateToProps, mapDispatch)(LeftHeaderContent);\n"]},"metadata":{},"sourceType":"module"}