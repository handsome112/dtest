{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/products/products-form.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from 'react';\nimport { unitPrices, tailFormItemLayout } from 'src/lib';\nimport { Form, Input, Button, Space, Select, Row, Col, Upload, Radio, Divider } from 'antd';\nimport Router from 'next/router';\nimport { UploadOutlined } from '@ant-design/icons';\nimport FormInputItem from '@components/common/base/input-item-list';\nimport './index.less';\nimport NumberFormat from '@components/common/layout/numberformat';\nconst fileStyle = {\n  height: 'auto',\n  width: 225,\n  objectFit: 'cover',\n  marginTop: 10\n};\n\nconst renderDigitalFile = (digitalFile, metadata) => {\n  const {\n    type,\n    name\n  } = metadata;\n\n  if (type.match('image/*')) {\n    return __jsx(\"img\", {\n      src: digitalFile,\n      style: fileStyle,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (type.match('video/*')) {\n    return __jsx(\"video\", {\n      src: digitalFile,\n      style: fileStyle,\n      controls: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (type.match('audio/*')) {\n    return __jsx(\"audio\", {\n      src: digitalFile,\n      controls: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(Button, {\n    type: \"link\",\n    style: {\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, name);\n};\n\nconst initialValues = {\n  description: '',\n  publish: false,\n  type: 'digital'\n};\nconst radioStyle = {\n  display: 'block',\n  height: '30px',\n  lineHeight: '30px'\n};\nconst leftFormItem = [{\n  name: 'name',\n  label: 'Name',\n  rules: [{\n    required: true,\n    message: 'Please input product name!'\n  }],\n  children: __jsx(Input, {\n    placeholder: \"Enter Product Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  })\n}, {\n  name: 'description',\n  label: 'Description',\n  children: __jsx(Input.TextArea, {\n    placeholder: \"Enter Product Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  })\n}, {\n  name: 'publish',\n  label: 'Publish',\n  rules: [{\n    required: true,\n    message: 'Please input product name!'\n  }],\n  children: __jsx(Radio.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, __jsx(Radio, {\n    style: radioStyle,\n    value: true,\n    key: \"publish\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Yes\"), __jsx(Radio, {\n    style: radioStyle,\n    value: false,\n    key: \"unpublish\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, \"No\"))\n}];\n\nconst ProductForm = ({\n  onFinish,\n  loading,\n  product\n}) => {\n  let inputRef;\n  let selectRef;\n  const [form] = Form.useForm();\n  const [image, setImage] = React.useState(product ? product.image : '');\n  const [digitalFileMetaData, setDigitalFileMetaData] = React.useState([]);\n  const [productType, setProductType] = React.useState((product === null || product === void 0 ? void 0 : product.type) || 'digital');\n\n  const onImageFileChange = ({\n    fileList\n  }) => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      setImage(e.target.result);\n    };\n\n    reader.readAsDataURL(fileList[0].originFileObj);\n  };\n\n  const onDigitalFileChange = ({\n    file\n  }) => {\n    setDigitalFileMetaData([_objectSpread(_objectSpread({}, file), {}, {\n      status: 'success',\n      percent: 100\n    })]);\n  };\n\n  if (product !== null && product !== void 0 && product.token && !unitPrices.find(p => p.value === product.token)) {\n    unitPrices.push({\n      value: product.token,\n      text: __jsx(NumberFormat, {\n        value: product.token,\n        suffix: \" tokens\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      })\n    });\n    unitPrices.sort((a, b) => a.value - b.value);\n  }\n\n  const [tokens, setTokenPrice] = React.useState(unitPrices);\n  const priceSelectOptions = tokens.map(price => ({\n    label: price.text,\n    value: price.value\n  }));\n  const rightInputFrom = [{\n    name: 'token',\n    label: 'Token',\n    rules: [{\n      required: true,\n      message: 'Please input product token!'\n    }, {\n      validator: (_, value) => new Promise((resolve, reject) => {\n        if (parseInt(value, 10) > 0) return resolve(null);\n        return reject(new Error('Price must be positive integer number!'));\n      })\n    }],\n    children: __jsx(Select, {\n      ref: ref => selectRef = ref,\n      placeholder: \"Please Select Number of Token\",\n      onKeyDown: e => {\n        if (e.keyCode === 13) {\n          return e.preventDefault();\n        }\n\n        return {};\n      },\n      options: priceSelectOptions,\n      dropdownRender: menu => __jsx(React.Fragment, null, menu, __jsx(Divider, {\n        dashed: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }\n      }), __jsx(Input, {\n        placeholder: \"Input number of token\",\n        type: \"number\",\n        min: 1,\n        ref: ref => inputRef = ref,\n        onPressEnter: () => {\n          let token = parseInt(inputRef.state.value, 10);\n          if (token < 1) token = 1;\n          setTimeout(() => {\n            form.setFieldsValue({\n              token\n            });\n          }, 100);\n          if (tokens.find(t => t.value === token)) return;\n          setTokenPrice([...tokens, {\n            text: `${token} tokens`,\n            value: token\n          }].sort((a, b) => a.value - b.value));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    })\n  }, {\n    name: 'type',\n    label: 'Type',\n    rules: [{\n      required: true\n    }],\n    children: __jsx(Radio.Group, {\n      onChange: e => setProductType(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    }, __jsx(Radio, {\n      style: radioStyle,\n      value: \"digital\",\n      key: \"digital\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }\n    }, \"Digital\"), __jsx(Radio, {\n      style: radioStyle,\n      value: \"physical\",\n      key: \"physical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }\n    }, \"Physical\"))\n  }, {\n    name: 'stock',\n    label: 'Stock',\n    rules: [{\n      required: true,\n      message: 'Please input product instock!'\n    }, {\n      pattern: new RegExp(/^[1-9]\\d*$/gm),\n      message: 'Stock must be positve integer number'\n    }],\n    children: __jsx(Input, {\n      type: \"number\",\n      placeholder: \"Enter Product Stock\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }\n    })\n  }];\n  return __jsx(Form, {\n    form: form,\n    onFinish: onFinish,\n    name: \"productsForm\",\n    className: \"product-form\",\n    initialValues: _objectSpread(_objectSpread({}, initialValues), product),\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    gutter: 25,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    sm: 12,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, __jsx(FormInputItem, {\n    fields: leftFormItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }\n  })), __jsx(Col, {\n    sm: 12,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, _extends({}, rightInputFrom[0], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, _extends({}, rightInputFrom[1], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  })), productType === 'physical' && __jsx(Form.Item, _extends({}, rightInputFrom[2], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 42\n    }\n  })), __jsx(Form.Item, {\n    name: \"image\",\n    label: \"Image File\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 11\n    }\n  }, __jsx(Upload, {\n    showUploadList: false,\n    accept: \"image/*\",\n    customRequest: () => true,\n    onChange: onImageFileChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 15\n    }\n  }, __jsx(UploadOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }\n  }), ' ', \"Upload File\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 15\n    }\n  }, image && __jsx(\"img\", {\n    src: image,\n    style: fileStyle,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 30\n    }\n  })))), productType === 'digital' && __jsx(React.Fragment, null, __jsx(Form.Item, {\n    name: \"digitalFile\",\n    label: \"Digital File\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 15\n    }\n  }, __jsx(Upload, {\n    showUploadList: {\n      showRemoveIcon: false,\n      showPreviewIcon: true,\n      showDownloadIcon: false\n    },\n    listType: \"picture\",\n    fileList: digitalFileMetaData,\n    customRequest: () => true,\n    onChange: onDigitalFileChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 19\n    }\n  }, __jsx(UploadOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 21\n    }\n  }), ' ', \"Upload File\"))), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 17\n    }\n  }, !digitalFileMetaData.length && (product === null || product === void 0 ? void 0 : product.digitalFile) && __jsx(\"a\", {\n    className: \"upload-item-name\",\n    href: product.digitalFile,\n    download: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 21\n    }\n  }, product.digitalFile)))))), __jsx(Form.Item, _extends({}, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }\n  }), __jsx(Space, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    onClick: () => Router.push('/account/performer/products'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 11\n    }\n  }, \"Back\"), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 11\n    }\n  }, \"Save Changes\"))));\n};\n\nProductForm.defaultProps = {\n  product: null\n};\nexport default ProductForm;","map":null,"metadata":{},"sourceType":"module"}