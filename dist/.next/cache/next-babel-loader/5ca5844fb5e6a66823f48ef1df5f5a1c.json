{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from 'react';\nimport { Form, Input, Button, Space, Select, Row, Col, InputNumber } from 'antd';\nimport Router from 'next/router';\nimport { formItemLayout, tailFormItemLayout } from 'src/lib';\nimport FormInputItem from '@components/common/base/input-item-list';\nconst initialValues = {\n  description: '',\n  sourceId: '',\n  sourceType: 'order',\n  performerId: '',\n  token: 0\n};\n\nconst RefundRequestForm = ({\n  onFinish,\n  loading,\n  performers,\n  products,\n  onChangePerformer\n}) => {\n  let selectPerformerRef;\n  let selectProductRef;\n  const [form] = Form.useForm();\n  const performerSelectOptions = performers && performers.map(per => ({\n    label: per.username,\n    value: per._id\n  }));\n  const productSelectOptions = products && products.map(prod => ({\n    label: `${prod.productsInfo && prod.productsInfo[0] ? prod.productsInfo[0].name : 'N/A'} - ${prod.orderNumber}`,\n    value: prod._id\n  }));\n  const leftFormItem = [{\n    name: 'performerId',\n    label: 'Performer',\n    rules: [{\n      required: true,\n      message: 'Please select performer!'\n    }],\n    children: __jsx(Select, {\n      showSearch: true,\n      optionFilterProp: \"label\",\n      ref: ref => selectPerformerRef = ref,\n      placeholder: \"Please Select Performer\",\n      options: performerSelectOptions,\n      onChange: value => {\n        form.setFieldsValue({\n          sourceId: ''\n        });\n        onChangePerformer(value);\n      },\n      dropdownRender: menu => __jsx(React.Fragment, null, menu)\n    })\n  }, {\n    name: 'description',\n    label: 'Description',\n    children: __jsx(Input.TextArea, {\n      placeholder: \"Enter Description\"\n    })\n  }];\n  const rightInputFrom = [{\n    name: 'sourceId',\n    label: 'Product',\n    rules: [{\n      required: true,\n      message: 'Please select product!'\n    }],\n    children: __jsx(Select, {\n      showSearch: true,\n      optionFilterProp: \"label\",\n      ref: ref => selectProductRef = ref,\n      placeholder: \"Please Select Product\",\n      options: productSelectOptions,\n      onChange: value => {\n        const prod = products.find(p => p._id === value);\n        prod && form.setFieldsValue({\n          token: prod.totalPrice\n        });\n      },\n      dropdownRender: menu => __jsx(React.Fragment, null, menu)\n    })\n  }, {\n    name: 'token',\n    label: 'Token',\n    rules: [{\n      required: true,\n      message: 'Please input product token!'\n    }],\n    children: __jsx(InputNumber, {\n      min: 1,\n      disabled: true\n    })\n  }];\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    onFinish: onFinish,\n    name: \"productsForm\",\n    className: \"product-form\",\n    initialValues: _objectSpread({}, initialValues),\n    layout: \"vertical\"\n  }), __jsx(Row, {\n    gutter: 25\n  }, __jsx(Col, {\n    sm: 12,\n    xs: 24,\n    md: 12,\n    lg: 12\n  }, __jsx(FormInputItem, {\n    fields: leftFormItem\n  })), __jsx(Col, {\n    sm: 12,\n    xs: 24,\n    md: 12,\n    lg: 12\n  }, __jsx(FormInputItem, {\n    fields: rightInputFrom\n  }))), __jsx(Form.Item, tailFormItemLayout, __jsx(Space, null, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    loading: loading\n  }, \"Save Changes\"), __jsx(Button, {\n    type: \"primary\",\n    onClick: () => Router.push('/account/user/refund-request')\n  }, \"Back\"))));\n};\n\nRefundRequestForm.defaultProps = {\n  performers: [],\n  products: []\n};\nexport default RefundRequestForm;","map":null,"metadata":{},"sourceType":"module"}