{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Button, Space, message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport { connect } from 'react-redux';\nimport { getMyPhotos, removeMyPhoto, addMyPhotos, getMyGalleries, removeMyGalleries, addMyGalleries } from '@redux/performer/actions';\nimport { getResponseError } from '@lib/utils';\nimport Router from 'next/router';\nimport GalleriesGrid from '@components/galleries/gallery-dashboard-grid';\nimport './index.less';\nimport { photoService, galleryService } from 'src/services';\n\nclass PerformerPhotoPage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      limit: 12,\n      offset: 0\n    };\n  }\n\n  componentDidMount() {\n    this.loadGalleries();\n  }\n\n  async onRemove(id) {\n    const {\n      removeMyGalleries: dispatchRemoveMyGalleries\n    } = this.props;\n\n    try {\n      await galleryService.remove(id);\n      message.success('Removed!');\n      dispatchRemoveMyGalleries(id);\n    } catch (e) {\n      this.showError(e);\n    }\n  }\n\n  loadGalleries() {\n    const {\n      getMyGalleries: dispatchGetMyGalleries\n    } = this.props;\n    dispatchGetMyGalleries(_objectSpread({}, this.state));\n  }\n\n  async addGalleries() {\n    const {\n      addMyGalleries: dispatchAddMyGalleries\n    } = this.props;\n\n    try {\n      const {\n        limit\n      } = this.state;\n      let {\n        offset\n      } = this.state;\n      offset = limit + offset;\n      const resp = await photoService.myPhotos(_objectSpread(_objectSpread({}, this.state), {}, {\n        offset\n      }));\n      dispatchAddMyGalleries(resp.data.data);\n      this.setState({\n        offset\n      });\n    } catch (e) {\n      this.showError(e);\n    }\n  }\n\n  async showError(e) {\n    const err = await Promise.resolve(e);\n    message.error(getResponseError(err));\n  }\n\n  render() {\n    const {\n      data,\n      searching,\n      total,\n      success\n    } = this.props;\n    const galleriesGridProps = {\n      data,\n      searching,\n      success,\n      total,\n      hasMore: !searching && data.length < total,\n      addGalleries: this.addGalleries.bind(this),\n      remove: this.onRemove.bind(this),\n      title: ''\n    };\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My Galleries\")), __jsx(\"div\", {\n      className: \"performer-gallries-page\"\n    }, __jsx(PageHeader, {\n      title: \"Galleries\",\n      extra: __jsx(Space, null, __jsx(Button, {\n        type: \"primary\",\n        onClick: () => Router.push('/account/performer/galleries/add')\n      }, \"Add a new photo gallery\"), __jsx(Button, {\n        type: \"primary\",\n        onClick: () => Router.push('/account/performer/photos/add')\n      }, \"Add a new photo\"))\n    }), __jsx(GalleriesGrid, galleriesGridProps)));\n  }\n\n}\n\n_defineProperty(PerformerPhotoPage, \"authenticate\", true);\n\n_defineProperty(PerformerPhotoPage, \"layout\", 'primary');\n\nconst mapStateToProps = state => _objectSpread({}, state.performer.assets.galleries);\n\nconst mapDispatchs = {\n  getMyPhotos,\n  removeMyPhoto,\n  addMyPhotos,\n  getMyGalleries,\n  removeMyGalleries,\n  addMyGalleries\n};\nexport default connect(mapStateToProps, mapDispatchs)(PerformerPhotoPage);","map":null,"metadata":{},"sourceType":"module"}