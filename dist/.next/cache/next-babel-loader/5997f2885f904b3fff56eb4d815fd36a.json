{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/_app.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport App from 'next/app';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport nextCookie from 'next-cookies';\nimport withReduxSaga from '@redux/withReduxSaga';\nimport BaseLayout from '@layouts/base-layout';\nimport { authService, userService, performerService, studioService, bannerService } from '@services/index';\nimport Router from 'next/router';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateCurrentPerformer } from '@redux/performer/actions';\nimport { settingService } from '@services/setting.service';\nimport { updateCurrentStudio } from '@redux/studio/actions';\nimport { updateUIValue } from '@redux/ui/actions';\nimport { PERFORMER_ROLE, USER_ROLE } from 'src/services/api-request';\nimport { Socket } from 'src/socket';\nimport '../style/index.less';\nimport { updateSettings } from '@redux/settings/actions';\nimport { getBannersSuccess } from '@redux/banner/actions';\nimport { SETTING_KEYS } from 'src/constants';\nimport { updateLiveStreamSettings } from '@redux/streaming/actions';\nimport { pick } from 'lodash';\nimport Head from 'next/head';\nimport cookie from 'cookie';\nexport const ROLE = {\n  STUDIO: 'studio',\n  PERFORMER: 'performer',\n  USER: 'user'\n};\n\nfunction redirectLogin(ctx, authenticate) {\n  if (false) {\n    authService.removeToken();\n    authService.removeRemember();\n\n    if (authenticate && authenticate === ROLE.STUDIO) {\n      Router.push('/studio/login');\n      return;\n    }\n\n    Router.push('/auth/login/user');\n    return;\n  } // fix for production build\n  // ctx.res.clearCookie && ctx.res.clearCookie('token');\n\n\n  const authCookie = cookie.serialize('token', '', {\n    maxAge: -1\n  });\n  ctx.res.writeHead && ctx.res.writeHead(302, {\n    'Set-Cookie': authCookie,\n    Location: authenticate && authenticate === ROLE.STUDIO ? '/studio/login' : '/auth/login/user'\n  });\n  ctx.res.end && ctx.res.end();\n}\n\nasync function auth(ctx, authenticate) {\n  try {\n    if (false && !authenticate) return;\n    const {\n      store\n    } = ctx;\n    const state = store.getState();\n\n    if (state.auth && state.auth.loggedIn) {\n      return;\n    } // TODO - move to a service\n\n\n    const {\n      token,\n      role\n    } = nextCookie(ctx);\n\n    if (token && role) {\n      authService.setAuthHeaderToken(token);\n      let resp;\n\n      if (role === PERFORMER_ROLE) {\n        resp = await performerService.me({\n          Authorization: token\n        });\n        store.dispatch(updateCurrentPerformer(resp.data));\n      }\n\n      if (role === USER_ROLE) {\n        resp = await userService.me({\n          Authorization: token\n        });\n        store.dispatch(updateCurrentUser(resp.data));\n      }\n\n      if (role === ROLE.STUDIO) {\n        resp = await studioService.me({\n          Authorization: token\n        });\n        store.dispatch(updateCurrentStudio(resp.data));\n      } // TODO - check permission\n\n\n      store.dispatch(loginSuccess());\n    } else if (authenticate) {\n      redirectLogin(ctx, authenticate);\n      return;\n    }\n  } catch (e) {\n    if (authenticate) {\n      redirectLogin(ctx, authenticate);\n    }\n  }\n}\n\nasync function updateSettingsStore(ctx, settings) {\n  try {\n    const {\n      store\n    } = ctx;\n    store.dispatch(updateSettings({\n      tipSound: settings.tipSound\n    }));\n    store.dispatch(getBannersSuccess(settings.banners));\n    store.dispatch(updateUIValue({\n      placeholderLoginUrl: settings.placeholderLoginUrl,\n      placeholderAvatarUrl: settings.placeholderAvatarUrl,\n      logo: settings.logoUrl,\n      siteName: settings.siteName,\n      menus: settings.menus,\n      footerContent: settings.footerContent,\n      currencySymbol: settings.currencySymbol,\n      singularTextModel: settings.singularTextModel,\n      pluralTextModel: settings.pluralTextModel,\n      popup18Enabled: settings.popup18Enabled,\n      popup18ContentId: settings.popup18ContentId\n    }));\n    store.dispatch(updateLiveStreamSettings(pick(settings, [SETTING_KEYS.VIEWER_URL, SETTING_KEYS.PUBLISHER_URL, SETTING_KEYS.SUBSCRIBER_URL, SETTING_KEYS.OPTION_FOR_BROADCAST, SETTING_KEYS.OPTION_FOR_PRIVATE, SETTING_KEYS.OPTION_FOR_GROUP, SETTING_KEYS.DEFAULT_OFFLINE_MODEL_IMAGE, SETTING_KEYS.DEFAULT_MODEL_PRIVATECALL_WITH_USER_IMAGE, SETTING_KEYS.DEFAULT_MODEL_IN_GROUP_CHAT_IMAGE, SETTING_KEYS.ANT_MEDIA_APPNAME]))); // TODO - update others like meta data\n  } catch (e) {\n    // TODO - implement me\n    // eslint-disable-next-line no-console\n    console.log(e);\n  }\n}\n\nclass Application extends App {\n  // TODO - consider if we need to use get static props in children component instead?\n  // or check in render?\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    // won't check auth for un-authenticated page such as login, register\n    // use static field in the component\n    await auth(ctx, Component.authenticate); // server side to load settings, once time only\n\n    let settings = {};\n\n    if (!false) {\n      var _banner$data;\n\n      const [_settings, _banner] = await Promise.all([settingService.all(), bannerService.search({\n        status: 'active'\n      })]); // TODO encrypt, decypt header script, footer script or other info if needed\n\n      settings = _settings.data || {};\n      await updateSettingsStore(ctx, _objectSpread(_objectSpread({}, settings), {}, {\n        banners: (_banner === null || _banner === void 0 ? void 0 : (_banner$data = _banner.data) === null || _banner$data === void 0 ? void 0 : _banner$data.data) || []\n      }));\n    }\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps({\n        ctx\n      });\n    } // TODO - overwrite for ui config by using redux-store\n\n\n    return {\n      settings,\n      pageProps,\n      layout: Component.layout\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store,\n      settings\n    } = this.props;\n    const {\n      layout\n    } = Component;\n    return __jsx(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }\n    }, typeof settings.siteName === 'string' && settings.siteName.length > 0 ? settings.siteName : 'Application'), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"initial-scale=1.0, width=device-width\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }\n    })), __jsx(Socket, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }\n    }, __jsx(BaseLayout, {\n      layout: layout,\n      maintenanceMode: settings.maintenanceMode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    })))));\n  }\n\n}\n\n_defineProperty(Application, \"settingQuery\", false);\n\nexport default withReduxSaga(Application);","map":null,"metadata":{},"sourceType":"module"}