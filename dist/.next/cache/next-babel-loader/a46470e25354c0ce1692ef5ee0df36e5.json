{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/studio/account-settings.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { message, Tabs, Collapse } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport { getResponseError } from '@lib/utils';\nimport Router from 'next/router';\nimport PasswordChange from '@components/auth/password-change';\nimport { PAYMENT_ACCOUNT } from 'src/interfaces';\nimport StudioInformation from '@components/studio/account-information';\nimport CommissionCard, { ROLE } from '@components/commission/commission-card';\nimport { WireTransferSettingForm, PaypalSettingFrom, IssueCheckUSSetingForm, DirectDepositSettingForm, BitpaySettigForm, PaxumSettingForm } from '@components/payment';\nimport { updateStudio, updateStudioPaymentInfo, updateStudioDirectDeposit, updateStudioPaxum, updateStudioBitpay } from 'src/redux/studio/actions';\nimport { updatePassword } from 'src/redux/auth/actions';\nimport { connect } from 'react-redux';\nimport { omit } from 'lodash';\nimport { paymentInformationService } from '@services/payment-information.service';\nconst {\n  Panel\n} = Collapse;\n\nclass StudioProfilePage extends PureComponent {\n  static getInitialProps({\n    ctx\n  }) {\n    const {\n      query\n    } = ctx;\n    return {\n      action: query.action\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      paymentInformationKey: '',\n      paymentInformation: {}\n    };\n  }\n\n  componentDidUpdate(prevProps, prevStates) {\n    const {\n      success,\n      errorInfo,\n      auth\n    } = this.props;\n    const {\n      paymentInformationKey\n    } = this.state;\n\n    if (prevProps.success !== success && success) {\n      message.success('Update Profile Success.');\n    }\n\n    if (prevProps.errorInfo !== errorInfo && errorInfo) {\n      message.error(getResponseError(errorInfo));\n    }\n\n    if (prevProps.auth.updatePassword.success !== auth.updatePassword.success && auth.updatePassword.success) {\n      message.success('Update Password Success.');\n    }\n\n    if (prevProps.auth.updatePassword.error !== auth.updatePassword.error && auth.updatePassword.error) {\n      message.error(getResponseError(auth.updatePassword.error));\n    }\n\n    if (paymentInformationKey && paymentInformationKey !== prevStates.paymentInformationKey) {\n      this.getPaymentInformation();\n    }\n  }\n\n  onTabsChange(key) {\n    Router.push({\n      pathname: '/studio/account-settings',\n      query: {\n        action: key\n      }\n    }, `/studio/account-settings?action=${key}`, {\n      shallow: false\n    });\n  }\n\n  onFinish(data) {\n    const {\n      studio,\n      updateStudio: dispatchUpdateStudio\n    } = this.props;\n    dispatchUpdateStudio(_objectSpread(_objectSpread({}, omit(studio, ['bankTransferOption', 'bitpay'])), data));\n  }\n\n  onPasswordChange(data) {\n    const {\n      updatePassword: dispatchUpdatePassword\n    } = this.props;\n    dispatchUpdatePassword(_objectSpread({\n      source: 'studio'\n    }, data));\n  }\n\n  onPaymentInformationChange(key) {\n    this.setState({\n      paymentInformationKey: key\n    });\n  }\n\n  async getPaymentInformation() {\n    const {\n      paymentInformationKey\n    } = this.state;\n    paymentInformationService.findOne({\n      type: paymentInformationKey\n    }).then(resp => this.setState({\n      paymentInformation: {\n        [paymentInformationKey]: resp.data\n      }\n    }));\n  }\n\n  async submitPaymentInfoForm(data) {\n    try {\n      const {\n        paymentInformationKey\n      } = this.state;\n      const resp = await paymentInformationService.create(_objectSpread({\n        type: paymentInformationKey\n      }, data));\n      this.setState({\n        paymentInformation: {\n          [paymentInformationKey]: resp.data\n        }\n      });\n      message.success('Update Payment Information Success');\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    }\n  }\n\n  render() {\n    const {\n      action,\n      updating,\n      studio,\n      countries\n    } = this.props;\n    const {\n      paymentInformation\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    }, \"Account Settings\")), __jsx(\"div\", {\n      className: \"studio-main-background\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, __jsx(PageHeader, {\n      title: \"Account Settings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }), __jsx(Tabs, {\n      defaultActiveKey: action || 'account-information',\n      style: {\n        padding: '0 24px'\n      },\n      size: \"large\",\n      onChange: this.onTabsChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    }, __jsx(Tabs.TabPane, {\n      key: \"account-information\",\n      tab: \"Account Information\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, __jsx(StudioInformation, _extends({}, studio, {\n      countries: countries,\n      onFinish: this.onFinish.bind(this),\n      loading: updating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 15\n      }\n    }))), __jsx(Tabs.TabPane, {\n      key: \"change-password\",\n      tab: \"Change Password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    }, __jsx(PasswordChange, {\n      onFinish: this.onPasswordChange.bind(this),\n      submiting: updating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 15\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: \"(%) Commission\",\n      key: \"commission\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    }, __jsx(CommissionCard, {\n      role: ROLE.STUDIO,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 15\n      }\n    })), __jsx(Tabs.TabPane, {\n      tab: \"Payment Information\",\n      key: \"paymentInfo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }\n    }, __jsx(Collapse, {\n      accordion: true,\n      onChange: this.onPaymentInformationChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 15\n      }\n    }, __jsx(Panel, {\n      header: \"Wire Transfer (Free)\",\n      key: \"wire\",\n      forceRender: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }\n    }, __jsx(WireTransferSettingForm, {\n      paymentInformation: paymentInformation.wire,\n      loading: updating,\n      onFinish: this.submitPaymentInfoForm.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 19\n      }\n    })), __jsx(Panel, {\n      header: \"Paypal\",\n      key: \"paypal\",\n      forceRender: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, __jsx(PaypalSettingFrom, {\n      paymentInformation: paymentInformation.paypal,\n      loading: updating,\n      onFinish: this.submitPaymentInfoForm.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 19\n      }\n    })), __jsx(Panel, {\n      header: \"Issue Check (U.S only)\",\n      key: \"issue_check_us\",\n      forceRender: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    }, __jsx(IssueCheckUSSetingForm, {\n      paymentInformation: paymentInformation.issue_check_us,\n      loading: updating,\n      onFinish: this.submitPaymentInfoForm.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 19\n      }\n    })), __jsx(Panel, {\n      header: \"Direct Deposit\",\n      key: \"deposit\",\n      forceRender: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }\n    }, __jsx(DirectDepositSettingForm, {\n      paymentInformation: paymentInformation.deposit,\n      loading: updating,\n      onFinish: this.submitPaymentInfoForm.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 19\n      }\n    })), __jsx(Panel, {\n      header: \"Paxum\",\n      key: PAYMENT_ACCOUNT.PAXUM,\n      forceRender: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }, __jsx(PaxumSettingForm, {\n      paymentInformation: paymentInformation[PAYMENT_ACCOUNT.PAXUM],\n      loading: updating,\n      onFinish: this.submitPaymentInfoForm.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 19\n      }\n    })), __jsx(Panel, {\n      header: \"Bitpay\",\n      key: PAYMENT_ACCOUNT.BITPAY,\n      forceRender: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }\n    }, __jsx(BitpaySettigForm, {\n      paymentInformation: paymentInformation[PAYMENT_ACCOUNT.BITPAY],\n      loading: updating,\n      onFinish: this.submitPaymentInfoForm.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 19\n      }\n    })))))));\n  }\n\n}\n\n_defineProperty(StudioProfilePage, \"authenticate\", true);\n\n_defineProperty(StudioProfilePage, \"layout\", 'primary');\n\nconst mapStates = state => ({\n  auth: state.auth,\n  studio: state.studio.current,\n  updating: state.studio.updatingStudio,\n  success: state.studio.updateStudioSuccess,\n  countries: state.settings.countries,\n  errorInfo: state.studio.updateStudioError\n});\n\nconst mapDispatch = {\n  updateStudio,\n  updateStudioPaymentInfo,\n  updateStudioDirectDeposit,\n  updateStudioPaxum,\n  updateStudioBitpay,\n  updatePassword\n};\nexport default connect(mapStates, mapDispatch)(StudioProfilePage);","map":null,"metadata":{},"sourceType":"module"}