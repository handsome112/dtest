{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/products/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable react/react-in-jsx-scope */\nimport { Row, Alert, message, Col } from 'antd';\nimport { getResponseError } from '@lib/utils';\nimport Head from 'next/head';\nimport PageHeader from '@components/common/layout/page-header';\nimport { getPerformerProducts, loadMorePerformerProduct, purchaseProductSuccess } from '@redux/products/actions';\nimport { updateCurrentUserBalance } from '@redux/user/actions';\nimport { connect } from 'react-redux';\nimport { PureComponent } from 'react';\nimport ProductCard from 'src/components/products/product-card';\nimport { withRouter } from 'next/router';\nimport { performerService, productService } from 'src/services';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ModalBuyAssets from 'src/components/performer-assets/common/modal-buy-assets';\n\nclass ProductsPage extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    const {\n      query\n    } = ctx;\n\n    try {\n      if (query.performer) {\n        return {\n          performer: JSON.parse(query.performer)\n        };\n      }\n\n      if (query.username) {\n        const resp = await performerService.details(query.username);\n        return {\n          performer: resp.data\n        };\n      }\n\n      return {};\n    } catch (error) {\n      return {};\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"ref\", void 0);\n\n    this.state = {\n      limit: 12,\n      offset: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getProducts();\n  }\n\n  onPurchaseSuccess(data, id) {\n    updateCurrentUserBalance(-data.data.totalPrice);\n    purchaseProductSuccess(id);\n  }\n\n  async getProducts() {\n    const {\n      router,\n      performer,\n      getPerformerProducts: dispatchGetPerformerProducts\n    } = this.props;\n    const performerId = performer ? performer._id : '';\n    await dispatchGetPerformerProducts(_objectSpread(_objectSpread(_objectSpread({}, router.query), this.state), {}, {\n      performerId\n    }));\n  }\n\n  async infinityScroll() {\n    try {\n      const {\n        limit\n      } = this.state;\n      let {\n        offset\n      } = this.state;\n      offset = limit + offset;\n      const {\n        router,\n        performer,\n        loadMorePerformerProduct: dispatchLoadMorePerformerProduct\n      } = this.props;\n      const performerId = performer ? performer._id : '';\n      const resp = await productService.search(_objectSpread(_objectSpread({}, router.query), {}, {\n        limit,\n        offset,\n        performerId\n      }));\n      dispatchLoadMorePerformerProduct(resp.data.data);\n      this.setState({\n        offset\n      });\n    } catch (e) {\n      const err = await Promise.resolve(e);\n      message.error(getResponseError(err));\n    }\n  }\n\n  purchase(item) {\n    if (item.type === 'digital' && item.isBought) {\n      return message.success('You have bought this product, please check your email to get link.');\n    }\n\n    this.ref.showModalBuyAssets(item, 'product');\n    return {};\n  }\n\n  render() {\n    const {\n      data,\n      total,\n      searching,\n      success,\n      performer,\n      router: {\n        query\n      },\n      ids\n    } = this.props;\n    const hasMore = ids.length < total;\n    const username = performer && performer.username;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, ' ', username || '', ' ', \"Products\")), __jsx(\"div\", {\n      className: \"main-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, __jsx(PageHeader, {\n      title: `${username || ''} Products`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }), success && __jsx(\"div\", {\n      className: \"products-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, query.username && !performer && __jsx(Alert, {\n      message: \"Performer not found.\",\n      banner: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }\n    }), searching ? __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, \"Loading...\") : __jsx(InfiniteScroll, {\n      loadMore: this.infinityScroll.bind(this),\n      hasMore: hasMore,\n      loader: __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 27\n        }\n      }, \"Loading...\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, __jsx(Row, {\n      gutter: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 19\n      }\n    }, ids && ids.length > 0 ? ids.map(id => __jsx(Col, {\n      xl: 4,\n      md: 6,\n      sm: 8,\n      xs: 24,\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }\n    }, __jsx(ProductCard, {\n      product: data[id],\n      onHandlePurchase: this.purchase.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 27\n      }\n    }))) : __jsx(\"p\", {\n      className: \"no-items-found\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 23\n      }\n    }, \"No product found.\")))), __jsx(ModalBuyAssets, _extends({}, this.props, {\n      ref: ref => this.ref = ref,\n      onSucess: this.onPurchaseSuccess.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\nconst mapStates = state => _objectSpread(_objectSpread({}, state.product), {}, {\n  loggedIn: state.auth.loggedIn\n});\n\nconst mapDispatch = {\n  getPerformerProducts,\n  loadMorePerformerProduct,\n  updateCurrentUserBalance,\n  purchaseProductSuccess\n};\nexport default withRouter(connect(mapStates, mapDispatch)(ProductsPage));","map":null,"metadata":{},"sourceType":"module"}