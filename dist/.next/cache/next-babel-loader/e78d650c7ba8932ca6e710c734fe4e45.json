{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport PrimaryLayout from './primary-layout';\nimport PublicLayout from './public-layout';\nimport DefaultLayout from './default-layout';\nimport AuthLayout from './auth-layout';\nimport MaintenanceLayout from './maintenance-layout';\nvar LayoutMap = {\n  maintenance: MaintenanceLayout,\n  primary: PrimaryLayout,\n  \"public\": PublicLayout,\n  auth: AuthLayout,\n  \"default\": DefaultLayout\n};\n\nvar BaseLayout = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(BaseLayout, _React$PureComponent);\n\n  var _super = _createSuper(BaseLayout);\n\n  function BaseLayout() {\n    _classCallCheck(this, BaseLayout);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BaseLayout, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          layout = _this$props.layout,\n          _this$props$maintenan = _this$props.maintenanceMode,\n          maintenanceMode = _this$props$maintenan === void 0 ? false : _this$props$maintenan;\n\n      if (maintenanceMode) {\n        return __jsx(MaintenanceLayout, null);\n      }\n\n      var Container = layout && LayoutMap[layout] ? LayoutMap[layout] : LayoutMap[\"public\"];\n      return __jsx(React.Fragment, null, __jsx(Container, null, children));\n    }\n  }]);\n\n  return BaseLayout;\n}(React.PureComponent);\n\nexport { BaseLayout as default };","map":null,"metadata":{},"sourceType":"module"}