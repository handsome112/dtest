{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/videos/video-form.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from 'react';\nimport { Form, Input, Button, Space, Select, Row, Col, Upload, Checkbox, Divider } from 'antd';\nimport Router from 'next/router';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { tailFormItemLayout, unitPrices } from 'src/lib';\nimport FormInputItem from '@components/common/base/input-item-list';\nimport NumberFormat from '@components/common/layout/numberformat';\nimport './index.less';\nconst imageStyle = {\n  height: 225,\n  width: 225,\n  objectFit: 'cover',\n  marginTop: 10\n};\nconst defaultValue = {\n  description: '',\n  isSaleVideo: false,\n  isBought: false\n};\nconst {\n  Option\n} = Select;\nconst PERFORMER_VIDEO_STATUS = [{\n  key: 'draft',\n  name: 'Draft'\n}, {\n  key: 'active',\n  name: 'Active'\n}, {\n  key: 'inactive',\n  name: 'Inactive'\n}];\nconst leftInputFrom = [{\n  name: 'title',\n  label: 'Title',\n  rules: [{\n    required: true,\n    message: 'Please input video title!'\n  }],\n  children: __jsx(Input, {\n    placeholder: \"Enter Video Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  })\n}, {\n  name: 'description',\n  label: 'Description',\n  children: __jsx(Input.TextArea, {\n    placeholder: \"Enter Video Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  })\n}];\n\nconst VideoForm = ({\n  onFinish,\n  loading,\n  video\n}) => {\n  var _video$video, _video$trailer;\n\n  let inputRef;\n  let selectRef;\n  const [form] = Form.useForm();\n\n  if (video !== null && video !== void 0 && video.token && !unitPrices.find(p => p.value === video.token)) {\n    unitPrices.push({\n      value: video.token,\n      text: __jsx(NumberFormat, {\n        value: video.token,\n        suffix: \" tokens\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 49\n        }\n      })\n    });\n    unitPrices.sort((a, b) => a.value - b.value);\n  }\n\n  const [tokens, setTokenPrice] = React.useState(unitPrices);\n  const [isSaleVideo, setIsSaleVideo] = React.useState(video.isSaleVideo);\n  const [thumbnailFile, setThumbnail] = React.useState(video.thumbnail || '');\n  const priceSelectOptions = tokens.map(price => ({\n    label: price.text,\n    value: price.value\n  }));\n  const rightInputFrom = [{\n    name: 'token',\n    label: 'Token',\n    rules: [{\n      required: true,\n      message: 'Please input video token!'\n    }, {\n      validator: (_, value) => new Promise((resolve, reject) => {\n        if (parseInt(value, 10) > 0) return resolve(null);\n        return reject(new Error('Price must be positive integer number!'));\n      })\n    }],\n    children: __jsx(Select, {\n      ref: ref => selectRef = ref,\n      placeholder: \"Please Select Number of Token\",\n      onKeyDown: e => {\n        if (e.keyCode === 13) {\n          return e.preventDefault();\n        }\n\n        return {};\n      },\n      options: priceSelectOptions,\n      dropdownRender: menu => __jsx(React.Fragment, null, menu, __jsx(Divider, {\n        dashed: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }\n      }), __jsx(Input, {\n        placeholder: \"Input number of token\",\n        type: \"number\",\n        min: 1,\n        ref: ref => inputRef = ref,\n        onPressEnter: () => {\n          let token = parseInt(inputRef.state.value, 10);\n          if (token < 1) token = 1;\n          setTimeout(() => {\n            form.setFieldsValue({\n              token\n            });\n          }, 100);\n          if (tokens.find(t => t.value === token)) return;\n          setTokenPrice([...tokens, {\n            text: `${token} tokens`,\n            value: token\n          }].sort((a, b) => a.value - b.value));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    })\n  }, {\n    name: 'status',\n    label: 'Status',\n    rules: [{\n      required: true,\n      message: 'Please input video status!'\n    }],\n    children: __jsx(Select, {\n      placeholder: \"Select Video Status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }, PERFORMER_VIDEO_STATUS.map(status => __jsx(Option, {\n      key: status.key,\n      value: status.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, status.name)))\n  }];\n  const [videoFIle, setVideoFile] = React.useState([]);\n  const [trailerFile, setTrailerFile] = React.useState([]);\n\n  const onVideoFileChange = ({\n    file\n  }) => {\n    setVideoFile([_objectSpread(_objectSpread({}, file), {}, {\n      status: 'success',\n      percent: 100\n    })]);\n  };\n\n  const onVideoTrailerChange = ({\n    file\n  }) => {\n    setTrailerFile([_objectSpread(_objectSpread({}, file), {}, {\n      status: 'success',\n      percent: 100\n    })]);\n  };\n\n  const onThumbnailChange = info => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      setThumbnail(e.target.result);\n    };\n\n    reader.readAsDataURL(info.fileList[0].originFileObj);\n  };\n\n  return __jsx(Form // {...formItemLayout}\n  , {\n    form: form,\n    onFinish: onFinish,\n    className: \"video-form\",\n    initialValues: _objectSpread(_objectSpread({}, defaultValue), video),\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    gutter: 25,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    sm: 12,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, __jsx(FormInputItem, {\n    fields: leftInputFrom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }), __jsx(Form.Item, {\n    name: \"video\",\n    label: \"Video\",\n    rules: [{\n      required: true,\n      message: 'File is required'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, __jsx(Upload, {\n    showUploadList: {\n      showRemoveIcon: false,\n      showPreviewIcon: true,\n      showDownloadIcon: false\n    },\n    listType: \"picture\",\n    fileList: videoFIle,\n    accept: \"video/*\",\n    customRequest: () => true,\n    onChange: onVideoFileChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    block: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  }, __jsx(UploadOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }), ' ', \"Upload File\"))), (video === null || video === void 0 ? void 0 : (_video$video = video.video) === null || _video$video === void 0 ? void 0 : _video$video.url) && __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }, __jsx(\"video\", {\n    src: video.video.url,\n    style: imageStyle,\n    controls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 15\n    }\n  })), __jsx(Form.Item, {\n    name: \"trailer\",\n    label: \"Trailer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 11\n    }\n  }, __jsx(Upload, {\n    showUploadList: {\n      showRemoveIcon: false,\n      showPreviewIcon: true,\n      showDownloadIcon: false\n    },\n    listType: \"picture\",\n    fileList: trailerFile,\n    accept: \"video/*,.mkv\",\n    customRequest: () => true,\n    onChange: onVideoTrailerChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    block: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 15\n    }\n  }, __jsx(UploadOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }\n  }), ' ', \"Upload File\"))), (video === null || video === void 0 ? void 0 : (_video$trailer = video.trailer) === null || _video$trailer === void 0 ? void 0 : _video$trailer.url) && __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }\n  }, __jsx(\"video\", {\n    src: video.trailer.url,\n    style: imageStyle,\n    controls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 15\n    }\n  })), __jsx(Form.Item, {\n    name: \"thumbnail\",\n    label: \"Thumbnail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }, __jsx(Upload, {\n    showUploadList: false,\n    accept: \"image/*\",\n    customRequest: () => true,\n    onChange: onThumbnailChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    block: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 15\n    }\n  }, __jsx(UploadOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 17\n    }\n  }), ' ', \"Upload File\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 15\n    }\n  }, thumbnailFile && __jsx(\"img\", {\n    src: thumbnailFile,\n    style: imageStyle,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 19\n    }\n  }))))), __jsx(Col, {\n    sm: 12,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, _extends({}, rightInputFrom[1], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    name: \"isSaleVideo\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 11\n    }\n  }, __jsx(Checkbox, {\n    checked: isSaleVideo,\n    onChange: e => [setIsSaleVideo(!isSaleVideo), form.setFieldsValue({\n      isSaleVideo: !isSaleVideo\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, \"Is for sale?\")), isSaleVideo && __jsx(Form.Item, _extends({}, rightInputFrom[0], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 27\n    }\n  })))), __jsx(Form.Item, _extends({}, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }\n  }), __jsx(Space, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 11\n    }\n  }, \"Save Changes\"), __jsx(Button, {\n    type: \"primary\",\n    onClick: () => Router.back(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 11\n    }\n  }, \"Back\"))));\n};\n\nVideoForm.defaultProps = {\n  video: null\n};\nexport default VideoForm;","map":null,"metadata":{},"sourceType":"module"}