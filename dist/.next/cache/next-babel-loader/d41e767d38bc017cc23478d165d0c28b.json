{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/studio/payout-requests/performer-requests.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport { connect } from 'react-redux';\nimport { getPerformerRequest } from '@redux/studio/actions';\nimport PayoutRequestList from 'src/components/payout-request/studio-performer-request-table';\nimport { getResponseError, getSearchData } from '@lib/utils';\nimport './index.less';\n\nclass PerformerPayoutRequestPage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      limit: 12,\n      offset: 0,\n      sortBy: 'createdAt',\n      sort: 'desc'\n    };\n  }\n\n  componentDidMount() {\n    const {\n      getPerformerRequest: dispatchGetPerformerRequest\n    } = this.props;\n    dispatchGetPerformerRequest(this.state);\n  }\n\n  componentDidUpdate(preProps, prevStates) {\n    const {\n      getPerformerRequest: dispatchGetPerformerRequest,\n      error\n    } = this.props;\n\n    if (prevStates !== this.state) {\n      dispatchGetPerformerRequest(this.state);\n    }\n\n    if (error && error !== preProps.error) {\n      message.error(getResponseError(error));\n    }\n  }\n\n  onChange(pagination, filters, sorter) {\n    const oldState = this.state;\n    this.setState(getSearchData(pagination, filters, sorter, oldState));\n  }\n\n  render() {\n    const {\n      data,\n      searching,\n      total\n    } = this.props;\n    const {\n      limit\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, \"Performer Payout Request\")), __jsx(\"div\", {\n      className: \"payout-request-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, __jsx(PageHeader, {\n      title: \"Performer Payout Request\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }), __jsx(PayoutRequestList, {\n      payouts: data,\n      searching: searching,\n      total: total,\n      onChange: this.onChange.bind(this),\n      pageSize: limit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\n_defineProperty(PerformerPayoutRequestPage, \"authenticate\", 'studio');\n\n_defineProperty(PerformerPayoutRequestPage, \"layout\", 'primary');\n\nconst mapStateToProps = state => _objectSpread({}, state.studio.performerRequests);\n\nconst mapDispatch = {\n  getPerformerRequest\n};\nexport default connect(mapStateToProps, mapDispatch)(PerformerPayoutRequestPage);","map":null,"metadata":{},"sourceType":"module"}