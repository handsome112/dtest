{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport { getResponseError } from 'src/lib';\nimport { photoService } from 'src/services';\nimport { getPerformerPhotos, gettingPerformerPhotos, getPerformerPhotosSuccess, getPerformerPhotosFail } from './actions';\nvar photosSagas = [{\n  on: getPerformerPhotos,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(gettingPerformerPhotos());\n\n          case 3:\n            _context.next = 5;\n            return photoService.search(action.payload);\n\n          case 5:\n            resp = _context.sent;\n            _context.next = 8;\n            return put(getPerformerPhotosSuccess({\n              data: resp.data.data,\n              total: resp.data.total\n            }));\n\n          case 8:\n            _context.next = 15;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            err = getResponseError(_context.t0);\n            _context.next = 15;\n            return put(getPerformerPhotosFail(err));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}];\nexport default flatten([createSagas(photosSagas)]);","map":null,"metadata":{},"sourceType":"module"}