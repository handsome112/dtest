{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Form, Input, Button, Row, Col, Upload } from 'antd';\nimport Countries from '@components/common/base/select/countries';\nimport './index.less';\nimport { TOKEN } from '@services/api-request';\nimport { studioService } from 'src/services';\nimport cookie from 'js-cookie';\nvar formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 24\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 24\n    }\n  }\n};\nvar tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 0\n    }\n  }\n};\n\nvar StudioInformation = function StudioInformation(_ref) {\n  var onFinish = _ref.onFinish,\n      loading = _ref.loading,\n      name = _ref.name,\n      firstName = _ref.firstName,\n      lastName = _ref.lastName,\n      username = _ref.username,\n      email = _ref.email,\n      country = _ref.country,\n      state = _ref.state,\n      phone = _ref.phone,\n      address = _ref.address,\n      city = _ref.city,\n      zipcode = _ref.zipcode,\n      documentVerificationId = _ref.documentVerificationId,\n      documentVerification = _ref.documentVerification,\n      countries = _ref.countries;\n\n  var _React$useState = React.useState(documentVerificationId),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      certificateId = _React$useState2[0],\n      setCertificateId = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      certificate = _React$useState4[0],\n      setCertificate = _React$useState4[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  React.useEffect(function () {\n    if (documentVerification) {\n      setCertificate([{\n        uid: documentVerification._id,\n        name: documentVerification.name,\n        status: 'done',\n        url: documentVerification.url\n      }]);\n    }\n  }, []);\n\n  var onCertificateChange = function onCertificateChange(_ref2) {\n    var file = _ref2.file,\n        fileList = _ref2.fileList;\n\n    if (file.status === 'done' && file.response) {\n      var _data = file.response.data;\n      setCertificateId(_data.file._id);\n      setCertificate([{\n        uid: _data.file._id,\n        name: _data.file.name,\n        status: 'done',\n        url: _data.url\n      }]);\n    } else {\n      setCertificate(fileList);\n    }\n  };\n\n  var submit = function submit(values) {\n    onFinish(_objectSpread(_objectSpread({}, values), {}, {\n      documentVerificationId: certificateId\n    }));\n  };\n\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    onFinish: submit,\n    name: \"contactSettingForm\",\n    className: \"performerEditForm\",\n    initialValues: {\n      firstName: firstName,\n      lastName: lastName,\n      name: name,\n      username: username,\n      email: email,\n      country: country,\n      city: city,\n      state: state,\n      phone: phone,\n      address: address,\n      zipcode: zipcode\n    },\n    layout: \"vertical\"\n  }), __jsx(Row, {\n    gutter: 25\n  }, __jsx(Col, {\n    sm: 12,\n    xs: 24\n  }, __jsx(Form.Item, {\n    name: \"firstName\",\n    label: \"First Name\",\n    rules: [{\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input your first name!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"First name\"\n  })), __jsx(Form.Item, {\n    name: \"lastName\",\n    label: \"Last Name\",\n    rules: [{\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input your last name!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"Last name\"\n  })), __jsx(Form.Item, {\n    name: \"name\",\n    label: \"Studio Name\",\n    rules: [{\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Studio name must according to Alphanumeric formating'\n    }, {\n      whitespace: true,\n      message: 'Please input your Studio name!'\n    }, {\n      required: true,\n      message: 'Please input your Studio name!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"Studio name\"\n  })), __jsx(Form.Item, {\n    name: \"username\",\n    label: \"User Name\",\n    rules: [{\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'User name must according to Alphanumeric formating'\n    }, {\n      whitespace: true,\n      message: 'Please input your user name!'\n    }, {\n      required: true,\n      message: 'Please input your user name!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"Last name\"\n  })), __jsx(Form.Item, {\n    name: \"email\",\n    label: \"Email Address\",\n    rules: [{\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }, {\n      required: true,\n      message: 'Please input your E-mail!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"studi@example.com\"\n  })), __jsx(Form.Item, null, __jsx(Upload, {\n    showUploadList: {\n      showPreviewIcon: true,\n      showRemoveIcon: false,\n      showDownloadIcon: true\n    },\n    name: \"documentVerification\",\n    headers: {\n      Authorization: true ? cookie.get(TOKEN) : ''\n    },\n    fileList: certificate,\n    listType: \"text\",\n    action: studioService.getDocumentsUploadUrl(),\n    onChange: onCertificateChange\n  }, __jsx(Button, {\n    type: \"primary\"\n  }, __jsx(UploadOutlined, null), ' ', \"Upload Company registration certificate\")))), __jsx(Col, {\n    sm: 12,\n    xs: 24\n  }, __jsx(Form.Item, {\n    name: \"country\",\n    label: \"Country\",\n    rules: [{\n      required: true,\n      message: 'Please input your country!'\n    }]\n  }, __jsx(Countries, {\n    defaultValue: country,\n    countries: countries\n  })), __jsx(Form.Item, {\n    name: \"state\",\n    label: \"State Name\"\n  }, __jsx(Input, {\n    placeholder: \"samplestate\"\n  })), __jsx(Form.Item, {\n    name: \"city\",\n    label: \"City\"\n  }, __jsx(Input, {\n    placeholder: \"samplecity\"\n  })), __jsx(Form.Item, {\n    name: \"zipcode\",\n    label: \"Zip\"\n  }, __jsx(Input, {\n    placeholder: \"012345-678\"\n  })), __jsx(Form.Item, {\n    name: \"address\",\n    label: \"Address\"\n  }, __jsx(Input, {\n    placeholder: \"Address\"\n  })), __jsx(Form.Item, {\n    name: \"phone\",\n    label: \"Mobile Phone\",\n    rules: [{\n      min: 8,\n      max: 14,\n      message: '8-14 digits'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"+18000 0000\"\n  })))), __jsx(Form.Item, tailFormItemLayout, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    loading: loading\n  }, \"Save Changes\")));\n};\n\nexport default StudioInformation;","map":null,"metadata":{},"sourceType":"module"}