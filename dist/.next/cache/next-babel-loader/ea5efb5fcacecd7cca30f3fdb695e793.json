{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport React, { PureComponent } from 'react';\nimport { SettingOutlined, HeartOutlined, MessageOutlined, UserOutlined, LogoutOutlined, SearchOutlined, CloseOutlined, BellOutlined } from '@ant-design/icons';\nimport { FundsIcon } from '@components/common/base/icons';\nimport { Layout, Menu, Avatar, Input, Button, Dropdown, Badge, Card, message, Tooltip } from 'antd';\nimport { messageService } from 'src/services/index';\nimport { createSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport Router, { withRouter } from 'next/router';\nimport { logout } from '@redux/auth/actions';\nimport { getPerformerCategories } from '@redux/performer/actions';\nimport { getCountries } from '@redux/settings/actions';\nimport { SocketContext } from 'src/socket';\nimport { addPrivateRequest } from '@redux/streaming/actions';\nimport { formatDate } from 'src/lib';\nimport { getStudioStats } from 'src/redux/studio/actions';\nimport { countNotReadMessage } from '@redux/message/actions';\nimport NumberFormat from '@components/common/layout/numberformat';\nimport './header.less';\nimport { SETTING_KEYS } from 'src/constants';\nimport LeftHeaderContent from './left-header-content';\n\nconst roundBalance = balance => {\n  if (balance < 10000) return Math.round(balance);\n  return '9999+';\n};\n\nconst EVENT = {\n  RECEIVED_PRIVATE_CHAT_REQUEST: 'private-chat-request',\n  NOTIFY_READ_MESSAGE: 'nofify_read_messages_in_conversation',\n  TIPPED: 'tipped'\n};\n\nclass Header extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"_audio\", void 0);\n\n    _defineProperty(this, \"handleMessage\", event => {\n      const {\n        countNotReadMessage: dispatchCountNotReadMessage\n      } = this.props;\n      event && dispatchCountNotReadMessage(event.total);\n    });\n\n    _defineProperty(this, \"handlePrivateChat\", data => {\n      const {\n        addPrivateRequest: dispatchAddPrivateRequest,\n        settings\n      } = this.props;\n      const path = settings[SETTING_KEYS.OPTION_FOR_PRIVATE] === 'webrtc' ? 'webrtc/' : '';\n      message.success({\n        content: __jsx(\"span\", null, data.user.username, ' ', \"sent you a private chat request.\"),\n        duration: 10,\n        key: data.conversationId,\n        onClick: () => {\n          Router.push({\n            pathname: `/live/${path}privatechat`,\n            query: {\n              id: data.conversationId\n            }\n          }, `/live/${path}privatechat/${data.conversationId}`);\n          message.destroy(data.conversationId);\n        }\n      });\n      this._audio && this._audio.play();\n      dispatchAddPrivateRequest(_objectSpread(_objectSpread({}, data), {}, {\n        createdAt: new Date()\n      }));\n    });\n\n    _defineProperty(this, \"sendTipHandler\", ({\n      token,\n      senderInfo\n    }) => {\n      message.success(`${senderInfo.username} tip ${token === null || token === void 0 ? void 0 : token.toFixed(2)} tokens`, 10);\n      this._audio && this._audio.play();\n    });\n\n    _defineProperty(this, \"initSocketEvent\", () => {\n      this.socket = this.context;\n      const {\n        currentUser\n      } = this.props;\n\n      if (this.socket.connected) {\n        if (currentUser.role === 'performer') {\n          this.socket.on(EVENT.RECEIVED_PRIVATE_CHAT_REQUEST, this.handlePrivateChat);\n          this.socket.on(EVENT.TIPPED, this.sendTipHandler);\n        }\n\n        this.socket.on(EVENT.NOTIFY_READ_MESSAGE, this.handleMessage);\n      } else {\n        this.socket.on('connect', () => {\n          if (currentUser.role === 'performer') {\n            this.socket.on(EVENT.RECEIVED_PRIVATE_CHAT_REQUEST, this.handlePrivateChat);\n            this.socket.on(EVENT.TIPPED, this.sendTipHandler);\n          }\n\n          this.socket.on(EVENT.NOTIFY_READ_MESSAGE, this.handleMessage);\n        });\n      }\n    });\n\n    this.state = {\n      showSearch: false\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      getPerformerCategories: dispatchGetPerformerCategories,\n      getCountries: dispatchGetCountries,\n      getStudioStats: dispatchGetStudioStats,\n      currentUser,\n      loggedIn,\n      tipSound,\n      countNotReadMessage: dispatchCountNotReadMessage\n    } = this.props; // this.socket = this.context;\n\n    dispatchGetPerformerCategories({\n      limit: 0\n    });\n    dispatchGetCountries();\n\n    if (currentUser !== null && currentUser !== void 0 && currentUser._id) {\n      const data = await (await messageService.countTotalNotRead()).data;\n\n      if (data) {\n        dispatchCountNotReadMessage(data.total);\n      }\n    }\n\n    if (currentUser !== null && currentUser !== void 0 && currentUser._id && currentUser.role === 'studio') {\n      dispatchGetStudioStats();\n    }\n\n    if (loggedIn) {\n      this.initSocketEvent();\n      this.checkPermissionAccess();\n    }\n\n    this._audio = new Audio(tipSound);\n    this._audio.volume = 0.5;\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      loggedIn,\n      router: {\n        query: {\n          unauthorized\n        }\n      }\n    } = this.props;\n\n    if (loggedIn && prevProps.loggedIn !== loggedIn) {\n      setTimeout(this.initSocketEvent, 1000);\n    }\n\n    if (unauthorized !== prevProps.router.query.unauthorized) {\n      this.checkPermissionAccess();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.socket) {\n      this.socket.off(EVENT.NOTIFY_READ_MESSAGE);\n      this.socket.off(EVENT.RECEIVED_PRIVATE_CHAT_REQUEST);\n      this.socket.off(EVENT.TIPPED);\n    }\n  }\n\n  onSearchPerformer(key) {\n    this.search(key);\n  }\n\n  onPressEnter(event) {\n    const target = event.currentTarget;\n    const key = target.value;\n    this.search(key);\n  }\n\n  search(key) {\n    Router.push({\n      pathname: '/',\n      query: {\n        q: key\n      }\n    }, `/?q=${key}`);\n  }\n\n  async checkPermissionAccess() {\n    const {\n      loggedIn,\n      router: {\n        query: {\n          unauthorized\n        }\n      }\n    } = this.props;\n\n    if (!loggedIn || !unauthorized) {\n      return;\n    }\n\n    this.beforeLogout();\n  }\n\n  async beforeLogout() {\n    const {\n      logout: dispatchLogout\n    } = this.props;\n    dispatchLogout();\n  }\n\n  render() {\n    const {\n      ui,\n      loggedIn,\n      privateRequests,\n      currentUser,\n      totalNotReadMessage,\n      settings\n    } = this.props;\n    const {\n      showSearch\n    } = this.state;\n    const path = settings[SETTING_KEYS.OPTION_FOR_PRIVATE] === 'webrtc' ? 'webrtc/' : '';\n    const rightContent = loggedIn ? __jsx(React.Fragment, null, __jsx(Link, {\n      href: loggedIn && currentUser.role === 'user' ? '/account/user/funds-tokens' : '#'\n    }, __jsx(Tooltip, {\n      title: `${currentUser.balance && currentUser.balance.toFixed(2) || 0} Tokens`\n    }, __jsx(Button, {\n      style: {\n        margin: '0px 10px',\n        color: '#ff0066'\n      },\n      className: \"btn-tokens\"\n    }, `${roundBalance((currentUser === null || currentUser === void 0 ? void 0 : currentUser.balance) || 0)} Tokens`))), currentUser.role === 'performer' && __jsx(Dropdown, {\n      overlay: __jsx(Menu, null, privateRequests.length > 0 ? privateRequests.map(request => {\n        var _request$user, _request$user2, _request$user3;\n\n        return __jsx(Menu.Item, {\n          onClick: () => message.destroy(request.conversationId)\n        }, __jsx(Link, {\n          href: {\n            pathname: `/live/${path}privatechat`,\n            query: {\n              id: request.conversationId,\n              streamId: request.id\n            }\n          },\n          as: `/live/${path}privatechat/${request.conversationId}?streamId=${request.id}`,\n          key: request.conversationId\n        }, __jsx(\"a\", null, __jsx(Card, {\n          bordered: false,\n          hoverable: false\n        }, __jsx(Card.Meta, {\n          avatar: __jsx(Avatar, {\n            src: ((_request$user = request.user) === null || _request$user === void 0 ? void 0 : _request$user.avatar) || '/default-user-icon.png'\n          }),\n          title: __jsx(React.Fragment, null, __jsx(\"span\", null, (_request$user2 = request.user) === null || _request$user2 === void 0 ? void 0 : _request$user2.username), ' ', \"(\", __jsx(NumberFormat, {\n            value: ((_request$user3 = request.user) === null || _request$user3 === void 0 ? void 0 : _request$user3.balance) || 0,\n            suffix: \" tokens\"\n          }), \")\"),\n          description: formatDate(request === null || request === void 0 ? void 0 : request.createdAt)\n        })))));\n      }) : __jsx(Menu.Item, null, \"There are no private request.\"))\n    }, __jsx(\"span\", {\n      className: \"call-requests\"\n    }, __jsx(Badge, {\n      count: privateRequests.length,\n      showZero: true\n    }, __jsx(BellOutlined, {\n      style: {\n        color: '#ffffff'\n      }\n    })))), __jsx(Dropdown, {\n      overlay: __jsx(Menu, {\n        key: \"menu-right-content\"\n      }, currentUser.role === 'user' && [__jsx(Menu.Item, {\n        key: \"settings-menu-right-content\",\n        onClick: () => Router.push('/account/user/account-settings')\n      }, __jsx(\"span\", null, __jsx(SettingOutlined, {\n        className: \"primary-icon\"\n      }), ' ', \"Profile\")), __jsx(Menu.Item, {\n        key: \"favorite-menu-right-content\",\n        onClick: () => Router.push('/account/user/favorites')\n      }, __jsx(\"span\", null, __jsx(HeartOutlined, {\n        className: \"primary-icon\"\n      }), ' ', \"My Favorites\")), __jsx(Menu.Item, {\n        key: \"funds-tokens-menu-right-content\",\n        onClick: () => Router.push('/account/user/funds-tokens')\n      }, __jsx(\"span\", null, __jsx(\"span\", {\n        className: \"anticon primary-icon\"\n      }, __jsx(FundsIcon, null)), ' ', \"Funds / Tokens\")), __jsx(Menu.Item, {\n        key: \"user-messages-menu-right-content\",\n        onClick: () => Router.push('/messages')\n      }, __jsx(\"span\", null, __jsx(MessageOutlined, {\n        className: \"primary-icon\"\n      }), ' ', \"Messages (\", totalNotReadMessage || 0, \")\"))], currentUser.role === 'performer' && [__jsx(Menu.Item, {\n        key: \"profile-menu-right-content\",\n        onClick: () => Router.push('/account/performer/profile')\n      }, __jsx(\"span\", null, __jsx(UserOutlined, {\n        className: \"primary-icon\"\n      }), ' ', \"Profile\")), __jsx(Menu.Item, {\n        key: \"account-settings-menu-right-content\",\n        onClick: () => Router.push('/account/performer/account-settings')\n      }, __jsx(\"span\", null, __jsx(SettingOutlined, {\n        className: \"primary-icon\"\n      }), ' ', \"Account Settings\")), __jsx(Menu.Item, {\n        key: \"model-messages-menu-right-content\",\n        onClick: () => Router.push('/messages')\n      }, __jsx(\"span\", null, __jsx(MessageOutlined, {\n        className: \"primary-icon\"\n      }), ' ', \"Messages (\", totalNotReadMessage, \")\"))], currentUser.role === 'studio' && [__jsx(Menu.Item, {\n        key: \"account-settings-menu-right-content\",\n        onClick: () => Router.push('/studio/account-settings')\n      }, __jsx(\"span\", null, __jsx(SettingOutlined, {\n        className: \"primary-icon\"\n      }), ' ', \"Account Settings\"))], __jsx(Menu.Item, {\n        key: \"log-out\",\n        onClick: this.beforeLogout.bind(this)\n      }, __jsx(LogoutOutlined, {\n        className: \"primary-icon\"\n      }), ' ', \"Log out\"))\n    }, __jsx(Avatar, {\n      style: {\n        margin: '0 15px',\n        cursor: 'pointer',\n        background: '#ffffff'\n      },\n      src: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.avatar) || '/default-user-icon.png'\n    }))) : __jsx(Button, {\n      className: \"btn-login\",\n      onClick: () => Router.push('/auth/login/user', '/auth/login')\n    }, \"Login\");\n    return __jsx(Layout.Header, {\n      className: \"header\",\n      id: \"layoutHeader\"\n    }, __jsx(\"div\", {\n      className: \"left-container\"\n    }, __jsx(Link, {\n      href: \"/\"\n    }, __jsx(\"a\", {\n      className: \"header-logo\"\n    }, __jsx(\"img\", {\n      src: typeof ui.logo === 'string' && ui.logo.length > 0 ? ui.logo : '/xcam-logo-white.png',\n      alt: \"header-logo\"\n    }))), __jsx(\"div\", {\n      className: \"menu-left-header\"\n    }, __jsx(LeftHeaderContent, this.props))), __jsx(\"div\", {\n      className: \"right-container\"\n    }, __jsx(\"div\", {\n      className: showSearch ? 'search-icon active' : 'search-icon',\n      \"aria-hidden\": true,\n      onClick: () => this.setState({\n        showSearch: !showSearch\n      })\n    }, showSearch ? __jsx(CloseOutlined, null) : __jsx(SearchOutlined, null)), __jsx(\"div\", {\n      className: !showSearch ? 'hide search-bar' : 'search-bar'\n    }, __jsx(Input.Search, {\n      placeholder: \"Enter keyword\",\n      loading: false,\n      allowClear: true,\n      enterButton: true,\n      onPressEnter: this.onPressEnter.bind(this),\n      onSearch: this.onSearchPerformer.bind(this)\n    })), rightContent));\n  }\n\n}\n\nHeader.contextType = SocketContext;\n\nconst userSelecter = state => state.user.current;\n\nconst performerSelecter = state => state.performer.current;\n\nconst studioSelecter = state => state.studio.current;\n\nconst authSelecter = state => state.auth;\n\nconst currentUserSelecter = createSelector(userSelecter, performerSelecter, studioSelecter, authSelecter, (user, performer, studio, auth) => {\n  if (!auth.loggedIn) return {};\n\n  if (user !== null && user !== void 0 && user._id) {\n    return _objectSpread(_objectSpread({}, user), {}, {\n      role: 'user'\n    });\n  }\n\n  if (performer !== null && performer !== void 0 && performer._id) {\n    return _objectSpread(_objectSpread({}, performer), {}, {\n      role: 'performer'\n    });\n  }\n\n  if (studio !== null && studio !== void 0 && studio._id) {\n    return _objectSpread(_objectSpread({}, studio), {}, {\n      role: 'studio'\n    });\n  }\n\n  return {};\n});\nHeader.contextType = SocketContext;\n\nconst mapStateToProps = state => _objectSpread({\n  ui: _objectSpread({}, state.ui),\n  currentUser: currentUserSelecter(state),\n  tipSound: state.settings.tipSound,\n  loggedIn: state.auth.loggedIn,\n  performerCategories: state.performer.categories,\n  totalNotReadMessage: state.message.totalNotReadMessage\n}, state.streaming);\n\nconst mapDispatch = {\n  logout,\n  getPerformerCategories,\n  getCountries,\n  addPrivateRequest,\n  getStudioStats,\n  countNotReadMessage\n};\nexport default connect(mapStateToProps, mapDispatch)(withRouter(Header));","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/components/common/layout/header.tsx"],"names":["React","PureComponent","SettingOutlined","HeartOutlined","MessageOutlined","UserOutlined","LogoutOutlined","SearchOutlined","CloseOutlined","BellOutlined","FundsIcon","Layout","Menu","Avatar","Input","Button","Dropdown","Badge","Card","message","Tooltip","messageService","createSelector","connect","Link","Router","withRouter","logout","getPerformerCategories","getCountries","SocketContext","addPrivateRequest","formatDate","getStudioStats","countNotReadMessage","NumberFormat","SETTING_KEYS","LeftHeaderContent","roundBalance","balance","Math","round","EVENT","RECEIVED_PRIVATE_CHAT_REQUEST","NOTIFY_READ_MESSAGE","TIPPED","Header","constructor","props","event","dispatchCountNotReadMessage","total","data","dispatchAddPrivateRequest","settings","path","OPTION_FOR_PRIVATE","success","content","user","username","duration","key","conversationId","onClick","push","pathname","query","id","destroy","_audio","play","createdAt","Date","token","senderInfo","toFixed","socket","context","currentUser","connected","role","on","handlePrivateChat","sendTipHandler","handleMessage","state","showSearch","componentDidMount","dispatchGetPerformerCategories","dispatchGetCountries","dispatchGetStudioStats","loggedIn","tipSound","limit","_id","countTotalNotRead","initSocketEvent","checkPermissionAccess","Audio","volume","componentDidUpdate","prevProps","router","unauthorized","setTimeout","componentWillUnmount","off","onSearchPerformer","search","onPressEnter","target","currentTarget","value","q","beforeLogout","dispatchLogout","render","ui","privateRequests","totalNotReadMessage","rightContent","margin","color","length","map","request","streamId","avatar","bind","cursor","background","logo","setState","contextType","userSelecter","current","performerSelecter","performer","studioSelecter","studio","authSelecter","auth","currentUserSelecter","mapStateToProps","performerCategories","categories","streaming","mapDispatch"],"mappings":"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","sourcesContent":["/* eslint-disable no-return-assign */\nimport React, { PureComponent } from 'react';\nimport {\n  SettingOutlined,\n  HeartOutlined,\n  MessageOutlined,\n  UserOutlined,\n  LogoutOutlined,\n  SearchOutlined,\n  CloseOutlined,\n  BellOutlined\n} from '@ant-design/icons';\nimport { FundsIcon } from '@components/common/base/icons';\nimport {\n  Layout,\n  Menu,\n  Avatar,\n  Input,\n  Button,\n  Dropdown,\n  Badge,\n  Card,\n  message,\n  Tooltip\n} from 'antd';\nimport { messageService } from 'src/services/index';\nimport { createSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport Router, { withRouter, NextRouter } from 'next/router';\nimport {\n  IUser,\n  IPerformerCategogies,\n  IDataResponse,\n  IPerformer,\n  IStudio,\n  IUIConfig,\n  StreamSettings\n} from 'src/interfaces';\nimport { logout } from '@redux/auth/actions';\nimport { getPerformerCategories } from '@redux/performer/actions';\nimport { getCountries } from '@redux/settings/actions';\nimport { SocketContext } from 'src/socket';\nimport { addPrivateRequest } from '@redux/streaming/actions';\nimport { formatDate } from 'src/lib';\nimport { getStudioStats } from 'src/redux/studio/actions';\nimport { countNotReadMessage } from '@redux/message/actions';\nimport NumberFormat from '@components/common/layout/numberformat';\nimport './header.less';\nimport { SETTING_KEYS } from 'src/constants';\nimport LeftHeaderContent from './left-header-content';\n\nconst roundBalance = (balance: number) => {\n  if (balance < 10000) return Math.round(balance);\n  return '9999+';\n};\n\nconst EVENT = {\n  RECEIVED_PRIVATE_CHAT_REQUEST: 'private-chat-request',\n  NOTIFY_READ_MESSAGE: 'nofify_read_messages_in_conversation',\n  TIPPED: 'tipped'\n};\n\ninterface P {\n  collapsed?: boolean;\n  onCollapseChange?: Function;\n  loggedIn?: boolean;\n  logout?: Function;\n  ui?: IUIConfig;\n  getCountries?: Function;\n  getPerformerCategories?: Function;\n  performerCategories?: IDataResponse<IPerformerCategogies>;\n  searchPerformer?: Function;\n  addPrivateRequest?: Function;\n  countNotReadMessage?: Function;\n  totalNotReadMessage?: number;\n  router: NextRouter;\n  privateRequests?: any;\n  getStudioStats?: Function;\n  role?: string;\n  tipSound?: string;\n  currentUser?: IUser & IPerformer & IStudio;\n  settings?: StreamSettings;\n}\n\ninterface S {\n  showSearch: boolean;\n}\n\nclass Header extends PureComponent<P, S> {\n  private socket: SocketIOClient.Socket;\n\n  private _audio: HTMLAudioElement;\n\n  constructor(props: P) {\n    super(props);\n    this.state = {\n      showSearch: false\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      getPerformerCategories: dispatchGetPerformerCategories,\n      getCountries: dispatchGetCountries,\n      getStudioStats: dispatchGetStudioStats,\n      currentUser,\n      loggedIn,\n      tipSound,\n      countNotReadMessage: dispatchCountNotReadMessage\n    } = this.props;\n    // this.socket = this.context;\n    dispatchGetPerformerCategories({ limit: 0 });\n    dispatchGetCountries();\n    if (currentUser?._id) {\n      const data = await (await messageService.countTotalNotRead()).data;\n      if (data) {\n        dispatchCountNotReadMessage(data.total);\n      }\n    }\n\n    if (currentUser?._id && currentUser.role === 'studio') {\n      dispatchGetStudioStats();\n    }\n\n    if (loggedIn) {\n      this.initSocketEvent();\n      this.checkPermissionAccess();\n    }\n\n    this._audio = new Audio(tipSound);\n    this._audio.volume = 0.5;\n  }\n\n  componentDidUpdate(prevProps: P) {\n    const {\n      loggedIn,\n      router: {\n        query: { unauthorized }\n      }\n    } = this.props;\n    if (loggedIn && prevProps.loggedIn !== loggedIn) {\n      setTimeout(this.initSocketEvent, 1000);\n    }\n\n    if (unauthorized !== prevProps.router.query.unauthorized) {\n      this.checkPermissionAccess();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.socket) {\n      this.socket.off(EVENT.NOTIFY_READ_MESSAGE);\n      this.socket.off(EVENT.RECEIVED_PRIVATE_CHAT_REQUEST);\n      this.socket.off(EVENT.TIPPED);\n    }\n  }\n\n  onSearchPerformer(key: string) {\n    this.search(key);\n  }\n\n  onPressEnter(event) {\n    const target = event.currentTarget as HTMLInputElement;\n    const key = target.value;\n    this.search(key);\n  }\n\n  handleMessage = (event) => {\n    const { countNotReadMessage: dispatchCountNotReadMessage } = this.props;\n    event && dispatchCountNotReadMessage(event.total);\n  };\n\n  handlePrivateChat = (data: { conversationId: string; user: IUser }) => {\n    const { addPrivateRequest: dispatchAddPrivateRequest, settings } = this.props;\n    const path = settings[SETTING_KEYS.OPTION_FOR_PRIVATE] === 'webrtc' ? 'webrtc/' : '';\n    message.success({\n      content: (\n        <span>\n          {data.user.username}\n          {' '}\n          sent you a private chat request.\n        </span>\n      ),\n      duration: 10,\n      key: data.conversationId,\n      onClick: () => {\n        Router.push(\n          {\n            pathname: `/live/${path}privatechat`,\n            query: { id: data.conversationId }\n          },\n          `/live/${path}privatechat/${data.conversationId}`\n        );\n        message.destroy(data.conversationId);\n      }\n    });\n    this._audio && this._audio.play();\n    dispatchAddPrivateRequest({ ...data, createdAt: new Date() });\n  };\n\n  sendTipHandler = ({ token, senderInfo }) => {\n    message.success(\n      `${senderInfo.username} tip ${token?.toFixed(2)} tokens`,\n      10\n    );\n    this._audio && this._audio.play();\n  };\n\n  initSocketEvent = () => {\n    this.socket = this.context;\n    const { currentUser } = this.props;\n    if (this.socket.connected) {\n      if (currentUser.role === 'performer') {\n        this.socket.on(\n          EVENT.RECEIVED_PRIVATE_CHAT_REQUEST,\n          this.handlePrivateChat\n        );\n        this.socket.on(EVENT.TIPPED, this.sendTipHandler);\n      }\n\n      this.socket.on(EVENT.NOTIFY_READ_MESSAGE, this.handleMessage);\n    } else {\n      this.socket.on('connect', () => {\n        if (currentUser.role === 'performer') {\n          this.socket.on(\n            EVENT.RECEIVED_PRIVATE_CHAT_REQUEST,\n            this.handlePrivateChat\n          );\n          this.socket.on(EVENT.TIPPED, this.sendTipHandler);\n        }\n\n        this.socket.on(EVENT.NOTIFY_READ_MESSAGE, this.handleMessage);\n      });\n    }\n  };\n\n  search(key: string) {\n    Router.push({ pathname: '/', query: { q: key } }, `/?q=${key}`);\n  }\n\n  async checkPermissionAccess() {\n    const {\n      loggedIn,\n      router: {\n        query: { unauthorized }\n      }\n    } = this.props;\n    if (!loggedIn || !unauthorized) {\n      return;\n    }\n\n    this.beforeLogout();\n  }\n\n  async beforeLogout() {\n    const { logout: dispatchLogout } = this.props;\n    dispatchLogout();\n  }\n\n  render() {\n    const {\n      ui,\n      loggedIn,\n      privateRequests,\n      currentUser,\n      totalNotReadMessage,\n      settings\n    } = this.props;\n    const { showSearch } = this.state;\n    const path = settings[SETTING_KEYS.OPTION_FOR_PRIVATE] === 'webrtc' ? 'webrtc/' : '';\n    const rightContent = loggedIn ? (\n      <>\n        <Link\n          href={\n            loggedIn && currentUser.role === 'user'\n              ? '/account/user/funds-tokens'\n              : '#'\n          }\n        >\n          <Tooltip\n            title={`${\n              (currentUser.balance && currentUser.balance.toFixed(2)) || 0\n            } Tokens`}\n          >\n            <Button\n              style={{ margin: '0px 10px', color: '#ff0066' }}\n              className=\"btn-tokens\"\n            >\n              {`${roundBalance(currentUser?.balance || 0)} Tokens`}\n            </Button>\n          </Tooltip>\n        </Link>\n        {currentUser.role === 'performer' && (\n          <Dropdown\n            overlay={(\n              <Menu>\n                {privateRequests.length > 0 ? (\n                  privateRequests.map((request) => (\n                    <Menu.Item\n                      onClick={() => message.destroy(request.conversationId)}\n                    >\n                      <Link\n                        href={{\n                          pathname: `/live/${path}privatechat`,\n                          query: {\n                            id: request.conversationId,\n                            streamId: request.id\n                          }\n                        }}\n                        as={`/live/${path}privatechat/${request.conversationId}?streamId=${request.id}`}\n                        key={request.conversationId}\n                      >\n                        <a>\n                          <Card bordered={false} hoverable={false}>\n                            <Card.Meta\n                              avatar={(\n                                <Avatar\n                                  src={\n                                    request.user?.avatar\n                                    || '/default-user-icon.png'\n                                  }\n                                />\n                              )}\n                              title={(\n                                <>\n                                  <span>{request.user?.username}</span>\n                                  {' '}\n                                  (\n                                  <NumberFormat\n                                    value={request.user?.balance || 0}\n                                    suffix=\" tokens\"\n                                  />\n                                  )\n                                </>\n                              )}\n                              description={formatDate(request?.createdAt)}\n                            />\n                          </Card>\n                        </a>\n                      </Link>\n                    </Menu.Item>\n                  ))\n                ) : (\n                  <Menu.Item>There are no private request.</Menu.Item>\n                )}\n              </Menu>\n            )}\n          >\n            <span className=\"call-requests\">\n              <Badge count={privateRequests.length} showZero>\n                <BellOutlined style={{ color: '#ffffff' }} />\n              </Badge>\n            </span>\n          </Dropdown>\n        )}\n        <Dropdown\n          overlay={(\n            <Menu key=\"menu-right-content\">\n              {currentUser.role === 'user' && [\n                <Menu.Item\n                  key=\"settings-menu-right-content\"\n                  onClick={() => Router.push('/account/user/account-settings')}\n                >\n                  <span>\n                    <SettingOutlined className=\"primary-icon\" />\n                    {' '}\n                    Profile\n                  </span>\n                </Menu.Item>,\n                <Menu.Item\n                  key=\"favorite-menu-right-content\"\n                  onClick={() => Router.push('/account/user/favorites')}\n                >\n                  <span>\n                    <HeartOutlined className=\"primary-icon\" />\n                    {' '}\n                    My Favorites\n                  </span>\n                </Menu.Item>,\n                <Menu.Item\n                  key=\"funds-tokens-menu-right-content\"\n                  onClick={() => Router.push('/account/user/funds-tokens')}\n                >\n                  <span>\n                    <span className=\"anticon primary-icon\">\n                      <FundsIcon />\n                    </span>\n                    {' '}\n                    Funds / Tokens\n                  </span>\n                </Menu.Item>,\n                <Menu.Item\n                  key=\"user-messages-menu-right-content\"\n                  onClick={() => Router.push('/messages')}\n                >\n                  <span>\n                    <MessageOutlined className=\"primary-icon\" />\n                    {' '}\n                    Messages (\n                    {totalNotReadMessage || 0}\n                    )\n                  </span>\n                </Menu.Item>\n              ]}\n\n              {currentUser.role === 'performer' && [\n                <Menu.Item\n                  key=\"profile-menu-right-content\"\n                  onClick={() => Router.push('/account/performer/profile')}\n                >\n                  <span>\n                    <UserOutlined className=\"primary-icon\" />\n                    {' '}\n                    Profile\n                  </span>\n                </Menu.Item>,\n                <Menu.Item\n                  key=\"account-settings-menu-right-content\"\n                  onClick={() => Router.push('/account/performer/account-settings')}\n                >\n                  <span>\n                    <SettingOutlined className=\"primary-icon\" />\n                    {' '}\n                    Account\n                    Settings\n                  </span>\n                </Menu.Item>,\n                <Menu.Item\n                  key=\"model-messages-menu-right-content\"\n                  onClick={() => Router.push('/messages')}\n                >\n                  <span>\n                    <MessageOutlined className=\"primary-icon\" />\n                    {' '}\n                    Messages (\n                    {totalNotReadMessage}\n                    )\n                  </span>\n                </Menu.Item>\n              ]}\n              {currentUser.role === 'studio' && [\n                <Menu.Item\n                  key=\"account-settings-menu-right-content\"\n                  onClick={() => Router.push('/studio/account-settings')}\n                >\n                  <span>\n                    <SettingOutlined className=\"primary-icon\" />\n                    {' '}\n                    Account\n                    Settings\n                  </span>\n                </Menu.Item>\n              ]}\n              <Menu.Item key=\"log-out\" onClick={this.beforeLogout.bind(this)}>\n                <LogoutOutlined className=\"primary-icon\" />\n                {' '}\n                Log out\n              </Menu.Item>\n            </Menu>\n          )}\n        >\n          <Avatar\n            style={{\n              margin: '0 15px',\n              cursor: 'pointer',\n              background: '#ffffff'\n            }}\n            src={currentUser?.avatar || '/default-user-icon.png'}\n          />\n        </Dropdown>\n      </>\n    ) : (\n      <Button\n        className=\"btn-login\"\n        onClick={() => Router.push('/auth/login/user', '/auth/login')}\n      >\n        Login\n      </Button>\n    );\n\n\n    return (\n      <Layout.Header className=\"header\" id=\"layoutHeader\">\n        <div className=\"left-container\">\n          <Link href=\"/\">\n            <a className=\"header-logo\">\n              <img\n                src={\n                  typeof ui.logo === 'string' && ui.logo.length > 0\n                    ? ui.logo\n                    : '/xcam-logo-white.png'\n                }\n                alt=\"header-logo\"\n              />\n            </a>\n          </Link>\n          <div className=\"menu-left-header\">\n            <LeftHeaderContent {...this.props} />\n          </div>\n        </div>\n        <div className=\"right-container\">\n          <div\n            className={showSearch ? 'search-icon active' : 'search-icon'}\n            aria-hidden\n            onClick={() => this.setState({ showSearch: !showSearch })}\n          >\n            {showSearch ? <CloseOutlined /> : <SearchOutlined />}\n          </div>\n          <div className={!showSearch ? 'hide search-bar' : 'search-bar'}>\n            <Input.Search\n              placeholder=\"Enter keyword\"\n              loading={false}\n              allowClear\n              enterButton\n              onPressEnter={this.onPressEnter.bind(this)}\n              onSearch={this.onSearchPerformer.bind(this)}\n            />\n          </div>\n          {rightContent}\n        </div>\n      </Layout.Header>\n    );\n  }\n}\n\nHeader.contextType = SocketContext;\n\nconst userSelecter = (state) => state.user.current;\nconst performerSelecter = (state) => state.performer.current;\nconst studioSelecter = (state) => state.studio.current;\nconst authSelecter = (state) => state.auth;\n\nconst currentUserSelecter = createSelector(\n  userSelecter,\n  performerSelecter,\n  studioSelecter,\n  authSelecter,\n  (user, performer, studio, auth) => {\n    if (!auth.loggedIn) return {};\n\n    if (user?._id) {\n      return { ...user, role: 'user' };\n    }\n\n    if (performer?._id) {\n      return { ...performer, role: 'performer' };\n    }\n\n    if (studio?._id) {\n      return { ...studio, role: 'studio' };\n    }\n\n    return {};\n  }\n);\n\nHeader.contextType = SocketContext;\n\nconst mapStateToProps = (state: any) => ({\n  ui: { ...state.ui },\n  currentUser: currentUserSelecter(state),\n  tipSound: state.settings.tipSound,\n  loggedIn: state.auth.loggedIn,\n  performerCategories: state.performer.categories,\n  totalNotReadMessage: state.message.totalNotReadMessage,\n  ...state.streaming\n});\nconst mapDispatch = {\n  logout,\n  getPerformerCategories,\n  getCountries,\n  addPrivateRequest,\n  getStudioStats,\n  countNotReadMessage\n};\nexport default connect(mapStateToProps, mapDispatch)(withRouter(Header));\n"]},"metadata":{},"sourceType":"module"}