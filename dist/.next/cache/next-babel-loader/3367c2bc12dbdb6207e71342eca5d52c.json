{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable dot-notation */\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Row, Col, message } from 'antd';\nimport { HLS, WEBRTC } from 'src/interfaces';\nimport { connect } from 'react-redux';\nimport { streamService, performerService, messageService } from 'src/services';\nimport { SocketContext, Event } from 'src/socket';\nimport nextCookie from 'next-cookies';\nimport ModalBuyAssets from '@components/performer-assets/common/modal-buy-assets';\nimport PerformerProduct from '@components/performer-assets/product-carousel';\nimport PerformerVideo from '@components/performer-assets/video-carousel';\nimport PerformerGallery from '@components/performer-assets/gallery-carousel';\nimport ProfileCard from '@components/performer/profile-card';\nimport PerformerCarousel from '@components/performer/performer-carousel';\nimport Header from '@components/streaming/header';\nimport Footer from '@components/streaming/footer';\nimport Router from 'next/router';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport LiveSubscriber from 'src/components/streaming/subscriber';\nimport { loadStreamMessages, getStreamConversationSuccess, receiveStreamMessageSuccess, resetStreamMessage, resetAllStreamMessage } from '@redux/stream-chat/actions';\nimport { getPerformerDetails, updatePerformerAsset } from '@redux/performer/actions';\nimport { updateCurrentUserBalance } from '@redux/user/actions';\nimport { getResponseError } from '@lib/utils';\nimport { StatusCodes } from 'http-status-codes';\nimport './index.less';\nimport { currentUserSelecter } from '@redux/selectors';\nimport { getPoster } from '@lib/stream'; // eslint-disable-next-line no-shadow\n\nvar PERFORMER_ASSETS_TYPE; // eslint-disable-next-line no-shadow\n\n(function (PERFORMER_ASSETS_TYPE) {\n  PERFORMER_ASSETS_TYPE[\"PRODUCT\"] = \"product\";\n  PERFORMER_ASSETS_TYPE[\"GALLERY\"] = \"gallery\";\n  PERFORMER_ASSETS_TYPE[\"VIDEO\"] = \"video\";\n})(PERFORMER_ASSETS_TYPE || (PERFORMER_ASSETS_TYPE = {}));\n\nvar STREAM_EVENT; // eslint-disable-next-line no-shadow\n\n(function (STREAM_EVENT) {\n  STREAM_EVENT[\"JOIN_BROADCASTER\"] = \"join-broadcaster\";\n  STREAM_EVENT[\"MODEL_LEFT\"] = \"model-left\";\n  STREAM_EVENT[\"ROOM_INFORMATIOM_CHANGED\"] = \"public-room-changed\";\n  STREAM_EVENT[\"MODEL_UPDATE_STREAMING_STATUS\"] = \"modelUpdateStreamingStatus\";\n  STREAM_EVENT[\"USER_LEFT_ROOM\"] = \"USER_LEFT_ROOM\";\n})(STREAM_EVENT || (STREAM_EVENT = {}));\n\nvar EVENT;\n\n(function (EVENT) {\n  EVENT[\"BLOCK_USERS\"] = \"nofify_users_block\";\n})(EVENT || (EVENT = {}));\n\nvar LivePage = /*#__PURE__*/function (_PureComponent) {\n  _inherits(LivePage, _PureComponent);\n\n  var _super = _createSuper(LivePage);\n\n  function LivePage(props) {\n    var _this;\n\n    _classCallCheck(this, LivePage);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"subscriberRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"buyAssetsRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"socket\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onbeforeunload\", function () {\n      _this.leavePublicRoom();\n    });\n\n    _this.state = {\n      total: 0,\n      members: []\n    };\n    return _this;\n  }\n\n  _createClass(LivePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscriberRef = /*#__PURE__*/React.createRef();\n      this.buyAssetsRef = /*#__PURE__*/React.createRef();\n      var _this$props = this.props,\n          performer = _this$props.performer,\n          user = _this$props.user;\n\n      if (!performer) {\n        Router.push('/');\n        return;\n      }\n\n      if (user && user.role === 'performer') {\n        Router.push('/live');\n        return;\n      }\n\n      if (user && user.role === 'studio') {\n        Router.push('/studio/account-settings');\n        return;\n      }\n\n      this.socket = this.context;\n      Router.events.on('routeChangeStart', this.onbeforeunload);\n      window.addEventListener('beforeunload', this.onbeforeunload);\n      this.initProfilePage();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          performer = _this$props2.performer,\n          data = _this$props2.data,\n          activeConversation = _this$props2.activeConversation;\n\n      if (data && data.isBlocked) {\n        Router.push('/403');\n        return;\n      }\n\n      if (performer && performer._id !== prevProps.performer._id) {\n        this.initProfilePage();\n      }\n\n      if (prevProps.activeConversation !== activeConversation) {\n        var _prevProps$activeConv;\n\n        ((_prevProps$activeConv = prevProps.activeConversation) === null || _prevProps$activeConv === void 0 ? void 0 : _prevProps$activeConv._id) && this.socket.emit('public-stream/leave', {\n          conversationId: prevProps.activeConversation._id\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('beforeunload', this.onbeforeunload);\n      Router.events.off('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(_ref) {\n      var _activeConversation$d;\n\n      var total = _ref.total,\n          members = _ref.members,\n          conversationId = _ref.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n        this.setState({\n          total: total,\n          members: members\n        });\n      }\n    }\n  }, {\n    key: \"onBoughtAssetSuccess\",\n    value: function onBoughtAssetSuccess(type, id, payload) {\n      var dispatchUpdatePerformerAsset = this.props.updatePerformerAsset;\n      dispatchUpdatePerformerAsset({\n        type: type,\n        id: id,\n        payload: payload\n      });\n    }\n  }, {\n    key: \"joinPeformerPublicRoom\",\n    value: function () {\n      var _joinPeformerPublicRoom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this$props3, performer, dispatchLoadStreamMessages, dispatchGetStreamConversationSuccess, resp, conversation, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props3 = this.props, performer = _this$props3.performer, dispatchLoadStreamMessages = _this$props3.loadStreamMessages, dispatchGetStreamConversationSuccess = _this$props3.getStreamConversationSuccess;\n\n                if (!performer) {\n                  _context.next = 25;\n                  break;\n                }\n\n                _context.prev = 2;\n                _context.next = 5;\n                return messageService.findPublicConversationPerformer(performer._id);\n\n              case 5:\n                resp = _context.sent;\n                conversation = resp.data;\n\n                if (!(conversation && conversation._id)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                dispatchGetStreamConversationSuccess({\n                  data: conversation\n                });\n                dispatchLoadStreamMessages({\n                  conversationId: conversation._id,\n                  limit: 25,\n                  offset: 0,\n                  type: conversation.type\n                });\n                this.socket = this.context;\n                this.socket && this.socket.emit('public-stream/join', {\n                  conversationId: conversation._id\n                });\n                _context.next = 15;\n                break;\n\n              case 14:\n                throw new Promise(function (resolve) {\n                  return resolve('No available broadcast. Try again later');\n                });\n\n              case 15:\n                _context.next = 23;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](2);\n                _context.next = 21;\n                return Promise.resolve(_context.t0);\n\n              case 21:\n                error = _context.sent;\n                message.error(getResponseError(error));\n\n              case 23:\n                _context.prev = 23;\n                return _context.finish(23);\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 17, 23, 25]]);\n      }));\n\n      function joinPeformerPublicRoom() {\n        return _joinPeformerPublicRoom.apply(this, arguments);\n      }\n\n      return joinPeformerPublicRoom;\n    }()\n  }, {\n    key: \"initProfilePage\",\n    value: function initProfilePage() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          performer = _this$props4.performer,\n          streamingStatus = _this$props4.performer.streamingStatus,\n          dispatchGetPerformerDetail = _this$props4.getPerformerDetails;\n      setTimeout(function () {\n        _this2.subscriberRef.current && _this2.subscriberRef.current.resetPlaybackVideo(getPoster(streamingStatus));\n      }, 100);\n      dispatchGetPerformerDetail(performer);\n      this.inscreaseView();\n      this.joinPeformerPublicRoom();\n    }\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n        var performerId, _this$props5, optionForBroadcast, performer, resp, sessionId, _this$subscriberRef$c, _this$subscriberRef$c2, error;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                performerId = _ref2.performerId;\n                _context2.prev = 1;\n                _this$props5 = this.props, optionForBroadcast = _this$props5.settings.optionForBroadcast, performer = _this$props5.performer;\n\n                if (!(performer._id !== performerId)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                _context2.next = 7;\n                return streamService.joinPublicChat(performerId);\n\n              case 7:\n                resp = _context2.sent;\n                sessionId = resp.data.sessionId;\n\n                if (optionForBroadcast === HLS) {\n                  (_this$subscriberRef$c = this.subscriberRef.current) === null || _this$subscriberRef$c === void 0 ? void 0 : _this$subscriberRef$c.playHLS(sessionId);\n                } else if (optionForBroadcast === WEBRTC) {\n                  (_this$subscriberRef$c2 = this.subscriberRef.current) === null || _this$subscriberRef$c2 === void 0 ? void 0 : _this$subscriberRef$c2.play(sessionId);\n                }\n\n                _context2.next = 18;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](1);\n                _context2.next = 16;\n                return Promise.resolve(_context2.t0);\n\n              case 16:\n                error = _context2.sent;\n                message.error(getResponseError(error));\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 12]]);\n      }));\n\n      function subscribe(_x) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n  }, {\n    key: \"leavePublicRoom\",\n    value: function leavePublicRoom() {\n      var _activeConversation$d2;\n\n      var _this$props6 = this.props,\n          activeConversation = _this$props6.activeConversation,\n          dispatchResetStreamMessage = _this$props6.resetStreamMessage;\n      dispatchResetStreamMessage();\n\n      if (this.socket && activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d2 = activeConversation.data) !== null && _activeConversation$d2 !== void 0 && _activeConversation$d2._id) {\n        this.socket.emit('public-stream/leave', {\n          conversationId: activeConversation.data._id\n        });\n      }\n\n      this.setState({\n        total: 0,\n        members: []\n      });\n    }\n  }, {\n    key: \"modelLeftHandler\",\n    value: function modelLeftHandler(_ref3) {\n      var _this$subscriberRef$c3;\n\n      var performerId = _ref3.performerId;\n      var performer = this.props.performer;\n\n      if (performerId !== performer._id) {\n        return;\n      }\n\n      (_this$subscriberRef$c3 = this.subscriberRef.current) === null || _this$subscriberRef$c3 === void 0 ? void 0 : _this$subscriberRef$c3.stop();\n      message.info('Model has left the room!');\n    }\n  }, {\n    key: \"showAssetToBuy\",\n    value: function () {\n      var _showAssetToBuy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(type, item) {\n        var isBought, isSale, name, itemType;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                isBought = item.isBought, isSale = item.isSale, name = item.name, itemType = item.type;\n                _context3.t0 = type;\n                _context3.next = _context3.t0 === 'gallery' ? 4 : _context3.t0 === 'product' ? 8 : 12;\n                break;\n\n              case 4:\n                if (!(isBought || !isSale)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                Router.push({\n                  pathname: '/photos',\n                  query: {\n                    data: JSON.stringify(item),\n                    id: item._id\n                  }\n                }, \"/photos/\".concat(item._id));\n                return _context3.abrupt(\"return\");\n\n              case 7:\n                return _context3.abrupt(\"break\", 13);\n\n              case 8:\n                if (!(isBought && itemType === 'digital')) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                message.info(\"You have purchased \".concat(name, \" already. Please check your email!\"));\n                return _context3.abrupt(\"return\");\n\n              case 11:\n                return _context3.abrupt(\"break\", 13);\n\n              case 12:\n                return _context3.abrupt(\"break\", 13);\n\n              case 13:\n                this.buyAssetsRef.showModalBuyAssets(item, type);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function showAssetToBuy(_x2, _x3) {\n        return _showAssetToBuy.apply(this, arguments);\n      }\n\n      return showAssetToBuy;\n    }()\n  }, {\n    key: \"userBlockHandler\",\n    value: function userBlockHandler(_ref4) {\n      var performerId = _ref4.performerId;\n      var performer = this.props.performer;\n\n      if (performerId === performer._id) {\n        Router.push('/403');\n      }\n    }\n  }, {\n    key: \"modelUpdateStreamingStatusHander\",\n    value: function modelUpdateStreamingStatusHander(_ref5) {\n      var _this3 = this;\n\n      var status = _ref5.status,\n          id = _ref5.id;\n      var performer = this.props.performer;\n\n      if (id === performer._id) {\n        setTimeout(function () {\n          _this3.subscriberRef.current && _this3.subscriberRef.current.resetPlaybackVideo(getPoster(status));\n        }, 100);\n      }\n    }\n  }, {\n    key: \"inscreaseView\",\n    value: function () {\n      var _inscreaseView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var id;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                id = this.props.performer._id;\n                _context4.next = 4;\n                return performerService.increaseView(id);\n\n              case 4:\n                _context4.next = 8;\n                break;\n\n              case 6:\n                _context4.prev = 6;\n                _context4.t0 = _context4[\"catch\"](0);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 6]]);\n      }));\n\n      function inscreaseView() {\n        return _inscreaseView.apply(this, arguments);\n      }\n\n      return inscreaseView;\n    }()\n  }, {\n    key: \"userLeftRoomHandle\",\n    value: function userLeftRoomHandle(_ref6) {\n      var _activeConversation$d3;\n\n      var username = _ref6.username,\n          conversationId = _ref6.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d3 = activeConversation.data) === null || _activeConversation$d3 === void 0 ? void 0 : _activeConversation$d3._id) === conversationId) {\n        var _this$state = this.state,\n            total = _this$state.total,\n            members = _this$state.members;\n        var leftMemberIndex = members.findIndex(function (m) {\n          return m.username === username;\n        });\n\n        if (leftMemberIndex > -1) {\n          this.setState({\n            total: total - 1,\n            members: members.splice(leftMemberIndex, 1)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props7 = this.props,\n          performer = _this$props7.performer,\n          data = _this$props7.data,\n          searching = _this$props7.searching,\n          success = _this$props7.success,\n          products = _this$props7.products,\n          videos = _this$props7.videos,\n          galleries = _this$props7.galleries,\n          ui = _this$props7.ui;\n      var _this$state2 = this.state,\n          members = _this$state2.members,\n          total = _this$state2.total;\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"\".concat(ui === null || ui === void 0 ? void 0 : ui.siteName, \" | \").concat(performer === null || performer === void 0 ? void 0 : performer.username))), __jsx(Event, {\n        event: STREAM_EVENT.JOIN_BROADCASTER,\n        handler: this.subscribe.bind(this)\n      }), __jsx(Event, {\n        event: STREAM_EVENT.MODEL_LEFT,\n        handler: this.modelLeftHandler.bind(this)\n      }), __jsx(Event, {\n        event: STREAM_EVENT.USER_LEFT_ROOM,\n        handler: this.userLeftRoomHandle.bind(this)\n      }), __jsx(Event, {\n        event: STREAM_EVENT.ROOM_INFORMATIOM_CHANGED,\n        handler: this.onChange.bind(this)\n      }), __jsx(Event, {\n        event: EVENT.BLOCK_USERS,\n        handler: this.userBlockHandler.bind(this)\n      }), __jsx(Event, {\n        event: STREAM_EVENT.MODEL_UPDATE_STREAMING_STATUS,\n        handler: this.modelUpdateStreamingStatusHander.bind(this)\n      }), __jsx(\"div\", {\n        className: \"profile-page\"\n      }, __jsx(ModalBuyAssets // eslint-disable-next-line no-return-assign\n      , _extends({\n        ref: function ref(_ref7) {\n          return _this4.buyAssetsRef = _ref7;\n        },\n        onSucess: this.onBoughtAssetSuccess.bind(this)\n      }, this.props)), __jsx(Header, this.props), __jsx(Row, {\n        className: \"streaming-container\"\n      }, __jsx(Col, {\n        md: 13,\n        xs: 24\n      }, __jsx(LiveSubscriber, {\n        ref: this.subscriberRef,\n        configs: {\n          isPlayMode: true\n        }\n      }), __jsx(Footer, this.props)), __jsx(Col, {\n        md: 11,\n        xs: 24\n      }, __jsx(ChatBox, _extends({}, this.props, {\n        members: members,\n        totalParticipant: total\n      })))), __jsx(Row, {\n        gutter: [{\n          sm: 25,\n          xs: 0\n        }, {\n          sm: 10,\n          xs: 25\n        }]\n      }, __jsx(Col, {\n        xs: {\n          span: 24\n        },\n        lg: {\n          span: 8\n        }\n      }, __jsx(ProfileCard, {\n        placeholderAvatarUrl: ui === null || ui === void 0 ? void 0 : ui.placeholderAvatarUrl,\n        performer: data,\n        searching: searching,\n        success: success\n      })), __jsx(Col, {\n        xs: {\n          span: 24\n        },\n        lg: {\n          span: 16\n        }\n      }, __jsx(PerformerProduct, {\n        performer: data,\n        products: products,\n        searching: searching,\n        success: success,\n        purchaseProduct: this.showAssetToBuy.bind(this, 'product')\n      }), __jsx(PerformerVideo, {\n        performer: data,\n        videos: videos,\n        searching: searching,\n        success: success\n      }), __jsx(PerformerGallery, {\n        performer: data,\n        galleries: galleries,\n        searching: searching,\n        success: success,\n        purchaseGallery: this.showAssetToBuy.bind(this, 'gallery')\n      }), __jsx(PerformerCarousel, _extends({\n        performers: data && data.relatedPerformers\n      }, this.props))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref8) {\n        var ctx, query, _nextCookie, token, headers, resp, performer;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                ctx = _ref8.ctx;\n                _context5.prev = 1;\n                query = ctx.query;\n\n                if (!(true && query.performer)) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", {\n                  performer: JSON.parse(query.performer)\n                });\n\n              case 5:\n                _nextCookie = nextCookie(ctx), token = _nextCookie.token;\n                headers = {\n                  Authorization: token\n                };\n                _context5.next = 9;\n                return performerService.details(query.username, headers);\n\n              case 9:\n                resp = _context5.sent;\n                performer = resp.data;\n\n                if (!performer.isBlocked) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                throw StatusCodes.FORBIDDEN;\n\n              case 13:\n                return _context5.abrupt(\"return\", {\n                  performer: performer\n                });\n\n              case 16:\n                _context5.prev = 16;\n                _context5.t0 = _context5[\"catch\"](1);\n\n                if (!true) {\n                  _context5.next = 20;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", Router.push('/'));\n\n              case 20:\n                ctx.res.writeHead && ctx.res.writeHead(302, {\n                  Location: '/'\n                });\n                ctx.res.end && ctx.res.end();\n                return _context5.abrupt(\"return\", {});\n\n              case 23:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[1, 16]]);\n      }));\n\n      function getInitialProps(_x4) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return LivePage;\n}(PureComponent);\n\n_defineProperty(LivePage, \"authenticate\", false);\n\nLivePage.contextType = SocketContext;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread(_objectSpread(_objectSpread({\n    ui: state.ui\n  }, state.streaming), state.performer.performerDetails), {}, {\n    user: currentUserSelecter(state),\n    loggedIn: state.auth.loggedIn,\n    activeConversation: state.streamMessage.activeConversation\n  });\n};\n\nvar mapDispatch = {\n  loadStreamMessages: loadStreamMessages,\n  getStreamConversationSuccess: getStreamConversationSuccess,\n  receiveStreamMessageSuccess: receiveStreamMessageSuccess,\n  resetStreamMessage: resetStreamMessage,\n  resetAllStreamMessage: resetAllStreamMessage,\n  updateCurrentUserBalance: updateCurrentUserBalance,\n  getPerformerDetails: getPerformerDetails,\n  updatePerformerAsset: updatePerformerAsset\n};\nexport default connect(mapStateToProps, mapDispatch)(LivePage);","map":null,"metadata":{},"sourceType":"module"}