{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/account/user/account-settings/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { message, Tabs } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport { connect } from 'react-redux';\nimport UserProfile from '@components/user/profile';\nimport Head from 'next/head';\nimport { settingService } from 'src/services/setting.service';\nimport { userService } from 'src/services/user.service';\nimport { updateUser } from 'src/redux/user/actions';\nimport { updatePassword } from 'src/redux/auth/actions';\nimport { getResponseError } from '@lib/utils';\nimport Router from 'next/router';\nimport PasswordChange from '@components/auth/password-change';\nimport './index.less';\n\nclass UserProfilePage extends PureComponent {\n  static getInitialProps({\n    ctx\n  }) {\n    const {\n      query\n    } = ctx;\n    return {\n      action: query.action\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      countries: [],\n      uploadedAvatar: '',\n      avatarUploading: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      action\n    } = this.props;\n    if (!action || action === 'account-information') this.getCountries();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      success,\n      updateUserError,\n      auth,\n      action\n    } = this.props;\n    const {\n      countries\n    } = this.state;\n\n    if (prevProps.success !== success && success) {\n      message.success('Update Profile Success.');\n    }\n\n    if (prevProps.updateUserError !== updateUserError && updateUserError) {\n      message.error(getResponseError(updateUserError));\n    }\n\n    if (prevProps.auth.updatePassword.success !== auth.updatePassword.success && auth.updatePassword.success) {\n      message.success('Update Password Success.');\n    }\n\n    if (prevProps.auth.updatePassword.error !== auth.updatePassword.error && auth.updatePassword.error) {\n      message.error(getResponseError(auth.updatePassword.error));\n    }\n\n    if (!countries.length && action === 'account-information') {\n      this.getCountries();\n    }\n  }\n\n  onFinish(data) {\n    const {\n      user,\n      updateUser: dispatchUpdateUser\n    } = this.props;\n    dispatchUpdateUser(_objectSpread(_objectSpread({}, user), data));\n  }\n\n  onChangeAvatar({\n    file\n  }) {\n    if (file.status === 'uploading') {\n      this.setState({\n        avatarUploading: true\n      });\n      return;\n    }\n\n    if (file.status === 'done') {\n      this.setState({\n        avatarUploading: false\n      });\n\n      if (file.response) {\n        this.setState({\n          uploadedAvatar: file.response.data.url\n        });\n      }\n    }\n  }\n\n  onTabsChange(key) {\n    Router.push({\n      pathname: '/account/user/account-settings',\n      query: {\n        action: key\n      }\n    }, `/account/user/account-settings?action=${key}`, {\n      shallow: false\n    });\n  }\n\n  onPasswordChange(data) {\n    const {\n      updatePassword: dispatchUpdatePassword\n    } = this.props;\n    dispatchUpdatePassword(data);\n  }\n\n  async getCountries() {\n    try {\n      const countries = await settingService.getCountries();\n      this.setState({\n        countries: countries.data\n      });\n    } catch (error) {\n      message.error(getResponseError(error));\n    }\n  }\n\n  render() {\n    const {\n      user,\n      action,\n      auth,\n      userUpdating\n    } = this.props;\n    const {\n      countries,\n      uploadedAvatar,\n      avatarUploading\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, `${user.username} Profile`)), __jsx(\"div\", {\n      className: \"account-setting-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, __jsx(PageHeader, {\n      title: \"Account Settings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }), __jsx(Tabs, {\n      activeKey: action || 'account-information',\n      style: {\n        padding: '0 24px'\n      },\n      size: \"large\",\n      onChange: this.onTabsChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, __jsx(Tabs.TabPane, {\n      tab: \"Account Information\",\n      key: \"account-information\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, __jsx(UserProfile, _extends({}, user, {\n      onFinish: this.onFinish.bind(this),\n      countries: countries,\n      onChangeAvatar: this.onChangeAvatar.bind(this),\n      uploadAvatarUrl: userService.getAvatarUploadUrl(),\n      uploadedAvatar: uploadedAvatar,\n      avatarUploading: avatarUploading,\n      loading: userUpdating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }))), __jsx(Tabs.TabPane, {\n      key: \"change-password\",\n      tab: \"Change Password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, __jsx(PasswordChange, _extends({\n      onFinish: this.onPasswordChange.bind(this)\n    }, auth.updatePassword, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 15\n      }\n    }))))));\n  }\n\n}\n\n_defineProperty(UserProfilePage, \"authenticate\", true);\n\n_defineProperty(UserProfilePage, \"layout\", 'primary');\n\nconst mapStateToProps = state => ({\n  user: state.user.current,\n  userUpdating: state.user.userUpdating,\n  success: state.user.updateUserSuccess,\n  updateUserError: state.user.updateUserError,\n  auth: state.auth\n});\n\nconst mapDispatch = {\n  updateUser,\n  updatePassword\n};\nexport default connect(mapStateToProps, mapDispatch)(UserProfilePage);","map":null,"metadata":{},"sourceType":"module"}