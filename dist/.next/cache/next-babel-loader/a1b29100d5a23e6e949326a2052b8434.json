{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { sendStreamMessage } from '@redux/stream-chat/actions';\nimport { Input, message } from 'antd';\nimport { SendOutlined } from '@ant-design/icons';\nimport Emotions from './emotions';\nimport './Compose.less';\n\nclass Compose extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"uploadRef\", void 0);\n\n    _defineProperty(this, \"_input\", void 0);\n\n    _defineProperty(this, \"state\", {\n      text: ''\n    });\n\n    _defineProperty(this, \"onKeyDown\", evt => {\n      if (evt.keyCode === 13) {\n        this.send();\n      }\n    });\n\n    _defineProperty(this, \"onChange\", evt => {\n      this.setText(evt.target.value);\n    });\n\n    _defineProperty(this, \"onEmojiClick\", emojiObject => {\n      const {\n        text\n      } = this.state;\n      this.setText(text + emojiObject.emoji);\n    });\n\n    this.uploadRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    if (!this.uploadRef) this.uploadRef = /*#__PURE__*/React.createRef();\n    if (!this._input) this._input = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidUpdate(previousProps) {\n    const {\n      sendMessage\n    } = this.props;\n\n    if (sendMessage.success !== previousProps.sendMessage.success) {\n      this.setText('');\n      this._input && this._input.focus();\n    }\n  }\n\n  setText(text) {\n    this.setState({\n      text\n    });\n  }\n\n  send() {\n    const {\n      text\n    } = this.state;\n    const {\n      loggedIn\n    } = this.props;\n\n    if (!loggedIn) {\n      message.error('Please login');\n      return;\n    }\n\n    if (!text) {\n      return;\n    }\n\n    const {\n      conversation,\n      isPublic,\n      sendStreamMessage: dispatchSendStreamMessage\n    } = this.props;\n    const {\n      _id,\n      type\n    } = conversation;\n    dispatchSendStreamMessage({\n      conversationId: _id,\n      data: {\n        text\n      },\n      type,\n      isPublic\n    });\n  }\n\n  render() {\n    const {\n      loggedIn\n    } = this.props;\n    const {\n      text\n    } = this.state;\n    const {\n      sendMessage,\n      conversation\n    } = this.props;\n    if (!this.uploadRef) this.uploadRef = /*#__PURE__*/React.createRef();\n    if (!this._input) this._input = /*#__PURE__*/React.createRef();\n    return __jsx(\"div\", {\n      className: \"compose\",\n      hidden: !loggedIn || !conversation._id\n    }, __jsx(Input, {\n      value: text,\n      className: \"compose-input\",\n      placeholder: \"Enter message here.\",\n      onKeyDown: this.onKeyDown,\n      onChange: this.onChange,\n      disabled: sendMessage.sending,\n      ref: c => this._input = c\n    }), __jsx(\"div\", {\n      className: \"grp-icons\"\n    }, __jsx(SendOutlined, {\n      onClick: this.send.bind(this),\n      style: {\n        fontSize: '25px',\n        marginRight: '10px',\n        color: '#fe26b3'\n      }\n    }), __jsx(\"div\", {\n      className: \"grp-emotions\"\n    }, __jsx(\"img\", {\n      src: \"/emotion-ico.png\",\n      width: \"25px\",\n      alt: \"\"\n    }), __jsx(Emotions, {\n      onEmojiClick: this.onEmojiClick.bind(this)\n    }))));\n  }\n\n}\n\nconst mapStates = state => ({\n  loggedIn: state.auth.loggedIn,\n  sendMessage: state.streamMessage.sendMessage\n});\n\nconst mapDispatch = {\n  sendStreamMessage\n};\nexport default connect(mapStates, mapDispatch)(Compose);","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/components/stream-chat/Compose.tsx"],"names":["React","PureComponent","connect","sendStreamMessage","Input","message","SendOutlined","Emotions","Compose","constructor","props","text","evt","keyCode","send","setText","target","value","emojiObject","state","emoji","uploadRef","createRef","componentDidMount","_input","componentDidUpdate","previousProps","sendMessage","success","focus","setState","loggedIn","error","conversation","isPublic","dispatchSendStreamMessage","_id","type","conversationId","data","render","onKeyDown","onChange","sending","c","bind","fontSize","marginRight","color","onEmojiClick","mapStates","auth","streamMessage","mapDispatch"],"mappings":";;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,MAA/B;AACA,SACEC,YADF,QAEO,mBAFP;AAGA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,gBAAP;;AAUA,MAAMC,OAAN,SAAsBP,aAAtB,CAA4C;AAK1CQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB;;AAAA;;AAAA,mCAKX;AAAEC,MAAAA,IAAI,EAAE;AAAR,KALW;;AAAA,uCAoBNC,GAAD,IAAS;AACnB,UAAIA,GAAG,CAACC,OAAJ,KAAgB,EAApB,EAAwB;AACtB,aAAKC,IAAL;AACD;AACF,KAxBkB;;AAAA,sCA0BPF,GAAD,IAAS;AAClB,WAAKG,OAAL,CAAaH,GAAG,CAACI,MAAJ,CAAWC,KAAxB;AACD,KA5BkB;;AAAA,0CA8BHC,WAAD,IAAiB;AAC9B,YAAM;AAAEP,QAAAA;AAAF,UAAW,KAAKQ,KAAtB;AACA,WAAKJ,OAAL,CAAaJ,IAAI,GAAGO,WAAW,CAACE,KAAhC;AACD,KAjCkB;;AAEjB,SAAKC,SAAL,gBAAiBrB,KAAK,CAACsB,SAAN,EAAjB;AACD;;AAIDC,EAAAA,iBAAiB,GAAG;AAClB,QAAI,CAAC,KAAKF,SAAV,EAAqB,KAAKA,SAAL,gBAAiBrB,KAAK,CAACsB,SAAN,EAAjB;AACrB,QAAI,CAAC,KAAKE,MAAV,EAAkB,KAAKA,MAAL,gBAAcxB,KAAK,CAACsB,SAAN,EAAd;AACnB;;AAEDG,EAAAA,kBAAkB,CAACC,aAAD,EAAwB;AACxC,UAAM;AAAEC,MAAAA;AAAF,QAAkB,KAAKjB,KAA7B;;AACA,QAAIiB,WAAW,CAACC,OAAZ,KAAwBF,aAAa,CAACC,WAAd,CAA0BC,OAAtD,EAA+D;AAC7D,WAAKb,OAAL,CAAa,EAAb;AACA,WAAKS,MAAL,IAAe,KAAKA,MAAL,CAAYK,KAAZ,EAAf;AACD;AACF;;AAiBDd,EAAAA,OAAO,CAACJ,IAAD,EAAO;AACZ,SAAKmB,QAAL,CAAc;AAAEnB,MAAAA;AAAF,KAAd;AACD;;AAEDG,EAAAA,IAAI,GAAG;AACL,UAAM;AAAEH,MAAAA;AAAF,QAAW,KAAKQ,KAAtB;AACA,UAAM;AAAEY,MAAAA;AAAF,QAAe,KAAKrB,KAA1B;;AACA,QAAI,CAACqB,QAAL,EAAe;AACb1B,MAAAA,OAAO,CAAC2B,KAAR,CAAc,cAAd;AACA;AACD;;AAED,QAAI,CAACrB,IAAL,EAAW;AACT;AACD;;AAED,UAAM;AAAEsB,MAAAA,YAAF;AAAgBC,MAAAA,QAAhB;AAA0B/B,MAAAA,iBAAiB,EAAEgC;AAA7C,QAA2E,KAAKzB,KAAtF;AACA,UAAM;AAAE0B,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAgBJ,YAAtB;AACAE,IAAAA,yBAAyB,CAAC;AACxBG,MAAAA,cAAc,EAAEF,GADQ;AAExBG,MAAAA,IAAI,EAAE;AACJ5B,QAAAA;AADI,OAFkB;AAKxB0B,MAAAA,IALwB;AAMxBH,MAAAA;AANwB,KAAD,CAAzB;AAQD;;AAEDM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAET,MAAAA;AAAF,QAAe,KAAKrB,KAA1B;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,KAAKQ,KAAtB;AACA,UAAM;AAAEQ,MAAAA,WAAF;AAAeM,MAAAA;AAAf,QAAgC,KAAKvB,KAA3C;AACA,QAAI,CAAC,KAAKW,SAAV,EAAqB,KAAKA,SAAL,gBAAiBrB,KAAK,CAACsB,SAAN,EAAjB;AACrB,QAAI,CAAC,KAAKE,MAAV,EAAkB,KAAKA,MAAL,gBAAcxB,KAAK,CAACsB,SAAN,EAAd;AAClB,WACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAyB,MAAA,MAAM,EAAE,CAACS,QAAD,IAAa,CAACE,YAAY,CAACG;AAA5D,OACE,MAAC,KAAD;AACE,MAAA,KAAK,EAAEzB,IADT;AAEE,MAAA,SAAS,EAAC,eAFZ;AAGE,MAAA,WAAW,EAAC,qBAHd;AAIE,MAAA,SAAS,EAAE,KAAK8B,SAJlB;AAKE,MAAA,QAAQ,EAAE,KAAKC,QALjB;AAME,MAAA,QAAQ,EAAEf,WAAW,CAACgB,OANxB;AAOE,MAAA,GAAG,EAAGC,CAAD,IAAQ,KAAKpB,MAAL,GAAcoB;AAP7B,MADF,EAUE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,MAAC,YAAD;AAAc,MAAA,OAAO,EAAE,KAAK9B,IAAL,CAAU+B,IAAV,CAAe,IAAf,CAAvB;AAA6C,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE,MAAZ;AAAoBC,QAAAA,WAAW,EAAE,MAAjC;AAAyCC,QAAAA,KAAK,EAAE;AAAhD;AAApD,MADF,EAEE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AAAK,MAAA,GAAG,EAAC,kBAAT;AAA4B,MAAA,KAAK,EAAC,MAAlC;AAAyC,MAAA,GAAG,EAAC;AAA7C,MADF,EAEE,MAAC,QAAD;AAAU,MAAA,YAAY,EAAE,KAAKC,YAAL,CAAkBJ,IAAlB,CAAuB,IAAvB;AAAxB,MAFF,CAFF,CAVF,CADF;AAoBD;;AA9FyC;;AAiG5C,MAAMK,SAAS,GAAI/B,KAAD,KAAiB;AACjCY,EAAAA,QAAQ,EAAEZ,KAAK,CAACgC,IAAN,CAAWpB,QADY;AAEjCJ,EAAAA,WAAW,EAAER,KAAK,CAACiC,aAAN,CAAoBzB;AAFA,CAAjB,CAAlB;;AAKA,MAAM0B,WAAW,GAAG;AAAElD,EAAAA;AAAF,CAApB;AACA,eAAeD,OAAO,CAACgD,SAAD,EAAYG,WAAZ,CAAP,CAAgC7C,OAAhC,CAAf","sourcesContent":["/* eslint-disable no-return-assign */\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { sendStreamMessage } from '@redux/stream-chat/actions';\nimport { Input, message } from 'antd';\nimport {\n  SendOutlined\n} from '@ant-design/icons';\nimport Emotions from './emotions';\nimport './Compose.less';\n\ninterface IProps {\n  loggedIn: boolean;\n  sendStreamMessage: Function;\n  sendMessage: any;\n  conversation: any;\n  isPublic?: boolean;\n}\n\nclass Compose extends PureComponent<IProps> {\n  uploadRef: any;\n\n  _input: any;\n\n  constructor(props) {\n    super(props);\n    this.uploadRef = React.createRef();\n  }\n\n  state = { text: '' };\n\n  componentDidMount() {\n    if (!this.uploadRef) this.uploadRef = React.createRef();\n    if (!this._input) this._input = React.createRef();\n  }\n\n  componentDidUpdate(previousProps: IProps) {\n    const { sendMessage } = this.props;\n    if (sendMessage.success !== previousProps.sendMessage.success) {\n      this.setText('');\n      this._input && this._input.focus();\n    }\n  }\n\n  onKeyDown = (evt) => {\n    if (evt.keyCode === 13) {\n      this.send();\n    }\n  };\n\n  onChange = (evt) => {\n    this.setText(evt.target.value);\n  };\n\n  onEmojiClick = (emojiObject) => {\n    const { text } = this.state;\n    this.setText(text + emojiObject.emoji);\n  }\n\n  setText(text) {\n    this.setState({ text });\n  }\n\n  send() {\n    const { text } = this.state;\n    const { loggedIn } = this.props;\n    if (!loggedIn) {\n      message.error('Please login');\n      return;\n    }\n\n    if (!text) {\n      return;\n    }\n\n    const { conversation, isPublic, sendStreamMessage: dispatchSendStreamMessage } = this.props;\n    const { _id, type } = conversation;\n    dispatchSendStreamMessage({\n      conversationId: _id,\n      data: {\n        text\n      },\n      type,\n      isPublic\n    });\n  }\n\n  render() {\n    const { loggedIn } = this.props;\n    const { text } = this.state;\n    const { sendMessage, conversation } = this.props;\n    if (!this.uploadRef) this.uploadRef = React.createRef();\n    if (!this._input) this._input = React.createRef();\n    return (\n      <div className=\"compose\" hidden={!loggedIn || !conversation._id}>\n        <Input\n          value={text}\n          className=\"compose-input\"\n          placeholder=\"Enter message here.\"\n          onKeyDown={this.onKeyDown}\n          onChange={this.onChange}\n          disabled={sendMessage.sending}\n          ref={(c) => (this._input = c)}\n        />\n        <div className=\"grp-icons\">\n          <SendOutlined onClick={this.send.bind(this)} style={{ fontSize: '25px', marginRight: '10px', color: '#fe26b3' }} />\n          <div className=\"grp-emotions\">\n            <img src=\"/emotion-ico.png\" width=\"25px\" alt=\"\" />\n            <Emotions onEmojiClick={this.onEmojiClick.bind(this)} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStates = (state: any) => ({\n  loggedIn: state.auth.loggedIn,\n  sendMessage: state.streamMessage.sendMessage\n});\n\nconst mapDispatch = { sendStreamMessage };\nexport default connect(mapStates, mapDispatch)(Compose);\n"]},"metadata":{},"sourceType":"module"}