{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { TOKEN } from 'src/services/api-request';\nimport { omit } from 'lodash';\nimport { isUrl } from '@lib/string';\nimport cookie from 'js-cookie';\nimport { APIRequest } from './api-request';\nexport var VideoService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(VideoService, _APIRequest);\n\n  var _super = _createSuper(VideoService);\n\n  function VideoService() {\n    _classCallCheck(this, VideoService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VideoService, [{\n    key: \"search\",\n    value: function search(params) {\n      return this.get(this.buildUrl('/user/performer-assets/videos/search', params));\n    }\n  }, {\n    key: \"purchased\",\n    value: function purchased(params) {\n      return this.get(this.buildUrl('/purchased-items/user/videos', params));\n    }\n  }, {\n    key: \"details\",\n    value: function details(id, headers) {\n      return this.get(\"/performer/performer-assets/videos/\".concat(id, \"/view\"), headers);\n    }\n  }, {\n    key: \"myVideos\",\n    value: function myVideos(query) {\n      return this.get(this.buildUrl('/performer/performer-assets/videos/search', query));\n    }\n  }, {\n    key: \"removeMyVideo\",\n    value: function removeMyVideo(id) {\n      return this.del(\"/performer/performer-assets/videos/\".concat(id));\n    }\n  }, {\n    key: \"create\",\n    value: function create(url, data) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        onProgress: function onProgress() {}\n      };\n      return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.upload.addEventListener('progress', function (event) {\n          if (event.lengthComputable) {\n            options.onProgress({\n              percentage: event.loaded / event.total * 100\n            });\n          }\n        });\n        req.addEventListener('load', function () {\n          var success = req.status >= 200 && req.status < 300;\n          var response = req.response;\n\n          if (!success) {\n            return reject(response);\n          }\n\n          return resolve(response);\n        });\n        req.upload.addEventListener('error', function () {\n          reject(req.response);\n        });\n        var formData = new FormData(); // formData.append('file', file, file.name);\n\n        if (data.video) {\n          var video = data.video.file.originFileObj;\n          formData.append('video', video, video.name);\n        }\n\n        if (data.trailer) {\n          var trailer = data.trailer.file.originFileObj;\n          formData.append('trailer', trailer, trailer.name);\n        }\n\n        if (data.thumbnail) {\n          var thumbnail = data.thumbnail.file.originFileObj;\n          formData.append('thumbnail', thumbnail, thumbnail.name);\n        }\n\n        Object.keys(omit(data, ['video', 'thumbnail', 'trailer'])).forEach(function (v) {\n          formData.append(v, data[v]);\n        });\n        req.responseType = 'json';\n        req.open('POST', isUrl(url) ? url : \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT).concat(url));\n        var token = cookie.get(TOKEN);\n\n        if (token) {\n          req.setRequestHeader('Authorization', token);\n        }\n\n        req.send(formData);\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(url, data) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        onProgress: function onProgress() {}\n      };\n      return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.upload.addEventListener('progress', function (event) {\n          if (event.lengthComputable) {\n            options.onProgress({\n              percentage: event.loaded / event.total * 100\n            });\n          }\n        });\n        req.addEventListener('load', function () {\n          var success = req.status >= 200 && req.status < 300;\n          var response = req.response;\n\n          if (!success) {\n            return reject(response);\n          }\n\n          return resolve(response);\n        });\n        req.upload.addEventListener('error', function () {\n          reject(req.response);\n        });\n        var formData = new FormData(); // formData.append('file', file, file.name);\n\n        if (data.video && data.video.file) {\n          var video = data.video.file.originFileObj;\n          formData.append('video', video, video.name);\n        }\n\n        if (data.trailer && data.trailer.file) {\n          var trailer = data.trailer.file.originFileObj;\n          formData.append('trailer', trailer, trailer.name);\n        }\n\n        if (data.thumbnail && data.thumbnail.file) {\n          var thumbnail = data.thumbnail.file.originFileObj;\n          formData.append('thumbnail', thumbnail, thumbnail.name);\n        }\n\n        Object.keys(omit(data, ['video', 'thumbnail', 'trailer'])).forEach(function (v) {\n          formData.append(v, data[v]);\n        });\n        req.responseType = 'json';\n        req.open('PUT', isUrl(url) ? url : \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT).concat(url));\n        var token = cookie.get(TOKEN);\n\n        if (token) {\n          req.setRequestHeader('Authorization', token);\n        }\n\n        req.send(formData);\n      });\n    }\n  }, {\n    key: \"increaseView\",\n    value: function increaseView(id) {\n      return this.post(\"/user/performer-assets/videos/\".concat(id, \"/inc-view\"));\n    } // update(videoId, performerId, data) {\n    //   return this.put(`/performer/performer-assets/videos/${videoId}`, {\n    //     ...data,\n    //     performerId\n    //   });\n    // }\n\n  }, {\n    key: \"userFindVideoById\",\n    value: function userFindVideoById(id) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get(\"/user/performer-assets/videos/\".concat(id), headers);\n    }\n  }]);\n\n  return VideoService;\n}(APIRequest);\nexport var videoService = new VideoService();","map":null,"metadata":{},"sourceType":"module"}