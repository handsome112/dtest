{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { addPrivateRequest, accessPrivateRequest, updateLiveStreamSettings } from './actions';\nvar initialState = {\n  privateRequests: [],\n  settings: {\n    viewerURL: '',\n    publisherURL: '',\n    optionForBroadcast: 'hls',\n    optionForPrivate: 'hls',\n    secureOption: false\n  }\n};\nvar reducers = [{\n  on: addPrivateRequest,\n  reducer: function reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      privateRequests: [].concat(_toConsumableArray(state.privateRequests), [action.payload])\n    });\n  }\n}, {\n  on: accessPrivateRequest,\n  reducer: function reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      privateRequests: state.privateRequests.filter(function (p) {\n        return p.conversationId !== action.payload;\n      })\n    });\n  }\n}, {\n  on: updateLiveStreamSettings,\n  reducer: function reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      settings: _objectSpread(_objectSpread({}, state.settings), action.payload)\n    });\n  }\n}];\nexport default merge({}, createReducers('streaming', [reducers], initialState));","map":null,"metadata":{},"sourceType":"module"}