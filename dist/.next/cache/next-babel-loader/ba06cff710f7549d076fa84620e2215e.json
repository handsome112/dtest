{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport { Form, Input, Button, DatePicker, Select, Upload, Alert } from 'antd';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { updateUIValue } from 'src/redux/ui/actions';\nimport { getResponseError } from '@lib/utils';\nimport { UploadOutlined } from '@ant-design/icons';\nimport Link from 'next/link';\nimport { usernamePatternRule } from '@lib/rules';\n\nconst RegisterFrom = ({\n  onFinish,\n  submiting,\n  countries,\n  error,\n  singularTextModel\n}) => {\n  const [idVerification, setIdVerification] = React.useState('');\n  const [documentVerification, setDocumentVerification] = React.useState('');\n  const [form] = Form.useForm();\n  return __jsx(Form, {\n    layout: \"vertical\",\n    form: form,\n    onFinish: onFinish,\n    name: \"performerRegisterForm\",\n    initialValues: {\n      country: undefined,\n      gender: 'female'\n    }\n  }, __jsx(\"h1\", null, singularTextModel || 'Performer', ' ', \"register\"), __jsx(Form.Item, {\n    name: \"dateOfBirth\",\n    rules: [{\n      required: true,\n      message: 'Please input your date of birth!'\n    }, {\n      validator: (rule, value) => {\n        const years = moment().diff(value, 'years');\n\n        if (years >= 18) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject(new Error('Minimum of 18 years'));\n      }\n    }]\n  }, __jsx(DatePicker, {\n    placeholder: \"Date of Birth\"\n  })), __jsx(Form.Item, {\n    name: \"firstName\",\n    rules: [{\n      required: true,\n      message: 'Please input your first name!'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input your first name!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"First Name\"\n  })), __jsx(Form.Item, {\n    name: \"lastName\",\n    rules: [{\n      required: true,\n      message: 'Please input your last name!'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input your last name!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"Last Name\"\n  })), __jsx(Form.Item, {\n    name: \"email\",\n    rules: [{\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }, {\n      required: true,\n      message: 'Please input your E-mail!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"E-mail\"\n  })), __jsx(Form.Item, {\n    name: \"username\",\n    rules: [{\n      required: true,\n      message: 'Username is required!'\n    }, usernamePatternRule]\n  }, __jsx(Input, {\n    placeholder: \"Username\"\n  })), __jsx(Form.Item, {\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: 'Please input your password!'\n    }, {\n      min: 6,\n      max: 14,\n      message: 'Passoword should be 6-14 characters'\n    }],\n    hasFeedback: true\n  }, __jsx(Input.Password, {\n    placeholder: \"Password\"\n  })), __jsx(Form.Item, {\n    name: \"confirm\",\n    dependencies: ['password'],\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue('password') === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject(new Error('The two passwords that you entered do not match!'));\n      }\n\n    })]\n  }, __jsx(Input.Password, {\n    placeholder: \"Confirm Password\"\n  })), __jsx(Form.Item, {\n    name: \"country\",\n    rules: [{\n      required: true,\n      message: 'Please input your country!'\n    }]\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: \"Country\"\n  }, countries.length > 0 && countries.map(country => __jsx(Select.Option, {\n    value: country.name,\n    key: country.code\n  }, country.name)))), __jsx(Form.Item, {\n    name: \"gender\"\n  }, __jsx(Select, {\n    placeholder: \"Gender\"\n  }, __jsx(Select.Option, {\n    value: \"male\",\n    key: \"male\"\n  }, \"Male\"), __jsx(Select.Option, {\n    value: \"female\",\n    key: \"female\"\n  }, \"Female\"), __jsx(Select.Option, {\n    value: \"transgender\",\n    key: \"transgender\"\n  }, \"Transgender\"))), __jsx(Form.Item, {\n    name: \"documentVerification\",\n    rules: [{\n      required: true,\n      message: 'Verification document is required!'\n    }]\n  }, __jsx(Upload, {\n    showUploadList: false,\n    customRequest: () => true,\n    fileList: [],\n    onChange: files => setDocumentVerification(files.file.name)\n  }, __jsx(Button, null, __jsx(UploadOutlined, null), ' ', \"Upload Document For Verification\"), documentVerification && __jsx(\"span\", {\n    className: \"file-name\"\n  }, documentVerification))), __jsx(Form.Item, {\n    name: \"idVerification\",\n    rules: [{\n      required: true,\n      message: 'Id Verifycation is required'\n    }]\n  }, __jsx(Upload, {\n    showUploadList: false,\n    customRequest: () => true,\n    fileList: [],\n    onChange: files => setIdVerification(files.file.name)\n  }, __jsx(Button, null, __jsx(UploadOutlined, null), \"Upload ID For Verification\"), idVerification && __jsx(\"span\", {\n    className: \"file-name\"\n  }, idVerification))), error && __jsx(Form.Item, null, __jsx(Alert, {\n    description: getResponseError(error),\n    type: \"error\",\n    message: \"Error\"\n  })), __jsx(Form.Item, null, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: submiting,\n    loading: submiting,\n    className: \"btn-submit\"\n  }, \"Register new account\")), __jsx(Form.Item, null, \"Are you a\", ' ', singularTextModel || 'Performer', \"?\", ' ', __jsx(Link, {\n    href: \"/auth/login/performer\"\n  }, __jsx(\"a\", null, \"Login\"))), __jsx(Form.Item, null, \"Want to be a member?\", ' ', __jsx(Link, {\n    href: \"/auth/register/user\"\n  }, __jsx(\"a\", null, \"Signup now\"))));\n};\n\nconst mapStateToProps = state => _objectSpread({}, state.ui);\n\nconst mapDispatchs = {\n  updateUIValue\n};\nexport default connect(mapStateToProps, mapDispatchs)(RegisterFrom);","map":null,"metadata":{},"sourceType":"module"}