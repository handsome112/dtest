{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable camelcase */\nimport React, { PureComponent } from 'react';\nimport withAntmedia from 'src/antmedia';\nimport { Button, message } from 'antd';\nimport Router from 'next/router';\nimport { SocketContext } from 'src/socket';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport { streamService } from 'src/services';\nimport { getResponseError } from '@lib/utils';\nimport videojs from 'video.js';\nimport { isMobile } from 'react-device-detect';\nimport './group-streaming-container.less';\nconst STREAM_JOINED = 'private-stream/streamJoined';\nconst STREAM_LEAVED = 'private-stream/streamLeaved';\nconst JOINED_THE_ROOM = 'JOINED_THE_ROOM';\nconst MODEL_LEFT_ROOM = 'MODEL_LEFT_ROOM';\n\nclass GroupStreamingContainer extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"publisher\", void 0);\n\n    _defineProperty(this, \"players\", {});\n\n    _defineProperty(this, \"getLiveStreamOrVodURLInterval\", {});\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      this.leaveStream();\n    });\n\n    this.state = {\n      streamId: null,\n      streamList: [],\n      conversationId: null,\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      initWebRTCAdaptor\n    } = this.props;\n    this.socket = this.context;\n    this.socket.on(JOINED_THE_ROOM, data => {\n      const {\n        streamId,\n        streamList,\n        conversationId: _id\n      } = data;\n      const {\n        conversationId\n      } = this.state;\n      if (_id !== conversationId) return;\n      this.setState({\n        streamId,\n        streamList\n      });\n      initWebRTCAdaptor(this.handelWebRTCAdaptorCallback.bind(this));\n\n      if (streamList.length) {\n        streamList.forEach(id => {\n          const player = document.createElement('video');\n          const container = document.getElementById('group-video-container');\n          player.setAttribute('id', id);\n          player.setAttribute('class', 'video-js broadcaster');\n          player.setAttribute('autoplay', 'autoplay');\n          container.append(player);\n          this.players[id] = videojs(id, {\n            height: 100,\n            width: container.offsetWidth / 4,\n            controls: true,\n            controlBar: {\n              playToggle: false,\n              liveDisplay: false\n            }\n          }, () => this.onReadyCallback(id));\n        });\n      }\n    });\n    this.socket.on(STREAM_LEAVED, data => {\n      const {\n        conversationId,\n        streamId,\n        streamList\n      } = this.state;\n      if (conversationId !== data.conversationId || streamId === data.streamId) return;\n      this.setState({\n        streamList: streamList.filter(id => id !== data.streamId)\n      });\n\n      if (this.players[data.streamId]) {\n        this.players[data.streamId].dispose();\n        delete this.players[data.streamId];\n      }\n    });\n    this.socket.on(STREAM_JOINED, data => {\n      const {\n        streamList,\n        streamId,\n        conversationId\n      } = this.state;\n      if (conversationId !== data.conversationId) return;\n\n      if (streamId !== data.streamId) {\n        this.setState({\n          streamList: [...streamList, data.streamId]\n        });\n        const player = document.createElement('video');\n        const container = document.getElementById('group-video-container');\n        player.setAttribute('id', data.streamId);\n        player.setAttribute('class', 'video-js broadcaster');\n        player.setAttribute('autoplay', 'autoplay');\n        container.append(player);\n        this.players[data.streamId] = videojs(data.streamId, {\n          height: 100,\n          width: container.offsetWidth / 4,\n          muted: data.streamId === streamId,\n          controls: true,\n          controlBar: {\n            playToggle: false,\n            liveDisplay: false\n          }\n        }, () => this.onReadyCallback(data.streamId));\n      }\n    });\n    this.socket.on(MODEL_LEFT_ROOM, data => {\n      const {\n        conversationId\n      } = this.state;\n      if (conversationId !== data.conversationId) return;\n      message.error('Model has left the room. You will be redirected in 10 seconds');\n      setTimeout(() => {\n        Router.push('/');\n      }, 10000);\n    });\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n    window.addEventListener('beforeunload', this.onbeforeunload);\n  }\n\n  async onReadyCallback(streamId) {\n    try {\n      const {\n        settings,\n        configs\n      } = this.props;\n      const appName = configs.appName || settings.AntMediaAppname;\n      const src = await streamService.getLiveStreamOrVodURL({\n        appName,\n        settings,\n        streamId\n      });\n\n      if (!src) {\n        return;\n      }\n\n      this.players[streamId].addClass('vjs-waiting');\n      this.players[streamId].on('ended', () => this.ended(streamId));\n      this.players[streamId].on('error', () => this.ended(streamId));\n      setTimeout(() => {\n        if (!this.players[streamId]) return;\n        this.players[streamId].src({\n          type: 'application/x-mpegURL',\n          src\n        });\n        this.players[streamId].play();\n      }, 10 * 1000);\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n    }\n  }\n\n  async handelWebRTCAdaptorCallback(info, obj) {\n    const {\n      webRTCAdaptor,\n      settings,\n      configs\n    } = this.props;\n    const {\n      conversationId,\n      streamId\n    } = this.state;\n\n    if (info === WEBRTC_ADAPTOR_INFORMATIONS.INITIALIZED) {\n      const token = await streamService.getPublishToken({\n        streamId,\n        settings\n      });\n      webRTCAdaptor.publish(streamId, token);\n    } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_STARTED) {\n      if (!isMobile) {\n        const container = document.getElementById('group-video-container');\n        const player = videojs(configs.localVideoId, {\n          liveui: true,\n          controls: true,\n          muted: true,\n          height: 100,\n          width: container.offsetWidth / 4,\n          bigPlayButton: false,\n          controlBar: {\n            playToggle: false,\n            currentTimeDisplay: false,\n            fullscreenToggle: false,\n            pictureInPictureToggle: false,\n            volumePanel: false\n          }\n        });\n        player.on('error', () => {\n          player.error(null);\n        });\n        player.one('play', () => {\n          this.publisher = player;\n        });\n      }\n\n      this.socket.emit('private-stream/join', {\n        conversationId,\n        streamId: obj.streamId\n      });\n      this.setState({\n        loading: false\n      });\n    } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_FINISHED) {\n      if (this.publisher) {\n        this.publisher.dispose();\n        this.publisher = undefined;\n      }\n\n      this.socket.emit('private-stream/leave', {\n        conversationId,\n        streamId: obj.streamId\n      });\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  start(sessionId, conversationId) {\n    this.setState({\n      conversationId\n    });\n  }\n\n  leaveStream() {\n    const {\n      publish_started\n    } = this.props;\n    const {\n      conversationId,\n      streamId\n    } = this.state;\n    Object.keys(this.getLiveStreamOrVodURLInterval).forEach(id => {\n      clearInterval(this.getLiveStreamOrVodURLInterval[id]);\n      delete this.getLiveStreamOrVodURLInterval[id];\n    });\n\n    if (this.publisher) {\n      this.publisher.dispose();\n      this.publisher = undefined;\n    }\n\n    Object.keys(this.players).forEach(id => {\n      if (this.players[id]) {\n        this.players[id].dispose();\n        this.players[id] = undefined;\n      }\n    });\n    this.socket.off(JOINED_THE_ROOM);\n    this.socket.off(STREAM_JOINED);\n    this.socket.off(STREAM_LEAVED);\n    this.socket.off(MODEL_LEFT_ROOM);\n\n    if (streamId && publish_started) {\n      this.socket.emit('private-stream/leave', {\n        conversationId,\n        streamId\n      });\n    }\n\n    this.setState({\n      streamId: null,\n      streamList: [],\n      conversationId: null\n    });\n  }\n\n  async ended(streamId) {\n    this.players[streamId] && this.players[streamId].error(null);\n    const {\n      settings\n    } = this.props;\n    const src = await streamService.getLiveStreamOrVodURL({\n      streamId,\n      settings,\n      appName: settings.AntMediaAppname\n    });\n\n    if (src) {\n      this.getLiveStreamOrVodURLInterval[streamId] = setInterval(() => {\n        fetch(src, {\n          method: 'HEAD'\n        }).then(() => {\n          if (this.players[streamId]) {\n            this.players[streamId].src({\n              type: 'application/x-mpegURL',\n              src\n            });\n            this.players[streamId].play();\n          }\n\n          this.getLiveStreamOrVodURLInterval[streamId] && clearInterval(this.getLiveStreamOrVodURLInterval[streamId]);\n        });\n      }, 5000);\n    }\n  }\n\n  leave() {\n    if (false) {\n      window.location.reload();\n    }\n  }\n\n  stop() {\n    const {\n      leaveSession\n    } = this.props;\n    leaveSession();\n  }\n\n  render() {\n    const {\n      onClick,\n      initialized,\n      configs,\n      publish_started\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return __jsx(React.Fragment, null, !initialized ? __jsx(Button, {\n      type: \"primary\",\n      onClick: () => onClick(),\n      loading: loading,\n      block: true\n    }, \"Start Streaming\") : __jsx(Button, {\n      type: \"primary\",\n      onClick: this.leave.bind(this),\n      block: true,\n      disabled: loading\n    }, \"Stop Streaming\"), __jsx(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      className: \"stream-group\"\n    }, __jsx(\"div\", {\n      id: \"group-video-container\"\n    }, __jsx(\"video\", {\n      id: configs.localVideoId,\n      className: \"video-js broadcaster\",\n      hidden: !publish_started,\n      muted: true,\n      controls: true,\n      autoPlay: true,\n      playsInline: true\n    }))));\n  }\n\n}\n\nGroupStreamingContainer.contextType = SocketContext;\nexport default withAntmedia(GroupStreamingContainer);","map":null,"metadata":{},"sourceType":"module"}