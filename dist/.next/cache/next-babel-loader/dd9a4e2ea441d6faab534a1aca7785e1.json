{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable camelcase */\nimport { PureComponent } from 'react';\nimport withAntmedia from 'src/antmedia';\nimport { message } from 'antd';\nimport { getResponseError } from '@lib/utils';\nimport { streamService } from 'src/services';\nimport './index.less';\nimport videojs from 'video.js';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport Router from 'next/router';\nimport { isMobile } from 'react-device-detect';\nimport MicControlsPlugin from 'src/videojs/mic-controls/plugin';\nimport { LocalStream } from 'src/antmedia/LocalStream';\n\nclass Publisher extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"publisher\", void 0);\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      if (this.publisher) {\n        this.publisher.dispose();\n        this.publisher = undefined;\n      }\n    });\n  }\n\n  componentDidMount() {\n    videojs.registerPlugin('webRTCMicControlsPlugin', MicControlsPlugin);\n    Router.events.on('routeChangeStart', this.onbeforeunload); // window.addEventListener('beforeunload', this.onbeforeunload);\n  }\n\n  componentWillUnmount() {\n    Router.events.off('routeChangeStart', this.onbeforeunload); // window.removeEventListener('beforeunload', this.onbeforeunload);\n  }\n\n  async startPublishing(idOfStream) {\n    const {\n      webRTCAdaptor,\n      leaveSession,\n      settings\n    } = this.props;\n\n    try {\n      const token = await streamService.getPublishToken({\n        streamId: idOfStream,\n        settings\n      });\n      webRTCAdaptor.publish(idOfStream, token);\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n      leaveSession();\n    }\n  }\n\n  publish(streamId) {\n    const {\n      initialized\n    } = this.props;\n    initialized && this.startPublishing(streamId);\n  }\n\n  start() {\n    const {\n      initWebRTCAdaptor,\n      initialized,\n      publish_started\n    } = this.props;\n    const {\n      onTrack\n    } = this.props;\n\n    if (initialized && !publish_started && onTrack) {\n      this.startPublishing(onTrack);\n    }\n\n    initWebRTCAdaptor(this.handelWebRTCAdaptorCallback.bind(this));\n  }\n\n  handelWebRTCAdaptorCallback(info) {\n    if (info === WEBRTC_ADAPTOR_INFORMATIONS.INITIALIZED) {\n      if (!isMobile) {\n        const {\n          configs,\n          muteLocalMic,\n          unmuteLocalMic\n        } = this.props;\n        const player = videojs(configs.localVideoId, {\n          liveui: false,\n          controls: true,\n          muted: true,\n          bigPlayButton: false,\n          controlBar: {\n            playToggle: false,\n            currentTimeDisplay: false,\n            volumePanel: false\n          }\n        });\n        player.on('error', () => {\n          player.error(null);\n        });\n        player.one('play', () => {\n          // eslint-disable-next-line dot-notation\n          player['webRTCMicControlsPlugin']({\n            muteLocalMic,\n            unmuteLocalMic,\n            isMicMuted: false\n          });\n          this.publisher = player;\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      initialized,\n      publish_started,\n      classNames,\n      configs: {\n        localVideoId\n      }\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(LocalStream, {\n      id: localVideoId,\n      hidden: !initialized,\n      className: classNames\n    })), publish_started && __jsx(\"div\", {\n      className: \"text-center\"\n    }, __jsx(\"span\", {\n      className: \"publishing\"\n    }, \"Publishing\")));\n  }\n\n}\n\nexport default withAntmedia(Publisher);","map":null,"metadata":{},"sourceType":"module"}