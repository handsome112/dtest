{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { getConversations, getConversationsSuccess, getConversationsFail, searchConversations, searchConversationsSuccess, searchConversationsFail, setActiveConversationSuccess, fetchingMessage, loadMessagesSuccess, sendMessage, sendMessageSuccess, sendMessageFail, getConversationDetailSuccess, receiveMessageSuccess, readMessages, sentFileSuccess, loadMoreMessagesSuccess, deactiveConversation, resetMessageState, updateLastMessage, countNotReadMessage } from './actions';\nconst initialConversationState = {\n  list: {\n    requesting: false,\n    error: null,\n    data: [],\n    total: 0,\n    success: false\n  },\n  mapping: {},\n  activeConversation: {}\n};\nconst initialMessageState = {\n  // conversationId => { fetching: boolean, items: [] }\n  conversationMap: {},\n  sendMessage: {},\n  receiveMessage: {},\n  totalNotReadMessage: 0\n};\nconst conversationReducer = [{\n  on: resetMessageState,\n\n  reducer(state) {\n    let {\n      list,\n      mapping,\n      activeConversation\n    } = state;\n    list = {\n      requesting: false,\n      error: null,\n      data: [],\n      total: 0,\n      success: false\n    };\n    mapping = {};\n    activeConversation = {};\n    return _objectSpread(_objectSpread({}, state), {}, {\n      list,\n      mapping,\n      activeConversation\n    });\n  }\n\n}, {\n  on: getConversations,\n\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n\n    nextState.list.requesting = true;\n    return _objectSpread({}, nextState);\n  }\n\n}, {\n  on: getConversationsSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    const {\n      list,\n      mapping\n    } = nextState;\n    const {\n      data: items,\n      total\n    } = data.payload;\n    const Ids = items.map(c => c._id);\n    list.data = list.data.concat(Ids);\n    list.total = total;\n    list.success = true;\n    list.requesting = false;\n    list.error = false;\n    items.forEach(c => {\n      mapping[c._id] = c;\n    });\n    return _objectSpread({}, nextState);\n  }\n\n}, {\n  on: getConversationsFail,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list: {\n        requesting: false,\n        error: data.payload,\n        data: [],\n        total: 0,\n        success: false\n      },\n      mapping: {},\n      activeConversation: {}\n    });\n  }\n\n}, {\n  on: searchConversations,\n\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list: {\n        requesting: true,\n        error: null,\n        data: [],\n        total: 0,\n        success: false\n      },\n      mapping: {},\n      activeConversation: {}\n    });\n  }\n\n}, {\n  on: searchConversationsSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    const {\n      list,\n      mapping\n    } = nextState;\n    const {\n      data: items,\n      total\n    } = data.payload;\n    const Ids = items.map(c => c._id);\n    list.data = Ids;\n    list.total = total;\n    list.success = true;\n    list.requesting = false;\n    list.error = false;\n    items.forEach(c => {\n      mapping[c._id] = c;\n    });\n    return _objectSpread({}, nextState);\n  }\n\n}, {\n  on: searchConversationsFail,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list: {\n        requesting: false,\n        error: data.payload,\n        data: [],\n        total: 0,\n        success: false\n      },\n      mapping: {},\n      activeConversation: {}\n    });\n  }\n\n}, {\n  on: setActiveConversationSuccess,\n\n  reducer(state, data) {\n    const conversation = data.payload;\n    const list = state.list.data;\n    const {\n      mapping\n    } = state;\n    const check = list.find(c => c === conversation._id);\n\n    if (!check) {\n      list.unshift(conversation._id);\n      mapping[conversation._id] = conversation;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: conversation\n    });\n  }\n\n}, {\n  on: getConversationDetailSuccess,\n\n  reducer(state, data) {\n    const {\n      list,\n      mapping\n    } = state;\n    const conversation = data.payload;\n\n    if (!list.data.includes(conversation._id)) {\n      list.data.unshift(conversation._id);\n      mapping[conversation._id] = conversation;\n    }\n\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: readMessages,\n\n  reducer(state, data) {\n    const conversationId = data.payload;\n    const {\n      mapping\n    } = state;\n    mapping[conversationId].totalNotSeenMessages = 0;\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: deactiveConversation,\n\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n\n    nextState.activeConversation = {};\n    return _objectSpread({}, nextState);\n  }\n\n}, {\n  on: updateLastMessage,\n\n  reducer(state, action) {\n    const {\n      conversationId,\n      lastMessage\n    } = action.payload;\n    const {\n      mapping\n    } = state;\n\n    if (mapping[conversationId]) {\n      mapping[conversationId].lastMessage = lastMessage;\n      mapping[conversationId].lastMessageCreatedAt = new Date();\n      mapping[conversationId].totalNotSeenMessages = 0;\n    }\n\n    return _objectSpread({}, state);\n  }\n\n}];\nconst messageReducer = [{\n  on: fetchingMessage,\n\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId\n    } = data.payload;\n    conversationMap[conversationId] = _objectSpread(_objectSpread({}, conversationMap[conversationId]), {}, {\n      fetching: true\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: loadMessagesSuccess,\n\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId,\n      items,\n      total\n    } = data.payload;\n    conversationMap[conversationId] = {\n      items: [...items.reverse()],\n      total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: loadMoreMessagesSuccess,\n\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId,\n      items,\n      total\n    } = data.payload;\n    conversationMap[conversationId] = {\n      items: [...items.reverse(), ...(conversationMap[conversationId].items || [])],\n      total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: sendMessage,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: true\n      }\n    });\n  }\n\n}, {\n  on: sendMessageSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\n      nextState.conversationMap[data.payload.conversationId].items = [];\n    }\n\n    nextState.conversationMap[data.payload.conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n\n}, {\n  on: sendMessageFail,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: false,\n        success: false,\n        error: data.payload\n      }\n    });\n  }\n\n}, {\n  on: receiveMessageSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    if (!nextState.conversationMap[data.payload.conversationId]) {\n      return _objectSpread({}, nextState);\n    }\n\n    nextState.conversationMap[data.payload.conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      receiveMessage: data.payload\n    });\n  }\n\n}, {\n  on: sentFileSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\n      nextState.conversationMap[data.payload.conversationId].items = [];\n    }\n\n    nextState.conversationMap[data.payload.conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n\n}, {\n  on: countNotReadMessage,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      totalNotReadMessage: action.payload\n    });\n  }\n\n}];\nexport default merge({}, createReducers('conversation', [conversationReducer], initialConversationState), createReducers('message', [messageReducer], initialMessageState));","map":null,"metadata":{},"sourceType":"module"}