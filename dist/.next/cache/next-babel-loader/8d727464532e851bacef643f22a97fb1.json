{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-shadow */\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable prefer-promise-reject-errors */\n\n/* eslint-disable prefer-const */\n\n/* eslint-disable react/require-default-props */\nimport * as React from 'react';\nimport { Form, Input, Button, Select, DatePicker } from 'antd';\nimport moment from 'moment';\nimport './index.less';\nimport { OptionProfile } from '@components/common/base/select/profile';\nimport { formatDataWeight, formatDataHeight } from 'src/lib/utils';\nconst {\n  TextArea\n} = Input;\nconst hairDataSource = [{\n  label: 'Brown',\n  value: 'brown'\n}, {\n  label: 'Blonde',\n  value: 'blonde'\n}, {\n  label: 'Black',\n  value: 'black'\n}, {\n  label: 'Red',\n  value: 'red'\n}, {\n  label: 'Unknown',\n  value: 'unknown'\n}];\nconst pubicHairDataSource = [{\n  label: 'Trimmed',\n  value: 'trimmed'\n}, {\n  label: 'Shaved',\n  value: 'shaved'\n}, {\n  label: 'Hairy',\n  value: 'hairy'\n}, {\n  label: 'Unknown',\n  value: 'unknown'\n}];\nconst bustDataSource = [{\n  label: 'Large',\n  value: 'large'\n}, {\n  label: 'Medium',\n  value: 'medium'\n}, {\n  label: 'Small',\n  value: 'small'\n}, {\n  label: 'Unknown',\n  value: 'unknown'\n}];\nconst weightDataSource = formatDataWeight();\nconst heightDatasource = formatDataHeight();\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 0\n    }\n  }\n};\n\nconst UserProfile = ({\n  onFinish,\n  firstName,\n  lastName,\n  countries,\n  country,\n  city,\n  loading,\n  address,\n  state,\n  aboutMe,\n  dateOfBirth,\n  gender,\n  sexualReference,\n  ethnicity,\n  eyes,\n  hair,\n  height,\n  weight,\n  categoryIds,\n  tags,\n  pubicHair,\n  bust,\n  categoriesData,\n  socials\n}) => {\n  const [form] = Form.useForm();\n  let [facebook, setFb] = React.useState((socials === null || socials === void 0 ? void 0 : socials.facebook) || '');\n  let [twitter, setTw] = React.useState((socials === null || socials === void 0 ? void 0 : socials.twitter) || '');\n  let [instagram, setIta] = React.useState((socials === null || socials === void 0 ? void 0 : socials.instagram) || '');\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    onFinish: values => {\n      const data = _objectSpread(_objectSpread({}, values), {\n        socials: {\n          facebook,\n          twitter,\n          instagram\n        }\n      });\n\n      onFinish(data);\n    },\n    name: \"contactSettingForm\",\n    className: \"performerEditForm\",\n    initialValues: {\n      firstName,\n      lastName,\n      city,\n      address,\n      state,\n      aboutMe,\n      country,\n      dateOfBirth: moment(dateOfBirth),\n      gender,\n      sexualReference,\n      ethnicity,\n      eyes,\n      hair,\n      height,\n      weight,\n      categoryIds,\n      pubicHair,\n      bust,\n      tags,\n      socials\n    },\n    layout: \"horizontal\"\n  }), __jsx(Form.Item, {\n    name: \"firstName\",\n    label: \"First Name\",\n    rules: [{\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input your first name!'\n    }, {\n      required: true,\n      message: 'Please input your first name!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"First name\"\n  })), __jsx(Form.Item, {\n    name: \"lastName\",\n    label: \"Last Name\",\n    rules: [{\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input your last name!'\n    }, {\n      required: true,\n      message: 'Please input your first name!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"Last name\"\n  })), __jsx(Form.Item, {\n    name: \"aboutMe\",\n    label: \"About me\"\n  }, __jsx(TextArea, {\n    rows: 2,\n    placeholder: \"Tell your fans something about you\"\n  })), __jsx(Form.Item, {\n    name: \"gender\",\n    label: \"Gender\"\n  }, __jsx(Select, null, __jsx(Select.Option, {\n    value: \"male\",\n    key: \"male\"\n  }, \"Male\"), __jsx(Select.Option, {\n    value: \"female\",\n    key: \"female\"\n  }, \"Female\"), __jsx(Select.Option, {\n    value: \"transgender\",\n    key: \"transgender\"\n  }, \"Transgender\"))), __jsx(Form.Item, {\n    name: \"sexualReference\",\n    label: \"Sexual Preference\"\n  }, __jsx(Input, {\n    placeholder: \"Sexual Preference\"\n  })), __jsx(Form.Item, {\n    name: \"dateOfBirth\",\n    label: \"Date of Birth\",\n    rules: [{\n      required: true,\n      message: 'Please input date of birth!'\n    }, {\n      validator: (rule, value) => {\n        if (!value) return Promise.resolve();\n        const years = moment().diff(value, 'years');\n\n        if (years >= 18) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject('Minimum of 18 years');\n      }\n    }]\n  }, __jsx(DatePicker, {\n    style: {\n      width: '100%'\n    }\n  })), __jsx(Form.Item, {\n    name: \"ethnicity\",\n    label: \"Ethnicity\"\n  }, __jsx(Select, null, __jsx(Select.Option, {\n    value: \"White\",\n    key: \"white\"\n  }, \"White\"), __jsx(Select.Option, {\n    value: \"Asian\",\n    key: \"asian\"\n  }, \"Asian\"), __jsx(Select.Option, {\n    value: \"Black\",\n    key: \"black\"\n  }, \"Black\"), __jsx(Select.Option, {\n    value: \"India\",\n    key: \"india\"\n  }, \"India\"), __jsx(Select.Option, {\n    value: \"Latin\",\n    key: \"latin\"\n  }, \"Latin\"), __jsx(Select.Option, {\n    value: \"Unknown\",\n    key: \"unknown\"\n  }, \"Unknown\"))), __jsx(Form.Item, {\n    name: \"eyes\",\n    label: \"Eyes\"\n  }, __jsx(Select, null, __jsx(Select.Option, {\n    value: \"Blue\",\n    key: \"blue\"\n  }, \"Blue\"), __jsx(Select.Option, {\n    value: \"Brown\",\n    key: \"brown\"\n  }, \"Brown\"), __jsx(Select.Option, {\n    value: \"Green\",\n    key: \"green\"\n  }, \"Green\"), __jsx(Select.Option, {\n    value: \"Unknown\",\n    key: \"unknown\"\n  }, \"Unknown\"))), __jsx(OptionProfile, {\n    label: \"Hair\",\n    dataSource: hairDataSource,\n    name: \"hair\"\n  }), __jsx(OptionProfile, {\n    label: \"Weight\",\n    dataSource: weightDataSource,\n    name: \"weight\"\n  }), __jsx(OptionProfile, {\n    label: \"Height\",\n    dataSource: heightDatasource,\n    name: \"height\"\n  }), __jsx(OptionProfile, {\n    label: \"Pubic Hair\",\n    dataSource: pubicHairDataSource,\n    name: \"pubicHair\"\n  }), __jsx(OptionProfile, {\n    label: \"Bust\",\n    dataSource: bustDataSource,\n    name: \"bust\"\n  }), __jsx(Form.Item, {\n    name: \"categoryIds\",\n    label: \"Categories\"\n  }, __jsx(Select, {\n    mode: \"multiple\"\n  }, categoriesData.map(c => __jsx(Select.Option, {\n    value: c._id,\n    key: c._id\n  }, c.name)))), __jsx(Form.Item, {\n    name: \"tags\",\n    label: \"Tags\"\n  }, __jsx(Select, {\n    mode: \"tags\"\n  })), __jsx(Form.Item, {\n    name: \"country\",\n    label: \"Country\",\n    rules: [{\n      required: true,\n      message: 'Please input your country!'\n    }]\n  }, __jsx(Select, {\n    showSearch: true\n  }, countries.length > 0 && countries.map(country => __jsx(Select.Option, {\n    value: country.name,\n    key: country.code\n  }, country.name)))), __jsx(Form.Item, {\n    name: \"state\",\n    label: \"State Name\"\n  }, __jsx(Input, {\n    placeholder: \"samplestate\"\n  })), __jsx(Form.Item, {\n    name: \"city\",\n    label: \"City\"\n  }, __jsx(Input, {\n    placeholder: \"samplecity\"\n  })), __jsx(Form.Item, {\n    name: \"zipcode\",\n    label: \"Zip\"\n  }, __jsx(Input, {\n    placeholder: \"012345-678\"\n  })), __jsx(Form.Item, {\n    name: \"address\",\n    label: \"Address\"\n  }, __jsx(Input, {\n    placeholder: \"Address\"\n  })), __jsx(Form.Item, {\n    label: \"Facebook\"\n  }, __jsx(Input, {\n    placeholder: \"https://www.facebook.com\",\n    value: facebook,\n    onChange: e => setFb(facebook = e.target.value)\n  })), __jsx(Form.Item, {\n    label: \"Twitter\"\n  }, __jsx(Input, {\n    placeholder: \"https://www.twitter.com\",\n    value: twitter,\n    onChange: e => setTw(twitter = e.target.value)\n  })), __jsx(Form.Item, {\n    label: \"Instagram\"\n  }, __jsx(Input, {\n    placeholder: \"https://www.instagram.com\",\n    value: instagram,\n    onChange: e => setIta(instagram = e.target.value)\n  })), __jsx(Form.Item, tailFormItemLayout, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    loading: loading\n  }, \"Save Changes\")));\n};\n\nexport default UserProfile;","map":null,"metadata":{},"sourceType":"module"}