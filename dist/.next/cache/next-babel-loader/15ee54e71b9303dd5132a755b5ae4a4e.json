{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable dot-notation */\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Row, Col, message } from 'antd';\nimport { HLS, WEBRTC } from 'src/interfaces';\nimport { connect } from 'react-redux';\nimport { streamService, performerService, messageService } from 'src/services';\nimport { SocketContext, Event } from 'src/socket';\nimport nextCookie from 'next-cookies';\nimport ModalBuyAssets from '@components/performer-assets/common/modal-buy-assets';\nimport PerformerProduct from '@components/performer-assets/product-carousel';\nimport PerformerVideo from '@components/performer-assets/video-carousel';\nimport PerformerGallery from '@components/performer-assets/gallery-carousel';\nimport ProfileCard from '@components/performer/profile-card';\nimport PerformerCarousel from '@components/performer/performer-carousel';\nimport Header from '@components/streaming/header';\nimport Footer from '@components/streaming/footer';\nimport Router from 'next/router';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport LiveSubscriber from 'src/components/streaming/subscriber';\nimport { loadStreamMessages, getStreamConversationSuccess, receiveStreamMessageSuccess, resetStreamMessage, resetAllStreamMessage } from '@redux/stream-chat/actions';\nimport { getPerformerDetails, updatePerformerAsset } from '@redux/performer/actions';\nimport { updateCurrentUserBalance } from '@redux/user/actions';\nimport { getResponseError } from '@lib/utils';\nimport { StatusCodes } from 'http-status-codes';\nimport './index.less';\nimport { currentUserSelecter } from '@redux/selectors';\nimport { getPoster } from '@lib/stream'; // eslint-disable-next-line no-shadow\n\nvar PERFORMER_ASSETS_TYPE; // eslint-disable-next-line no-shadow\n\n(function (PERFORMER_ASSETS_TYPE) {\n  PERFORMER_ASSETS_TYPE[\"PRODUCT\"] = \"product\";\n  PERFORMER_ASSETS_TYPE[\"GALLERY\"] = \"gallery\";\n  PERFORMER_ASSETS_TYPE[\"VIDEO\"] = \"video\";\n})(PERFORMER_ASSETS_TYPE || (PERFORMER_ASSETS_TYPE = {}));\n\nvar STREAM_EVENT; // eslint-disable-next-line no-shadow\n\n(function (STREAM_EVENT) {\n  STREAM_EVENT[\"JOIN_BROADCASTER\"] = \"join-broadcaster\";\n  STREAM_EVENT[\"MODEL_LEFT\"] = \"model-left\";\n  STREAM_EVENT[\"ROOM_INFORMATIOM_CHANGED\"] = \"public-room-changed\";\n  STREAM_EVENT[\"MODEL_UPDATE_STREAMING_STATUS\"] = \"modelUpdateStreamingStatus\";\n  STREAM_EVENT[\"USER_LEFT_ROOM\"] = \"USER_LEFT_ROOM\";\n})(STREAM_EVENT || (STREAM_EVENT = {}));\n\nvar EVENT;\n\n(function (EVENT) {\n  EVENT[\"BLOCK_USERS\"] = \"nofify_users_block\";\n})(EVENT || (EVENT = {}));\n\nclass LivePage extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    try {\n      const {\n        query\n      } = ctx;\n\n      if (false && query.performer) {\n        return {\n          performer: JSON.parse(query.performer)\n        };\n      }\n\n      const {\n        token\n      } = nextCookie(ctx);\n      const headers = {\n        Authorization: token\n      };\n      const resp = await performerService.details(query.username, headers);\n      const performer = resp.data;\n\n      if (performer.isBlocked) {\n        throw StatusCodes.FORBIDDEN;\n      }\n\n      return {\n        performer\n      };\n    } catch (e) {\n      // const err = await PromisePurchaseItemModelresolve(e);\n      if (false) {\n        return Router.push('/');\n      }\n\n      ctx.res.writeHead && ctx.res.writeHead(302, {\n        Location: '/'\n      });\n      ctx.res.end && ctx.res.end();\n      return {};\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"subscriberRef\", void 0);\n\n    _defineProperty(this, \"buyAssetsRef\", void 0);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      this.leavePublicRoom();\n    });\n\n    this.state = {\n      total: 0,\n      members: []\n    };\n  }\n\n  componentDidMount() {\n    this.subscriberRef = /*#__PURE__*/React.createRef();\n    this.buyAssetsRef = /*#__PURE__*/React.createRef();\n    const {\n      performer,\n      user\n    } = this.props;\n\n    if (!performer) {\n      Router.push('/');\n      return;\n    }\n\n    if (user && user.role === 'performer') {\n      Router.push('/live');\n      return;\n    }\n\n    if (user && user.role === 'studio') {\n      Router.push('/studio/account-settings');\n      return;\n    }\n\n    this.socket = this.context;\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n    window.addEventListener('beforeunload', this.onbeforeunload);\n    this.initProfilePage();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      performer,\n      data,\n      activeConversation\n    } = this.props;\n\n    if (data && data.isBlocked) {\n      Router.push('/403');\n      return;\n    }\n\n    if (performer && performer._id !== prevProps.performer._id) {\n      this.initProfilePage();\n    }\n\n    if (prevProps.activeConversation !== activeConversation) {\n      var _prevProps$activeConv;\n\n      ((_prevProps$activeConv = prevProps.activeConversation) === null || _prevProps$activeConv === void 0 ? void 0 : _prevProps$activeConv._id) && this.socket.emit('public-stream/leave', {\n        conversationId: prevProps.activeConversation._id\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n  }\n\n  onChange({\n    total,\n    members,\n    conversationId\n  }) {\n    var _activeConversation$d;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n      this.setState({\n        total,\n        members\n      });\n    }\n  }\n\n  onBoughtAssetSuccess(type, id, payload) {\n    const {\n      updatePerformerAsset: dispatchUpdatePerformerAsset\n    } = this.props;\n    dispatchUpdatePerformerAsset({\n      type,\n      id,\n      payload\n    });\n  }\n\n  async joinPeformerPublicRoom() {\n    const {\n      performer,\n      loadStreamMessages: dispatchLoadStreamMessages,\n      getStreamConversationSuccess: dispatchGetStreamConversationSuccess\n    } = this.props;\n\n    if (performer) {\n      try {\n        // this.setState({ loading: true })\n        const resp = await messageService.findPublicConversationPerformer(performer._id);\n        const conversation = resp.data;\n\n        if (conversation && conversation._id) {\n          dispatchGetStreamConversationSuccess({\n            data: conversation\n          });\n          dispatchLoadStreamMessages({\n            conversationId: conversation._id,\n            limit: 25,\n            offset: 0,\n            type: conversation.type\n          });\n          this.socket = this.context;\n          this.socket && this.socket.emit('public-stream/join', {\n            conversationId: conversation._id\n          });\n        } else {\n          throw new Promise(resolve => resolve('No available broadcast. Try again later'));\n        }\n      } catch (e) {\n        const error = await Promise.resolve(e);\n        message.error(getResponseError(error));\n      } finally {// this.setState({ loading: false});\n      }\n    }\n  }\n\n  initProfilePage() {\n    const {\n      performer,\n      performer: {\n        streamingStatus\n      },\n      getPerformerDetails: dispatchGetPerformerDetail\n    } = this.props;\n    setTimeout(() => {\n      this.subscriberRef.current && this.subscriberRef.current.resetPlaybackVideo(getPoster(streamingStatus));\n    }, 100);\n    dispatchGetPerformerDetail(performer);\n    this.inscreaseView();\n    this.joinPeformerPublicRoom();\n  }\n\n  async subscribe({\n    performerId\n  }) {\n    try {\n      const {\n        settings: {\n          optionForBroadcast\n        },\n        performer\n      } = this.props;\n\n      if (performer._id !== performerId) {\n        return;\n      }\n\n      const resp = await streamService.joinPublicChat(performerId);\n      const {\n        sessionId\n      } = resp.data;\n\n      if (optionForBroadcast === HLS) {\n        var _this$subscriberRef$c;\n\n        (_this$subscriberRef$c = this.subscriberRef.current) === null || _this$subscriberRef$c === void 0 ? void 0 : _this$subscriberRef$c.playHLS(sessionId);\n      } else if (optionForBroadcast === WEBRTC) {\n        var _this$subscriberRef$c2;\n\n        (_this$subscriberRef$c2 = this.subscriberRef.current) === null || _this$subscriberRef$c2 === void 0 ? void 0 : _this$subscriberRef$c2.play(sessionId);\n      }\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n    }\n  }\n\n  leavePublicRoom() {\n    var _activeConversation$d2;\n\n    const {\n      activeConversation,\n      resetStreamMessage: dispatchResetStreamMessage\n    } = this.props;\n    dispatchResetStreamMessage();\n\n    if (this.socket && activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d2 = activeConversation.data) !== null && _activeConversation$d2 !== void 0 && _activeConversation$d2._id) {\n      this.socket.emit('public-stream/leave', {\n        conversationId: activeConversation.data._id\n      });\n    }\n\n    this.setState({\n      total: 0,\n      members: []\n    });\n  }\n\n  modelLeftHandler({\n    performerId\n  }) {\n    var _this$subscriberRef$c3;\n\n    const {\n      performer\n    } = this.props;\n\n    if (performerId !== performer._id) {\n      return;\n    }\n\n    (_this$subscriberRef$c3 = this.subscriberRef.current) === null || _this$subscriberRef$c3 === void 0 ? void 0 : _this$subscriberRef$c3.stop();\n    message.info('Model has left the room!');\n  }\n\n  async showAssetToBuy(type, item) {\n    const {\n      isBought,\n      isSale,\n      name,\n      type: itemType\n    } = item;\n\n    switch (type) {\n      case 'gallery':\n        if (isBought || !isSale) {\n          Router.push({\n            pathname: '/photos',\n            query: {\n              data: JSON.stringify(item),\n              id: item._id\n            }\n          }, `/photos/${item._id}`);\n          return;\n        }\n\n        break;\n\n      case 'product':\n        if (isBought && itemType === 'digital') {\n          message.info(`You have purchased ${name} already. Please check your email!`);\n          return;\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    this.buyAssetsRef.showModalBuyAssets(item, type);\n  }\n\n  userBlockHandler({\n    performerId\n  }) {\n    const {\n      performer\n    } = this.props;\n\n    if (performerId === performer._id) {\n      Router.push('/403');\n    }\n  }\n\n  modelUpdateStreamingStatusHander({\n    status,\n    id\n  }) {\n    const {\n      performer\n    } = this.props;\n\n    if (id === performer._id) {\n      setTimeout(() => {\n        this.subscriberRef.current && this.subscriberRef.current.resetPlaybackVideo(getPoster(status));\n      }, 100);\n    }\n  }\n\n  async inscreaseView() {\n    try {\n      const {\n        performer: {\n          _id: id\n        }\n      } = this.props;\n      await performerService.increaseView(id); // eslint-disable-next-line no-empty\n    } catch {}\n  }\n\n  userLeftRoomHandle({\n    username,\n    conversationId\n  }) {\n    var _activeConversation$d3;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d3 = activeConversation.data) === null || _activeConversation$d3 === void 0 ? void 0 : _activeConversation$d3._id) === conversationId) {\n      const {\n        total,\n        members\n      } = this.state;\n      const leftMemberIndex = members.findIndex(m => m.username === username);\n\n      if (leftMemberIndex > -1) {\n        this.setState({\n          total: total - 1,\n          members: members.splice(leftMemberIndex, 1)\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      performer,\n      data,\n      searching,\n      success,\n      products,\n      videos,\n      galleries,\n      ui\n    } = this.props;\n    const {\n      members,\n      total\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, `${ui === null || ui === void 0 ? void 0 : ui.siteName} | ${performer === null || performer === void 0 ? void 0 : performer.username}`)), __jsx(Event, {\n      event: STREAM_EVENT.JOIN_BROADCASTER,\n      handler: this.subscribe.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.MODEL_LEFT,\n      handler: this.modelLeftHandler.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.USER_LEFT_ROOM,\n      handler: this.userLeftRoomHandle.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.ROOM_INFORMATIOM_CHANGED,\n      handler: this.onChange.bind(this)\n    }), __jsx(Event, {\n      event: EVENT.BLOCK_USERS,\n      handler: this.userBlockHandler.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.MODEL_UPDATE_STREAMING_STATUS,\n      handler: this.modelUpdateStreamingStatusHander.bind(this)\n    }), __jsx(\"div\", {\n      className: \"profile-page\"\n    }, __jsx(ModalBuyAssets // eslint-disable-next-line no-return-assign\n    , _extends({\n      ref: ref => this.buyAssetsRef = ref,\n      onSucess: this.onBoughtAssetSuccess.bind(this)\n    }, this.props)), __jsx(Header, this.props), __jsx(Row, {\n      className: \"streaming-container\"\n    }, __jsx(Col, {\n      md: 13,\n      xs: 24\n    }, __jsx(LiveSubscriber, {\n      ref: this.subscriberRef,\n      configs: {\n        isPlayMode: true\n      }\n    }), __jsx(Footer, this.props)), __jsx(Col, {\n      md: 11,\n      xs: 24\n    }, __jsx(ChatBox, _extends({}, this.props, {\n      members: members,\n      totalParticipant: total\n    })))), __jsx(Row, {\n      gutter: [{\n        sm: 25,\n        xs: 0\n      }, {\n        sm: 10,\n        xs: 25\n      }]\n    }, __jsx(Col, {\n      xs: {\n        span: 24\n      },\n      lg: {\n        span: 8\n      }\n    }, __jsx(ProfileCard, {\n      placeholderAvatarUrl: ui === null || ui === void 0 ? void 0 : ui.placeholderAvatarUrl,\n      performer: data,\n      searching: searching,\n      success: success\n    })), __jsx(Col, {\n      xs: {\n        span: 24\n      },\n      lg: {\n        span: 16\n      }\n    }, __jsx(PerformerProduct, {\n      performer: data,\n      products: products,\n      searching: searching,\n      success: success,\n      purchaseProduct: this.showAssetToBuy.bind(this, 'product')\n    }), __jsx(PerformerVideo, {\n      performer: data,\n      videos: videos,\n      searching: searching,\n      success: success\n    }), __jsx(PerformerGallery, {\n      performer: data,\n      galleries: galleries,\n      searching: searching,\n      success: success,\n      purchaseGallery: this.showAssetToBuy.bind(this, 'gallery')\n    }), __jsx(PerformerCarousel, _extends({\n      performers: data && data.relatedPerformers\n    }, this.props))))));\n  }\n\n}\n\n_defineProperty(LivePage, \"authenticate\", false);\n\nLivePage.contextType = SocketContext;\n\nconst mapStateToProps = state => _objectSpread(_objectSpread(_objectSpread({\n  ui: state.ui\n}, state.streaming), state.performer.performerDetails), {}, {\n  user: currentUserSelecter(state),\n  loggedIn: state.auth.loggedIn,\n  activeConversation: state.streamMessage.activeConversation\n});\n\nconst mapDispatch = {\n  loadStreamMessages,\n  getStreamConversationSuccess,\n  receiveStreamMessageSuccess,\n  resetStreamMessage,\n  resetAllStreamMessage,\n  updateCurrentUserBalance,\n  getPerformerDetails,\n  updatePerformerAsset\n};\nexport default connect(mapStateToProps, mapDispatch)(LivePage);","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/pages/stream/index.tsx"],"names":["React","PureComponent","Head","Row","Col","message","HLS","WEBRTC","connect","streamService","performerService","messageService","SocketContext","Event","nextCookie","ModalBuyAssets","PerformerProduct","PerformerVideo","PerformerGallery","ProfileCard","PerformerCarousel","Header","Footer","Router","ChatBox","LiveSubscriber","loadStreamMessages","getStreamConversationSuccess","receiveStreamMessageSuccess","resetStreamMessage","resetAllStreamMessage","getPerformerDetails","updatePerformerAsset","updateCurrentUserBalance","getResponseError","StatusCodes","currentUserSelecter","getPoster","PERFORMER_ASSETS_TYPE","STREAM_EVENT","EVENT","LivePage","getInitialProps","ctx","query","performer","JSON","parse","token","headers","Authorization","resp","details","username","data","isBlocked","FORBIDDEN","e","push","res","writeHead","Location","end","constructor","props","leavePublicRoom","state","total","members","componentDidMount","subscriberRef","createRef","buyAssetsRef","user","role","socket","context","events","on","onbeforeunload","window","addEventListener","initProfilePage","componentDidUpdate","prevProps","activeConversation","_id","emit","conversationId","componentWillUnmount","removeEventListener","off","onChange","setState","onBoughtAssetSuccess","type","id","payload","dispatchUpdatePerformerAsset","joinPeformerPublicRoom","dispatchLoadStreamMessages","dispatchGetStreamConversationSuccess","findPublicConversationPerformer","conversation","limit","offset","Promise","resolve","error","streamingStatus","dispatchGetPerformerDetail","setTimeout","current","resetPlaybackVideo","inscreaseView","subscribe","performerId","settings","optionForBroadcast","joinPublicChat","sessionId","playHLS","play","err","dispatchResetStreamMessage","modelLeftHandler","stop","info","showAssetToBuy","item","isBought","isSale","name","itemType","pathname","stringify","showModalBuyAssets","userBlockHandler","modelUpdateStreamingStatusHander","status","increaseView","userLeftRoomHandle","leftMemberIndex","findIndex","m","splice","render","searching","success","products","videos","galleries","ui","siteName","JOIN_BROADCASTER","bind","MODEL_LEFT","USER_LEFT_ROOM","ROOM_INFORMATIOM_CHANGED","BLOCK_USERS","MODEL_UPDATE_STREAMING_STATUS","ref","isPlayMode","sm","xs","span","placeholderAvatarUrl","relatedPerformers","contextType","mapStateToProps","streaming","performerDetails","loggedIn","auth","streamMessage","mapDispatch"],"mappings":"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","sourcesContent":["/* eslint-disable dot-notation */\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Row, Col, message } from 'antd';\nimport { IResponse } from 'src/services/api-request';\nimport {\n  IPerformer,\n  IUser,\n  IUIConfig,\n  StreamSettings,\n  HLS,\n  WEBRTC,\n  IProduct,\n  IVideo,\n  IPhoto,\n  IPerformerGallery\n} from 'src/interfaces';\nimport { connect } from 'react-redux';\nimport { streamService, performerService, messageService } from 'src/services';\nimport { SocketContext, Event } from 'src/socket';\nimport nextCookie from 'next-cookies';\nimport ModalBuyAssets from '@components/performer-assets/common/modal-buy-assets';\nimport PerformerProduct from '@components/performer-assets/product-carousel';\nimport PerformerVideo from '@components/performer-assets/video-carousel';\nimport PerformerGallery from '@components/performer-assets/gallery-carousel';\nimport ProfileCard from '@components/performer/profile-card';\nimport PerformerCarousel from '@components/performer/performer-carousel';\nimport Header from '@components/streaming/header';\nimport Footer from '@components/streaming/footer';\nimport Router from 'next/router';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport LiveSubscriber from 'src/components/streaming/subscriber';\nimport {\n  loadStreamMessages,\n  getStreamConversationSuccess,\n  receiveStreamMessageSuccess,\n  resetStreamMessage,\n  resetAllStreamMessage\n} from '@redux/stream-chat/actions';\nimport {\n  getPerformerDetails,\n  updatePerformerAsset\n} from '@redux/performer/actions';\nimport { updateCurrentUserBalance } from '@redux/user/actions';\nimport { getResponseError } from '@lib/utils';\nimport { StatusCodes } from 'http-status-codes';\nimport './index.less';\nimport { currentUserSelecter } from '@redux/selectors';\nimport { getPoster } from '@lib/stream';\n\n// eslint-disable-next-line no-shadow\nenum PERFORMER_ASSETS_TYPE {\n  PRODUCT = 'product',\n  GALLERY = 'gallery',\n  VIDEO = 'video'\n}\n\n// eslint-disable-next-line no-shadow\nenum STREAM_EVENT {\n  JOIN_BROADCASTER = 'join-broadcaster',\n  MODEL_LEFT = 'model-left',\n  ROOM_INFORMATIOM_CHANGED = 'public-room-changed',\n  MODEL_UPDATE_STREAMING_STATUS = 'modelUpdateStreamingStatus',\n  USER_LEFT_ROOM = 'USER_LEFT_ROOM'\n}\n\n// eslint-disable-next-line no-shadow\nenum EVENT {\n  BLOCK_USERS = 'nofify_users_block'\n}\n\ninterface IProps {\n  resetStreamMessage: Function;\n  resetAllStreamMessage: Function;\n  getStreamConversationSuccess: Function;\n  loadStreamMessages: Function;\n  activeConversation: any;\n  ui: IUIConfig;\n  user: IUser;\n  loggedIn: boolean;\n  performer: IPerformer;\n  success: boolean;\n  searching: boolean;\n  settings: StreamSettings;\n  data: IPerformer;\n  getPerformerDetails: Function;\n  updatePerformerAsset: Function;\n  updateCurrentUserBalance: Function;\n  receiveStreamMessageSuccess: Function;\n  products: Record<string, IProduct>;\n  videos: Record<string, IVideo>;\n  photos: Record<string, IPhoto>;\n  galleries: Record<string, IPerformerGallery>;\n  getStreamConversation: Function;\n}\n\ninterface IStates {\n  total: number;\n  members: IUser[];\n}\n\nclass LivePage extends PureComponent<IProps, IStates> {\n  static authenticate = false;\n\n  private subscriberRef: any;\n\n  private buyAssetsRef: any;\n\n  private socket: SocketIOClient.Socket;\n\n  static async getInitialProps({ ctx }) {\n    try {\n      const { query } = ctx;\n      if (process.browser && query.performer) {\n        return {\n          performer: JSON.parse(query.performer)\n        };\n      }\n\n      const { token } = nextCookie(ctx);\n      const headers = { Authorization: token };\n      const resp: IResponse<IPerformer> = await performerService.details(\n        query.username,\n        headers\n      );\n      const performer = resp.data;\n      if (performer.isBlocked) {\n        throw StatusCodes.FORBIDDEN;\n      }\n\n      return {\n        performer\n      };\n    } catch (e) {\n      // const err = await PromisePurchaseItemModelresolve(e);\n      if (process.browser) {\n        return Router.push('/');\n      }\n\n      ctx.res.writeHead && ctx.res.writeHead(302, { Location: '/' });\n      ctx.res.end && ctx.res.end();\n      return {};\n    }\n  }\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      total: 0,\n      members: []\n    };\n  }\n\n  componentDidMount(): any {\n    this.subscriberRef = React.createRef();\n    this.buyAssetsRef = React.createRef();\n    const { performer, user } = this.props;\n    if (!performer) {\n      Router.push('/');\n      return;\n    }\n\n    if (user && user.role === 'performer') {\n      Router.push('/live');\n      return;\n    }\n\n    if (user && user.role === 'studio') {\n      Router.push('/studio/account-settings');\n      return;\n    }\n\n    this.socket = this.context;\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n    window.addEventListener('beforeunload', this.onbeforeunload);\n    this.initProfilePage();\n  }\n\n  componentDidUpdate(prevProps: IProps) {\n    const { performer, data, activeConversation } = this.props;\n    if (data && data.isBlocked) {\n      Router.push('/403');\n      return;\n    }\n\n    if (performer && performer._id !== prevProps.performer._id) {\n      this.initProfilePage();\n    }\n\n    if (prevProps.activeConversation !== activeConversation) {\n      prevProps.activeConversation?._id\n        && this.socket.emit('public-stream/leave', {\n          conversationId: prevProps.activeConversation._id\n        });\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n  }\n\n  onChange({ total, members, conversationId }) {\n    const { activeConversation } = this.props;\n    if (activeConversation?.data?._id === conversationId) {\n      this.setState({ total, members });\n    }\n  }\n\n  onbeforeunload = () => {\n    this.leavePublicRoom();\n  };\n\n  onBoughtAssetSuccess(type, id, payload) {\n    const { updatePerformerAsset: dispatchUpdatePerformerAsset } = this.props;\n    dispatchUpdatePerformerAsset({ type, id, payload });\n  }\n\n  async joinPeformerPublicRoom() {\n    const {\n      performer,\n      loadStreamMessages: dispatchLoadStreamMessages,\n      getStreamConversationSuccess: dispatchGetStreamConversationSuccess\n    } = this.props;\n    if (performer) {\n      try {\n        // this.setState({ loading: true })\n        const resp = await messageService.findPublicConversationPerformer(\n          performer._id\n        );\n        const conversation = resp.data;\n        if (conversation && conversation._id) {\n          dispatchGetStreamConversationSuccess({ data: conversation });\n          dispatchLoadStreamMessages({\n            conversationId: conversation._id,\n            limit: 25,\n            offset: 0,\n            type: conversation.type\n          });\n          this.socket = this.context;\n          this.socket\n            && this.socket.emit('public-stream/join', {\n              conversationId: conversation._id\n            });\n        } else {\n          throw new Promise((resolve) => resolve('No available broadcast. Try again later'));\n        }\n      } catch (e) {\n        const error = await Promise.resolve(e);\n        message.error(getResponseError(error));\n      } finally {\n        // this.setState({ loading: false});\n      }\n    }\n  }\n\n  initProfilePage() {\n    const {\n      performer,\n      performer: { streamingStatus },\n      getPerformerDetails: dispatchGetPerformerDetail\n    } = this.props;\n    setTimeout(() => {\n      this.subscriberRef.current\n        && this.subscriberRef.current.resetPlaybackVideo(\n          getPoster(streamingStatus)\n        );\n    }, 100);\n    dispatchGetPerformerDetail(performer);\n    this.inscreaseView();\n    this.joinPeformerPublicRoom();\n  }\n\n  async subscribe({ performerId }) {\n    try {\n      const {\n        settings: { optionForBroadcast },\n        performer\n      } = this.props;\n      if (performer._id !== performerId) {\n        return;\n      }\n\n      const resp = await streamService.joinPublicChat(performerId);\n      const { sessionId } = resp.data;\n      if (optionForBroadcast === HLS) {\n        this.subscriberRef.current?.playHLS(sessionId);\n      } else if (optionForBroadcast === WEBRTC) {\n        this.subscriberRef.current?.play(sessionId);\n      }\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n    }\n  }\n\n  leavePublicRoom() {\n    const {\n      activeConversation,\n      resetStreamMessage: dispatchResetStreamMessage\n    } = this.props;\n    dispatchResetStreamMessage();\n    if (this.socket && activeConversation?.data?._id) {\n      this.socket.emit('public-stream/leave', {\n        conversationId: activeConversation.data._id\n      });\n    }\n\n    this.setState({\n      total: 0,\n      members: []\n    });\n  }\n\n  modelLeftHandler({ performerId }) {\n    const { performer } = this.props;\n    if (performerId !== performer._id) {\n      return;\n    }\n\n    this.subscriberRef.current?.stop();\n    message.info('Model has left the room!');\n  }\n\n  async showAssetToBuy(type: PERFORMER_ASSETS_TYPE, item) {\n    const {\n      isBought, isSale, name, type: itemType\n    } = item;\n    switch (type) {\n      case 'gallery':\n        if (isBought || !isSale) {\n          Router.push(\n            {\n              pathname: '/photos',\n              query: {\n                data: JSON.stringify(item),\n                id: item._id\n              }\n            },\n            `/photos/${item._id}`\n          );\n          return;\n        }\n        break;\n      case 'product':\n        if (isBought && itemType === 'digital') {\n          message.info(\n            `You have purchased ${name} already. Please check your email!`\n          );\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    this.buyAssetsRef.showModalBuyAssets(item, type);\n  }\n\n  userBlockHandler({ performerId }) {\n    const { performer } = this.props;\n    if (performerId === performer._id) {\n      Router.push('/403');\n    }\n  }\n\n  modelUpdateStreamingStatusHander({ status, id }) {\n    const { performer } = this.props;\n    if (id === performer._id) {\n      setTimeout(() => {\n        this.subscriberRef.current\n          && this.subscriberRef.current.resetPlaybackVideo(\n            getPoster(status)\n          );\n      }, 100);\n    }\n  }\n\n  async inscreaseView() {\n    try {\n      const {\n        performer: { _id: id }\n      } = this.props;\n      await performerService.increaseView(id);\n      // eslint-disable-next-line no-empty\n    } catch {}\n  }\n\n  userLeftRoomHandle({ username, conversationId }) {\n    const { activeConversation } = this.props;\n    if (activeConversation?.data?._id === conversationId) {\n      const { total, members } = this.state;\n      const leftMemberIndex = members.findIndex((m) => m.username === username);\n      if (leftMemberIndex > -1) {\n        this.setState({\n          total: total - 1,\n          members: members.splice(leftMemberIndex, 1)\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      performer,\n      data,\n      searching,\n      success,\n      products,\n      videos,\n      galleries,\n      ui\n    } = this.props;\n    const { members, total } = this.state;\n    return (\n      <>\n        <Head>\n          <title>{`${ui?.siteName} | ${performer?.username}`}</title>\n        </Head>\n\n        <Event\n          event={STREAM_EVENT.JOIN_BROADCASTER}\n          handler={this.subscribe.bind(this)}\n        />\n        <Event\n          event={STREAM_EVENT.MODEL_LEFT}\n          handler={this.modelLeftHandler.bind(this)}\n        />\n        <Event\n          event={STREAM_EVENT.USER_LEFT_ROOM}\n          handler={this.userLeftRoomHandle.bind(this)}\n        />\n        <Event\n          event={STREAM_EVENT.ROOM_INFORMATIOM_CHANGED}\n          handler={this.onChange.bind(this)}\n        />\n        <Event\n          event={EVENT.BLOCK_USERS}\n          handler={this.userBlockHandler.bind(this)}\n        />\n        <Event\n          event={STREAM_EVENT.MODEL_UPDATE_STREAMING_STATUS}\n          handler={this.modelUpdateStreamingStatusHander.bind(this)}\n        />\n\n        <div className=\"profile-page\">\n          <ModalBuyAssets\n            // eslint-disable-next-line no-return-assign\n            ref={(ref) => (this.buyAssetsRef = ref)}\n            onSucess={this.onBoughtAssetSuccess.bind(this)}\n            {...this.props}\n          />\n\n          <Header {...this.props} />\n\n          <Row className=\"streaming-container\">\n            <Col md={13} xs={24}>\n              <LiveSubscriber\n                ref={this.subscriberRef}\n                configs={{\n                  isPlayMode: true\n                }}\n              />\n              <Footer {...this.props} />\n            </Col>\n            <Col md={11} xs={24}>\n              <ChatBox\n                {...this.props}\n                members={members}\n                totalParticipant={total}\n              />\n            </Col>\n          </Row>\n          <Row\n            gutter={[\n              { sm: 25, xs: 0 },\n              { sm: 10, xs: 25 }\n            ]}\n          >\n            <Col xs={{ span: 24 }} lg={{ span: 8 }}>\n              <ProfileCard\n                placeholderAvatarUrl={ui?.placeholderAvatarUrl}\n                performer={data}\n                searching={searching}\n                success={success}\n              />\n            </Col>\n            <Col xs={{ span: 24 }} lg={{ span: 16 }}>\n              <PerformerProduct\n                performer={data}\n                products={products}\n                searching={searching}\n                success={success}\n                purchaseProduct={this.showAssetToBuy.bind(this, 'product')}\n              />\n              <PerformerVideo\n                performer={data}\n                videos={videos}\n                searching={searching}\n                success={success}\n              />\n              <PerformerGallery\n                performer={data}\n                galleries={galleries}\n                searching={searching}\n                success={success}\n                purchaseGallery={this.showAssetToBuy.bind(this, 'gallery')}\n              />\n              <PerformerCarousel\n                performers={data && data.relatedPerformers}\n                {...this.props}\n              />\n            </Col>\n          </Row>\n        </div>\n      </>\n    );\n  }\n}\n\nLivePage.contextType = SocketContext;\n\nconst mapStateToProps = (state) => ({\n  ui: state.ui,\n  ...state.streaming,\n  ...state.performer.performerDetails,\n  user: currentUserSelecter(state),\n  loggedIn: state.auth.loggedIn,\n  activeConversation: state.streamMessage.activeConversation\n});\nconst mapDispatch = {\n  loadStreamMessages,\n  getStreamConversationSuccess,\n  receiveStreamMessageSuccess,\n  resetStreamMessage,\n  resetAllStreamMessage,\n  updateCurrentUserBalance,\n  getPerformerDetails,\n  updatePerformerAsset\n};\nexport default connect(mapStateToProps, mapDispatch)(LivePage);\n"]},"metadata":{},"sourceType":"module"}