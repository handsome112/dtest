{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/account/user/favorites/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { getFavoritePerformers, removeFavorite } from 'src/redux/user/actions';\nimport FavouritePerformerGrid from 'src/components/user/favourite-performer-grid';\nimport { favouriteService } from 'src/services';\nimport './index.less';\nimport { getResponseError } from '@lib/utils';\nimport Loader from '@components/common/base/loader';\n\nclass MyFavoutitePage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: {\n        offset: 0,\n        limit: 100\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentDidUpdate(_, prevStates) {\n    const {\n      query\n    } = this.state;\n\n    if (query !== prevStates.query) {\n      this.getData();\n    }\n  }\n\n  setFilter(name, value) {\n    const {\n      query\n    } = this.state;\n    this.setState({\n      query: _objectSpread(_objectSpread({}, query), {}, {\n        [name]: value\n      })\n    });\n  }\n\n  async getData() {\n    const {\n      getFavoritePerformers: dispatchGetFavoritePerformers\n    } = this.props;\n    const {\n      query\n    } = this.state;\n\n    try {\n      dispatchGetFavoritePerformers(_objectSpread({}, query));\n    } catch (error) {\n      const err = Promise.resolve(error);\n      message.error(getResponseError(err));\n    }\n  }\n\n  async dislike(performer) {\n    const {\n      _id\n    } = performer;\n    const {\n      removeFavorite: dispatchRemoveFavorite\n    } = this.props;\n\n    try {\n      await favouriteService.unlike(_id);\n      dispatchRemoveFavorite(_id);\n    } catch (error) {\n      const e = Promise.resolve(error);\n      message.error(getResponseError(e));\n    }\n  }\n\n  render() {\n    const {\n      searching\n    } = this.props;\n    const {\n      query\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, \"My Favorite \")), __jsx(\"div\", {\n      className: \"favorite-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, __jsx(PageHeader, {\n      title: \"My Favorites\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }), __jsx(Loader, {\n      spinning: searching,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }), __jsx(FavouritePerformerGrid, _extends({}, this.props, {\n      query: query,\n      dislike: this.dislike.bind(this),\n      setFilter: this.setFilter.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\n_defineProperty(MyFavoutitePage, \"authenticate\", true);\n\n_defineProperty(MyFavoutitePage, \"layout\", 'primary');\n\nconst mapStateToProps = state => _objectSpread(_objectSpread({}, state.user.favourites), {}, {\n  countries: state.settings.countries\n});\n\nconst mapDispatchs = {\n  getFavoritePerformers,\n  removeFavorite\n};\nexport default connect(mapStateToProps, mapDispatchs)(MyFavoutitePage);","map":null,"metadata":{},"sourceType":"module"}