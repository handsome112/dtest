{"ast":null,"code":"/* eslint-disable prefer-spread */\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nexport var warning = function warning() {\n  // debug on development and staging.\n  if (true) return;\n  /* eslint-disable no-console */\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error.apply(console, args);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(args.join(' '));\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n\n};\nexport var debug = function debug() {\n  // debug on development and staging.\n  if (true) return;\n  /* eslint-disable no-console */\n\n  if (typeof console !== 'undefined' && typeof console.debug === 'function') {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    console.debug.apply(console, args);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}