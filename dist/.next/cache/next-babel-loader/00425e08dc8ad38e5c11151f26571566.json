{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/account/user/refund-request/request.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport RefundRequestForm from '@components/refund-request/form';\nimport { performerService, orderService, refundRequestService } from 'src/services';\nimport { getResponseError } from '@lib/utils';\nimport Router from 'next/router';\n\nclass NewRefundRequestPage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      onSubmit: false,\n      performers: [],\n      selectedPerformerId: '',\n      products: []\n    };\n  }\n\n  componentDidMount() {\n    this.getPerformers();\n  }\n\n  onChangePerformer(performerId) {\n    this.setState({\n      selectedPerformerId: performerId\n    }, () => {\n      this.getProducts();\n    });\n  }\n\n  async onFinish(data) {\n    try {\n      this.setState({\n        onSubmit: true\n      });\n      await refundRequestService.create(data);\n      message.success('Your request has been sent');\n      Router.back();\n    } catch (e) {\n      const err = await Promise.resolve(e);\n      message.error(getResponseError(err));\n    } finally {\n      this.setState({\n        onSubmit: false\n      });\n    }\n  }\n\n  async getPerformers() {\n    try {\n      const resp = await (await performerService.search({\n        limit: 3000\n      })).data;\n      resp && this.setState({\n        performers: resp.data\n      });\n    } catch (e) {\n      const err = Promise.resolve(e);\n      message.error(getResponseError(err));\n    }\n  }\n\n  async getProducts() {\n    try {\n      const {\n        selectedPerformerId\n      } = this.state;\n\n      if (!selectedPerformerId) {\n        return;\n      }\n\n      const resp = await (await orderService.userSearch({\n        limit: 3000,\n        deliveryStatus: 'delivered',\n        performerId: selectedPerformerId\n      })).data;\n      resp && this.setState({\n        products: resp.data\n      });\n    } catch (e) {\n      const err = Promise.resolve(e);\n      message.error(getResponseError(err));\n    }\n  }\n\n  render() {\n    const {\n      onSubmit,\n      performers,\n      products\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, \"New Refund Request\")), __jsx(\"div\", {\n      className: \"performer-videos-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, __jsx(PageHeader, {\n      title: \"Refund request\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }), __jsx(RefundRequestForm, {\n      onChangePerformer: this.onChangePerformer.bind(this),\n      loading: onSubmit,\n      onFinish: this.onFinish.bind(this),\n      performers: performers,\n      products: products,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\n_defineProperty(NewRefundRequestPage, \"authenticate\", true);\n\n_defineProperty(NewRefundRequestPage, \"layout\", 'primary');\n\nexport default NewRefundRequestPage;","map":null,"metadata":{},"sourceType":"module"}