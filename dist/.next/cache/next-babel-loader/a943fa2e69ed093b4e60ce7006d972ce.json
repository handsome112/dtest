{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport React from 'react';\nimport { Form, Input, InputNumber, message } from 'antd';\nimport Popup from '@components/common/base/popup';\nimport './modal-buy-assets.less';\nimport { capitalizeFirstLetter, getResponseError, isPhysicalProduct } from 'src/lib';\nimport { purchaseItemService } from 'src/services';\nimport NumberFormat from '@components/common/layout/numberformat';\nconst initialValues = {\n  postalCode: '',\n  deliveryAddress: '',\n  quantity: 1\n};\n\nclass ModalBuyAssets extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"form\", void 0);\n\n    _defineProperty(this, \"popup\", void 0);\n\n    this.state = _objectSpread(_objectSpread({}, initialValues), {}, {\n      type: 'product',\n      purchasing: false,\n      item: undefined\n    });\n  }\n\n  async onOk() {\n    const {\n      loggedIn\n    } = this.props;\n    const {\n      item\n    } = this.state;\n\n    if (!loggedIn) {\n      message.error('Please login to buy this item!');\n      return;\n    }\n\n    this.setState({\n      purchasing: true\n    });\n    isPhysicalProduct(item) ? this.form.submit() : this.submit();\n  }\n\n  async submit() {\n    const formError = this.form.getFieldsError().find(f => f.errors.length);\n    const {\n      onSucess,\n      onError,\n      updateCurrentUserBalance\n    } = this.props;\n    if (formError) return;\n    const {\n      quantity\n    } = this.form.getFieldsValue();\n\n    try {\n      const {\n        type,\n        item\n      } = this.state;\n      await purchaseItemService.purchaseItem(item._id, type, this.form.getFieldsValue());\n\n      if (type === 'product' && item.type === 'digital') {\n        message.success('Please check your email to view the digital product');\n      } else {\n        message.success('Purchased Success');\n      }\n\n      updateCurrentUserBalance && updateCurrentUserBalance(parseInt(item.token, 10) * quantity * -1);\n      onSucess && onSucess(type, item._id, {\n        isBought: true\n      });\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n      onError && onError(error);\n    } finally {\n      this.popup && this.popup.setVisible(false);\n      this.setState({\n        purchasing: false\n      });\n    }\n  }\n\n  showModalBuyAssets(item, type) {\n    this.setState({\n      item,\n      type\n    });\n    this.popup && this.popup.setVisible(true);\n  }\n\n  render() {\n    const {\n      type,\n      item,\n      quantity,\n      purchasing\n    } = this.state;\n    const footer = []; // if (type === 'gallery') {\n    //   footer.push();\n    // }\n\n    return __jsx(Popup, {\n      footer: footer,\n      title: `Buy ${capitalizeFirstLetter(type)}`,\n      okText: \"Purchase\",\n      ref: ref => this.popup = ref,\n      onOk: this.onOk.bind(this),\n      loading: purchasing,\n      content: item && __jsx(React.Fragment, null, __jsx(Form, {\n        initialValues: initialValues,\n        layout: \"vertical\",\n        ref: ref => this.form = ref,\n        onValuesChange: (_, values) => this.setState(values),\n        hidden: !isPhysicalProduct(item),\n        onFinish: this.submit.bind(this),\n        onFinishFailed: () => this.setState({\n          purchasing: false\n        })\n      }, __jsx(Form.Item, {\n        name: \"deliveryAddress\",\n        rules: [{\n          required: true,\n          message: 'Please provide delivery address!'\n        }],\n        label: \"Delivery Address\"\n      }, __jsx(Input, {\n        placeholder: \"Enter your address\"\n      })), __jsx(Form.Item, {\n        name: \"postalCode\",\n        label: \"Postal Code\"\n      }, __jsx(Input, {\n        placeholder: \"Enter your postal code\"\n      })), __jsx(Form.Item, {\n        name: \"quantity\",\n        label: \"Quantity\",\n        rules: [{\n          validator(_, value) {\n            if (parseInt(value, 10) < 1) {\n              return Promise.reject(new Error('Quantity must be positive!'));\n            }\n\n            return Promise.resolve();\n          }\n\n        }]\n      }, __jsx(InputNumber, {\n        placeholder: \"Enter quantity\",\n        style: {\n          width: '100%'\n        }\n      })), __jsx(Form.Item, null, __jsx(\"div\", null, type === 'video' && __jsx(\"strong\", null, \"Available high-res Video\"), type === 'gallery' && __jsx(\"strong\", null, \"Available high-res Image\"), quantity === 1 && __jsx(\"h3\", null, \"Buy this\", __jsx(\"span\", {\n        className: \"color\"\n      }, ' ', item.name || item.title, ' '), \"For\", __jsx(\"span\", {\n        className: \"color\"\n      }, ' ', __jsx(NumberFormat, {\n        value: item.token\n      }), ' '), \"Tokens\"), quantity > 1 && __jsx(\"h3\", null, __jsx(NumberFormat, {\n        value: parseInt(item.token, 10) * quantity,\n        prefix: `Buy x${quantity} ${item.name || item.title} For `,\n        suffix: \" Tokens\"\n      }))))), __jsx(NumberFormat, {\n        hidden: isPhysicalProduct(item),\n        value: parseInt(item.token, 10) * quantity,\n        prefix: `Buy ${item.name || item.title} For `,\n        suffix: \" Tokens\"\n      }))\n    });\n  }\n\n}\n\nexport default ModalBuyAssets;","map":null,"metadata":{},"sourceType":"module"}