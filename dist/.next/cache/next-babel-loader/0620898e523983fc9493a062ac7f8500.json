{"ast":null,"code":"import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService, favouriteService, purchaseItemService } from '@services/index';\nimport { updateUser, updateUserSuccess, updateUserFail, setUpdating, getFavoritePerformers, getFavoritePerformersSuccess, getFavoritePerformersFailed, gettingFavoritePerformers, getPaymentTokenHistroy, getPaymentTokenHistroySuccess, getPaymentTokenHistroyFail, gettigPaymentTokenHistory } from './actions';\nconst userSagas = [// TODO - defind update current user or get from auth user info to reload current user data if needed\n{\n  on: updateUser,\n\n  *worker(data) {\n    try {\n      yield put(setUpdating());\n      const updated = yield userService.updateMe(data.payload);\n      yield put(updateUserSuccess(updated.data)); // if this is current user, reload user info?\n    } catch (e) {\n      // TODO - alert error\n      const err = yield Promise.resolve(e);\n      yield put(updateUserFail(err));\n    }\n  }\n\n}, {\n  on: getFavoritePerformers,\n\n  *worker(action) {\n    try {\n      yield put(gettingFavoritePerformers());\n      const resp = yield favouriteService.search(action.payload);\n      yield put(getFavoritePerformersSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getFavoritePerformersFailed(err));\n    }\n  }\n\n}, {\n  on: getPaymentTokenHistroy,\n\n  *worker(action) {\n    try {\n      yield put(gettigPaymentTokenHistory());\n      const resp = yield purchaseItemService.search(action.payload);\n      yield put(getPaymentTokenHistroySuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getPaymentTokenHistroyFail(err));\n    }\n  }\n\n}];\nexport default flatten([createSagas(userSagas)]);","map":null,"metadata":{},"sourceType":"module"}