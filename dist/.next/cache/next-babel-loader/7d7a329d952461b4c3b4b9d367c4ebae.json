{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/dtest.live/pages/live/groupchat.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport './index.less';\nimport { PureComponent } from 'react';\nimport Header from 'next/head';\nimport { Row, Col, message } from 'antd';\nimport GroupChatContainer from '@components/streaming/group-streaming-container';\nimport { streamService } from 'src/services';\nimport { connect } from 'react-redux';\nimport { resetStreamMessage, getStreamConversation } from '@redux/stream-chat/actions';\nimport { SocketContext, Event } from 'src/socket';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport Router from 'next/router';\nimport { Description } from '@components/streaming';\nimport { getResponseError } from '@lib/utils'; // eslint-disable-next-line no-shadow\n\nvar STREAM_EVENT;\n\n(function (STREAM_EVENT) {\n  STREAM_EVENT[\"JOINED_THE_ROOM\"] = \"JOINED_THE_ROOM\";\n  STREAM_EVENT[\"JOIN_ROOM\"] = \"JOIN_ROOM\";\n  STREAM_EVENT[\"LEAVE_ROOM\"] = \"LEAVE_ROOM\";\n  STREAM_EVENT[\"RECEIVED_PAID_TOKEN\"] = \"RECEIVED_PAID_TOKEN\";\n  STREAM_EVENT[\"STREAM_INFORMATION_CHANGED\"] = \"private-stream/streamInformationChanged\";\n})(STREAM_EVENT || (STREAM_EVENT = {}));\n\nvar PerformerGroupChat = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PerformerGroupChat, _PureComponent);\n\n  var _super = _createSuper(PerformerGroupChat);\n\n  function PerformerGroupChat(props) {\n    var _this;\n\n    _classCallCheck(this, PerformerGroupChat);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"streamRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"socket\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onbeforeunload\", function () {\n      _this.leaveSession();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"receivedPaidTokenHandler\", function (_ref) {\n      var _activeConversation$d;\n\n      var token = _ref.token,\n          conversationId = _ref.conversationId;\n      var activeConversation = _this.props.activeConversation;\n      var receivedToken = _this.state.receivedToken;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n        _this.setState({\n          receivedToken: receivedToken + token\n        });\n      }\n    });\n\n    _this.state = {\n      roomJoined: false,\n      total: 0,\n      receivedToken: 0,\n      members: []\n    };\n    return _this;\n  }\n\n  _createClass(PerformerGroupChat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.socket = this.context;\n      window.addEventListener('beforeunload', this.onbeforeunload);\n      Router.events.on('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('beforeunload', this.onbeforeunload);\n      Router.events.off('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"handler\",\n    value: function handler(_ref2) {\n      var _activeConversation$d2;\n\n      var total = _ref2.total,\n          members = _ref2.members,\n          conversationId = _ref2.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d2 = activeConversation.data) === null || _activeConversation$d2 === void 0 ? void 0 : _activeConversation$d2._id) === conversationId) {\n        this.setState({\n          total: total,\n          members: members\n        });\n      }\n    }\n  }, {\n    key: \"leaveSession\",\n    value: function leaveSession() {\n      var _activeConversation$d3;\n\n      var _this$props = this.props,\n          activeConversation = _this$props.activeConversation,\n          dispatchResetStreamMessage = _this$props.resetStreamMessage;\n\n      if (this.socket && activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d3 = activeConversation.data) !== null && _activeConversation$d3 !== void 0 && _activeConversation$d3._id) {\n        this.socket.emit(STREAM_EVENT.LEAVE_ROOM, {\n          conversationId: activeConversation.data._id\n        });\n        this.socket.off(STREAM_EVENT.RECEIVED_PAID_TOKEN);\n        dispatchResetStreamMessage();\n      }\n\n      this.setState({\n        roomJoined: false,\n        total: 0,\n        receivedToken: 0,\n        members: []\n      });\n    }\n  }, {\n    key: \"startConversation\",\n    value: function () {\n      var _startConversation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var dispatchGetStreamConversation, resp, error;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatchGetStreamConversation = this.props.getStreamConversation;\n                _context.prev = 1;\n                _context.next = 4;\n                return streamService.startGroupChat();\n\n              case 4:\n                resp = _context.sent;\n\n                if (resp && resp.data) {\n                  this.socket = this.context;\n                  this.streamRef && this.streamRef.start(resp.data.sessionId, resp.data.conversation._id);\n                  dispatchGetStreamConversation({\n                    conversation: resp.data.conversation\n                  });\n                  this.socket && this.socket.emit(STREAM_EVENT.JOIN_ROOM, {\n                    conversationId: resp.data.conversation._id\n                  });\n                }\n\n                _context.next = 14;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                _context.next = 12;\n                return Promise.resolve(_context.t0);\n\n              case 12:\n                error = _context.sent;\n                message.error(getResponseError(error));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8]]);\n      }));\n\n      function startConversation() {\n        return _startConversation.apply(this, arguments);\n      }\n\n      return startConversation;\n    }()\n  }, {\n    key: \"roomJoinedHandler\",\n    value: function roomJoinedHandler(_ref3) {\n      var _activeConversation$d4;\n\n      var total = _ref3.total,\n          members = _ref3.members,\n          conversationId = _ref3.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d4 = activeConversation.data) === null || _activeConversation$d4 === void 0 ? void 0 : _activeConversation$d4._id) === conversationId) {\n        this.setState({\n          total: total,\n          members: members,\n          roomJoined: true\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          total = _this$state.total,\n          members = _this$state.members,\n          roomJoined = _this$state.roomJoined,\n          receivedToken = _this$state.receivedToken;\n      return __jsx(React.Fragment, null, __jsx(Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }\n      }, __jsx(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }\n      }, \"Group Chat\")), __jsx(Event, {\n        event: STREAM_EVENT.STREAM_INFORMATION_CHANGED,\n        handler: this.handler.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }), __jsx(Event, {\n        event: STREAM_EVENT.JOINED_THE_ROOM,\n        handler: this.roomJoinedHandler.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }\n      }), __jsx(Event, {\n        event: STREAM_EVENT.RECEIVED_PAID_TOKEN,\n        handler: this.receivedPaidTokenHandler.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 9\n        }\n      }), __jsx(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }\n      }, __jsx(Col, {\n        md: 12,\n        xs: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }\n      }, __jsx(GroupChatContainer, {\n        ref: function ref(_ref4) {\n          _this2.streamRef = _ref4;\n        },\n        configs: {\n          localVideoId: 'localVideoId'\n        },\n        onClick: this.startConversation.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }\n      }), __jsx(Description, {\n        roomJoined: roomJoined,\n        receivedToken: receivedToken,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }\n      })), __jsx(Col, {\n        md: 12,\n        xs: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }\n      }, __jsx(ChatBox, _extends({}, this.props, {\n        totalParticipant: total,\n        members: members,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }\n      })))));\n    }\n  }]);\n\n  return PerformerGroupChat;\n}(PureComponent);\n\n_defineProperty(PerformerGroupChat, \"authenticate\", true);\n\n_defineProperty(PerformerGroupChat, \"onlyPerformer\", true);\n\nPerformerGroupChat.contextType = SocketContext;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user.current,\n    loggedIn: state.auth.loggedIn,\n    activeConversation: state.streamMessage.activeConversation\n  };\n};\n\nvar mapDispatchs = {\n  getStreamConversation: getStreamConversation,\n  resetStreamMessage: resetStreamMessage\n};\nexport default connect(mapStateToProps, mapDispatchs)(PerformerGroupChat);","map":null,"metadata":{},"sourceType":"module"}