{"ast":null,"code":"import { omit } from 'lodash';\nimport { isUrl } from '@lib/string';\nimport cookie from 'js-cookie';\nimport { TOKEN } from 'src/services/api-request';\nimport { APIRequest } from './api-request';\nexport class PhotoService extends APIRequest {\n  search(params) {\n    return this.get(this.buildUrl('/performer/performer-assets/photos/search', params));\n  }\n\n  searchByGallery(galleryId, params, headers) {\n    return this.get(this.buildUrl(`/user/performer-assets/photos/${galleryId}/search`, params), headers);\n  }\n\n  details(id, headers) {\n    return this.get(`/performer/performer-assets/photos/${id}/view`, headers);\n  }\n\n  myPhotos(query) {\n    return this.get(this.buildUrl('/performer/performer-assets/photos/search', query));\n  }\n\n  remove(id) {\n    return this.del(`/performer/performer-assets/photos/${id}`);\n  }\n\n  create(url, data, options = {\n    onProgress() {}\n\n  }) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData(); // formData.append('file', file, file.name);\n\n      if (data.photo) {\n        const photo = data.photo.file.originFileObj;\n        formData.append('photo', photo, photo.name);\n      }\n\n      Object.keys(omit(data, ['photo'])).forEach(v => {\n        formData.append(v, data[v]);\n      });\n      req.responseType = 'json';\n      req.open('POST', isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n      const token = cookie.get(TOKEN);\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n  update(url, data, options = {\n    onProgress() {}\n\n  }) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData(); // formData.append('file', file, file.name);\n\n      if (data.photo && data.photo.file) {\n        const photo = data.photo.file.originFileObj;\n        formData.append('photo', photo, photo.name);\n      }\n\n      Object.keys(omit(data, ['photo'])).forEach(v => {\n        formData.append(v, data[v]);\n      });\n      req.responseType = 'json';\n      req.open('PUT', isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n      const token = cookie.get(TOKEN);\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n  uploadImages(file, payload, onProgress) {\n    return this.upload('/performer/performer-assets/photos/upload', [{\n      fieldname: 'photo',\n      file\n    }], {\n      onProgress,\n      customData: payload\n    });\n  }\n\n}\nexport const photoService = new PhotoService();","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/services/photo.service.ts"],"names":["omit","isUrl","cookie","TOKEN","APIRequest","PhotoService","search","params","get","buildUrl","searchByGallery","galleryId","headers","details","id","myPhotos","query","remove","del","create","url","data","options","onProgress","Promise","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","percentage","loaded","total","success","status","response","formData","FormData","photo","file","originFileObj","append","name","Object","keys","forEach","v","responseType","open","process","env","NEXT_PUBLIC_API_ENDPOINT","token","setRequestHeader","send","update","uploadImages","payload","fieldname","customData","photoService"],"mappings":"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","sourcesContent":["import { omit } from 'lodash';\nimport { isUrl } from '@lib/string';\nimport cookie from 'js-cookie';\nimport { TOKEN } from 'src/services/api-request';\nimport {\n  IResponse,\n  IPerformerPhotoPayload,\n  IDataResponse,\n  IPhoto\n} from 'src/interfaces';\nimport { APIRequest } from './api-request';\n\nexport class PhotoService extends APIRequest {\n  search(params?: {\n    [key: string]: string;\n  }): Promise<IResponse<IDataResponse<IPhoto>>> {\n    return this.get(\n      this.buildUrl('/performer/performer-assets/photos/search', params)\n    );\n  }\n\n  searchByGallery(\n    galleryId: string,\n    params?: {\n      [key: string]: any;\n    },\n    headers?: Record<string, any>\n  ) {\n    return this.get(\n      this.buildUrl(\n        `/user/performer-assets/photos/${galleryId}/search`,\n        params\n      ),\n      headers\n    );\n  }\n\n  details(id: string, headers?: { [key: string]: string }) {\n    return this.get(`/performer/performer-assets/photos/${id}/view`, headers);\n  }\n\n  myPhotos(query?: { [key: string]: any }) {\n    return this.get(\n      this.buildUrl('/performer/performer-assets/photos/search', query)\n    );\n  }\n\n  remove(id: string) {\n    return this.del(`/performer/performer-assets/photos/${id}`);\n  }\n\n  create(\n    url: string,\n    data: IPerformerPhotoPayload,\n    options: { onProgress: Function } = {\n      onProgress() {}\n    }\n  ): Promise<IResponse<any>> {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: (event.loaded / event.total) * 100\n          });\n        }\n      });\n\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const { response } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      // formData.append('file', file, file.name);\n      if (data.photo) {\n        const photo = data.photo.file.originFileObj;\n        formData.append('photo', photo, photo.name);\n      }\n\n      Object.keys(omit(data, ['photo'])).forEach((v) => {\n        formData.append(v, data[v]);\n      });\n\n      req.responseType = 'json';\n      req.open('POST', isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n\n      const token: any = cookie.get(TOKEN);\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n      req.send(formData);\n    });\n  }\n\n  update(\n    url: string,\n    data: IPerformerPhotoPayload,\n    options: { onProgress: Function } = {\n      onProgress() {}\n    }\n  ): Promise<IResponse<any>> {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: (event.loaded / event.total) * 100\n          });\n        }\n      });\n\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const { response } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      // formData.append('file', file, file.name);\n      if (data.photo && data.photo.file) {\n        const photo = data.photo.file.originFileObj;\n        formData.append('photo', photo, photo.name);\n      }\n\n      Object.keys(omit(data, ['photo'])).forEach((v) => {\n        formData.append(v, data[v]);\n      });\n\n      req.responseType = 'json';\n      req.open('PUT', isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n\n      const token: any = cookie.get(TOKEN);\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n      req.send(formData);\n    });\n  }\n\n  uploadImages(file: File, payload: any, onProgress?: Function) {\n    return this.upload(\n      '/performer/performer-assets/photos/upload',\n      [\n        {\n          fieldname: 'photo',\n          file\n        }\n      ],\n      {\n        onProgress,\n        customData: payload\n      }\n    );\n  }\n}\n\nexport const photoService = new PhotoService();\n"]},"metadata":{},"sourceType":"module"}