{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable no-nested-ternary */\nimport React, { PureComponent, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport Link from 'next/link';\nimport './MessageList.less';\nimport { loadMoreStreamMessages, receiveStreamMessageSuccess, resetStreamMessage, deleteMessage, deleteMessageSuccess } from '@redux/stream-chat/actions';\nimport { SocketContext } from 'src/socket';\nimport Router from 'next/router';\nimport Compose from './Compose';\nimport Message from './Message';\n\nvar MessageList = /*#__PURE__*/function (_PureComponent) {\n  _inherits(MessageList, _PureComponent);\n\n  var _super = _createSuper(MessageList);\n\n  function MessageList() {\n    var _this;\n\n    _classCallCheck(this, MessageList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"messagesRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      page: 1,\n      onloadmore: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onbeforeunload\", function () {\n      var _this$props = _this.props,\n          conversation = _this$props.conversation,\n          dispatchResetStreamMessage = _this$props.resetStreamMessage;\n\n      if (conversation && conversation._id) {\n        dispatchResetStreamMessage();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMessage\", function (message, type) {\n      var _this$props2 = _this.props,\n          dispatchReceiveStreamMessageSuccess = _this$props2.receiveStreamMessageSuccess,\n          dispatchDeleteMessageSuccess = _this$props2.deleteMessageSuccess;\n\n      if (!message) {\n        return;\n      }\n\n      type === 'created' && dispatchReceiveStreamMessageSuccess(message);\n      type === 'deleted' && dispatchDeleteMessageSuccess(message);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDelete\", function (messageId) {\n      var dispatchDeleteMessage = _this.props.deleteMessage;\n      if (!messageId) return;\n      dispatchDeleteMessage({\n        messageId: messageId\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderMessages\", function () {\n      var _this$props3 = _this.props,\n          message = _this$props3.message,\n          currentUser = _this$props3.currentUser,\n          currentPerformer = _this$props3.currentPerformer,\n          conversation = _this$props3.conversation,\n          loggedIn = _this$props3.loggedIn;\n      var messages = message.items;\n      var fetching = message.fetching;\n      var i = 0;\n      var messageCount = messages && messages.length;\n\n      if (!messages.length && !fetching) {\n        var text = loggedIn ? 'There are no chat!' : __jsx(React.Fragment, null, \"There are no chat, please\", __jsx(Link, {\n          href: \"/auth/register\"\n        }, __jsx(\"a\", null, \" register \")), \"or\", __jsx(Link, {\n          href: \"/auth/login\"\n        }, __jsx(\"a\", null, \" login \")), \"to send message!\");\n        return __jsx(Message, {\n          data: {\n            isSystem: true,\n            text: text\n          }\n        });\n      }\n\n      var tempMessages = [];\n\n      while (i < messageCount) {\n        var previous = messages[i - 1];\n        var current = messages[i];\n        var next = messages[i + 1];\n        var userId = currentUser && currentUser._id ? currentUser._id : currentPerformer && currentPerformer._id ? currentPerformer._id : null;\n        var isMine = current.senderId === userId;\n        var currentMoment = moment(current.createdAt);\n        var prevBySameAuthor = false;\n        var nextBySameAuthor = false;\n        var startsSequence = true;\n        var endsSequence = true;\n        var showTimestamp = true;\n        var isOwner = conversation && conversation.performerId === current.senderId;\n        var canDelete = !current.isDeleted && currentPerformer && currentPerformer._id === conversation.performerId || !current.isDeleted && currentUser._id === current.senderId || !current.isDeleted && currentUser.roles && currentUser.roles.includes('admin');\n\n        if (previous) {\n          var previousMoment = moment(previous.createdAt);\n          var previousDuration = moment.duration(currentMoment.diff(previousMoment));\n          prevBySameAuthor = previous.senderId === current.senderId;\n\n          if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n            startsSequence = false;\n          }\n\n          if (previousDuration.as('hours') < 1) {\n            showTimestamp = false;\n          }\n        }\n\n        if (next) {\n          var nextMoment = moment(next.createdAt);\n          var nextDuration = moment.duration(nextMoment.diff(currentMoment));\n          nextBySameAuthor = next.senderId === current.senderId;\n\n          if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n            endsSequence = false;\n          }\n        }\n\n        if (current._id) {\n          tempMessages.push(__jsx(Message, {\n            onDelete: _this.onDelete.bind(_assertThisInitialized(_this), current._id),\n            canDelete: canDelete,\n            isOwner: isOwner,\n            key: i,\n            isMine: isMine,\n            startsSequence: startsSequence,\n            endsSequence: endsSequence,\n            showTimestamp: showTimestamp,\n            data: current\n          }));\n        } // Proceed to the next message.\n\n\n        i += 1;\n      }\n\n      _this.scrollToBottom();\n\n      return tempMessages;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rejoin\", function () {\n      var conversation = _this.props.conversation;\n\n      if (conversation && conversation._id) {\n        var socket = _this.context;\n        conversation.type === 'stream_public' && socket.emit('public-stream/rejoin', {\n          conversationId: conversation._id\n        });\n        (conversation.type === 'stream_group' || conversation.type === 'stream_private') && socket.emit('REJOIN_ROOM', {\n          conversationId: conversation._id\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(MessageList, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var conversation, socket;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.messagesRef) this.messagesRef = /*#__PURE__*/createRef();\n                conversation = this.props.conversation;\n                socket = this.context;\n\n                if (conversation && conversation._id) {\n                  socket && socket.on && socket.on(\"message_created_conversation_\".concat(conversation._id), function (data) {\n                    _this2.onMessage(data, 'created');\n                  });\n                  socket && socket.on && socket.on(\"message_deleted_conversation_\".concat(conversation._id), function (data) {\n                    _this2.onMessage(data, 'deleted');\n                  });\n                }\n\n                Router.events.on('routeChangeStart', this.onbeforeunload);\n                window.addEventListener('beforeunload', this.onbeforeunload);\n                this.reconnect();\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var conversation = this.props.conversation;\n      var socket = this.context;\n      socket && socket.off(\"message_created_conversation_\".concat(conversation._id));\n      socket && socket.off(\"message_deleted_conversation_\".concat(conversation._id));\n      socket && socket.off('reconnect', this.rejoin);\n      Router.events.on('routeChangeStart', this.onbeforeunload);\n      window.addEventListener('beforeunload', this.onbeforeunload);\n    }\n  }, {\n    key: \"handleScroll\",\n    value: function () {\n      var _handleScroll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(conversation, event) {\n        var _this$props4, message, isPublic, dispatchLoadMoreStreamMessages, page, fetching, items, total, canloadmore, ele;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props4 = this.props, message = _this$props4.message, isPublic = _this$props4.isPublic, dispatchLoadMoreStreamMessages = _this$props4.loadMoreStreamMessages;\n                page = this.state.page;\n                fetching = message.fetching, items = message.items, total = message.total;\n                canloadmore = total > items.length;\n                ele = event.target;\n\n                if (canloadmore) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 7:\n                if (!(ele.scrollTop === 0 && conversation._id && !fetching && canloadmore)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.next = 10;\n                return this.setState({\n                  page: page + 1,\n                  onloadmore: true\n                });\n\n              case 10:\n                dispatchLoadMoreStreamMessages({\n                  conversationId: conversation._id,\n                  type: conversation.type,\n                  limit: 25,\n                  offset: page * 25,\n                  isPublic: isPublic\n                });\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleScroll(_x, _x2) {\n        return _handleScroll.apply(this, arguments);\n      }\n\n      return handleScroll;\n    }()\n  }, {\n    key: \"scrollToBottom\",\n    value: function scrollToBottom() {\n      var onloadmore = this.state.onloadmore;\n\n      if (onloadmore) {\n        return;\n      }\n\n      if (this.messagesRef && this.messagesRef.current) {\n        var ele = this.messagesRef.current;\n        window.setTimeout(function () {\n          ele.scroll({\n            top: ele.scrollHeight,\n            behavior: 'smooth'\n          });\n        }, 200);\n      }\n    }\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var socket = this.context;\n\n      if (socket) {\n        socket.on('reconnect', this.rejoin);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          conversation = _this$props5.conversation,\n          isPublic = _this$props5.isPublic,\n          message = _this$props5.message;\n      var fetching = message.fetching;\n      if (!this.messagesRef) this.messagesRef = /*#__PURE__*/createRef();\n      return __jsx(\"div\", {\n        className: \"message-list\",\n        onScroll: this.handleScroll.bind(this, conversation)\n      }, conversation && conversation._id && __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"message-list-container\",\n        ref: this.messagesRef\n      }, fetching && __jsx(\"p\", {\n        className: \"text-center\"\n      }, \"fetching...\"), this.renderMessages()), __jsx(Compose, {\n        conversation: conversation,\n        isPublic: isPublic\n      })));\n    }\n  }]);\n\n  return MessageList;\n}(PureComponent);\n\nMessageList.contextType = SocketContext;\n\nvar mapStates = function mapStates(state) {\n  var _state$streamMessage = state.streamMessage,\n      conversationMap = _state$streamMessage.conversationMap,\n      activeConversation = _state$streamMessage.activeConversation;\n  var messages = activeConversation.data && conversationMap[activeConversation.data._id] ? conversationMap[activeConversation.data._id].items || [] : [];\n  var totalMessages = activeConversation.data && conversationMap[activeConversation.data._id] ? conversationMap[activeConversation.data._id].total || 0 : 0;\n  var fetching = activeConversation.data && conversationMap[activeConversation.data._id] ? conversationMap[activeConversation.data._id].fetching || false : false;\n  return {\n    message: {\n      items: messages,\n      total: totalMessages,\n      fetching: fetching\n    },\n    conversation: activeConversation.data,\n    currentUser: state.user.current,\n    currentPerformer: state.performer.current,\n    loggedIn: state.auth.loggedIn\n  };\n};\n\nvar mapDispatch = {\n  loadMoreStreamMessages: loadMoreStreamMessages,\n  receiveStreamMessageSuccess: receiveStreamMessageSuccess,\n  deleteMessage: deleteMessage,\n  deleteMessageSuccess: deleteMessageSuccess,\n  resetStreamMessage: resetStreamMessage\n};\nexport default connect(mapStates, mapDispatch)(MessageList);","map":null,"metadata":{},"sourceType":"module"}