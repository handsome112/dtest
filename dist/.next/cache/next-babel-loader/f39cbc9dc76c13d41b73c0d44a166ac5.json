{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/var/www/dtest.live/src/components/payout-request/form.tsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Form, Row, Col, Button, Input, DatePicker, Space, Statistic, message, Select } from 'antd';\nimport { tailFormItemLayout } from 'src/lib';\nimport { paymentAccountTypes, PAYMENT_ACCOUNT } from 'src/interfaces';\nimport { payoutRequestService } from 'src/services';\nimport './index.less';\nimport moment from 'moment';\n\nvar PayoutRequestForm = function PayoutRequestForm(_ref) {\n  var payout = _ref.payout,\n      submit = _ref.submit,\n      submitting = _ref.submitting,\n      role = _ref.role;\n\n  var _React$useState = React.useState(payout.tokenMustPay || 0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tokenMustPay = _React$useState2[0],\n      setTokenMustPay = _React$useState2[1];\n\n  var _React$useState3 = React.useState(payout.previousPaidOut || 0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      previousPaidOut = _React$useState4[0],\n      setPreviousPaidOut = _React$useState4[1];\n\n  var _React$useState5 = React.useState(payout.pendingToken || 0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      pendingToken = _React$useState6[0],\n      setPendingToken = _React$useState6[1];\n\n  var handleDateChange = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, dateStrings) {\n      var query, resp;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!(!dateStrings[0] || !dateStrings[1])) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              query = {\n                fromDate: dateStrings[0],\n                toDate: dateStrings[1]\n              };\n              _context.next = 6;\n              return payoutRequestService.calculate(query, role);\n\n            case 6:\n              resp = _context.sent;\n              setTokenMustPay(resp.data.totalPrice);\n              setPreviousPaidOut(resp.data.paidPrice);\n              setPendingToken(resp.data.remainingPrice);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              message.error('Something went wrong. Please try to input date again∆í!');\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 12]]);\n    }));\n\n    return function handleDateChange(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var paymentAccountType = payout.paymentAccountType,\n      requestNote = payout.requestNote,\n      fromDate = payout.fromDate,\n      toDate = payout.toDate;\n  return __jsx(Form, {\n    form: form,\n    layout: \"vertical\",\n    className: \"payout-request-form\",\n    name: \"payoutRequestForm\",\n    onFinish: submit,\n    initialValues: {\n      paymentAccountType: paymentAccountType || PAYMENT_ACCOUNT.WIRE,\n      requestNote: requestNote || '',\n      date: fromDate && toDate ? [moment(fromDate), moment(toDate)] : []\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    xs: 24,\n    sm: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    name: \"date\",\n    label: \"Date\",\n    rules: [{\n      required: true,\n      message: 'Please input the date!'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, __jsx(DatePicker.RangePicker, {\n    onChange: handleDateChange,\n    disabled: !!(payout !== null && payout !== void 0 && payout._id),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }))), __jsx(Col, {\n    xs: 24,\n    sm: 16,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, __jsx(Space, {\n    size: \"large\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, __jsx(Statistic, {\n    title: \"Earnings For The Selected Date\",\n    value: tokenMustPay,\n    precision: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), __jsx(Statistic, {\n    title: \"Previous Payout\",\n    value: previousPaidOut,\n    precision: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }), __jsx(Statistic, {\n    title: \"Earnings Pending In Your Account\",\n    value: pendingToken,\n    precision: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  })))), __jsx(Form.Item, {\n    label: \"Payment Account Type\",\n    name: \"paymentAccountType\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    disabled: !!(payout !== null && payout !== void 0 && payout._id),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, paymentAccountTypes.map(function (t) {\n    return __jsx(Select.Option, {\n      value: t.value,\n      key: t.value,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, t.title);\n  }))), __jsx(Form.Item, {\n    label: \"Comment\",\n    name: \"requestNote\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, _extends({}, tailFormItemLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    type: \"primary\",\n    loading: submitting,\n    htmlType: \"submit\",\n    disabled: !tokenMustPay,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Save Change\")));\n};\n\nPayoutRequestForm.defaultProps = {\n  role: 'performer'\n};\nexport default PayoutRequestForm;","map":null,"metadata":{},"sourceType":"module"}