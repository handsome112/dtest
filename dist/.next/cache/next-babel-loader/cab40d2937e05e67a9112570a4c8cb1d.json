{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable camelcase */\nimport * as React from 'react';\nimport classnames from 'classnames';\nimport withAntMedia from 'src/antmedia';\nimport { streamService } from 'src/services';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport './index.less';\nimport videojs from 'video.js';\nimport Router from 'next/router';\nvar DEFAULT_IMAGE_URL = '/';\n\nvar Subscriber = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(Subscriber, _React$PureComponent);\n\n  var _super = _createSuper(Subscriber);\n\n  function Subscriber() {\n    var _this;\n\n    _classCallCheck(this, Subscriber);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"streamId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onTrack\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"player\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"getLiveStreamOrVodURLInterval\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onbeforeunload\", function () {\n      _this.destroyPlaybackVideo();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"ended\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var settings, src;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.player && _this.player.error(null);\n              settings = _this.props.settings;\n\n              if (_this.streamId) {\n                _context.next = 5;\n                break;\n              }\n\n              _this.resetPlaybackVideo();\n\n              return _context.abrupt(\"return\");\n\n            case 5:\n              _context.next = 7;\n              return streamService.getLiveStreamOrVodURL({\n                streamId: _this.streamId,\n                settings: settings,\n                appName: settings.AntMediaAppname\n              });\n\n            case 7:\n              src = _context.sent;\n\n              if (src) {\n                _this.getLiveStreamOrVodURLInterval = setInterval(function () {\n                  fetch(src, {\n                    method: 'HEAD'\n                  }).then(function () {\n                    _this.playHLS(_this.streamId);\n                  });\n                }, 5000);\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    return _this;\n  }\n\n  _createClass(Subscriber, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Router.events.on('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Router.events.off('routeChangeStart', this.onbeforeunload);\n\n      if (this.getLiveStreamOrVodURLInterval) {\n        clearInterval(this.getLiveStreamOrVodURLInterval);\n        this.getLiveStreamOrVodURLInterval = null;\n      }\n    }\n  }, {\n    key: \"handelWebRTCAdaptorCallback\",\n    value: function () {\n      var _handelWebRTCAdaptorCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(info, obj) {\n        var _this$props, webRTCAdaptor, settings, token, _token;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$props = this.props, webRTCAdaptor = _this$props.webRTCAdaptor, settings = _this$props.settings;\n\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.INITIALIZED)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 4;\n                return streamService.getSubscriberToken({\n                  streamId: this.streamId,\n                  settings: settings\n                });\n\n              case 4:\n                token = _context2.sent;\n                webRTCAdaptor.play(this.streamId, token);\n                _context2.next = 27;\n                break;\n\n              case 8:\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.NEW_STREAM_AVAILABLE)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                if (!(this.onTrack === obj.streamId)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 11:\n                if (this.player) {\n                  this.player.dispose();\n                  this.player = null;\n                }\n\n                this.onTrack = obj.streamId;\n                this.createRemoteVideo(obj.stream);\n                _context2.next = 27;\n                break;\n\n              case 16:\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.PLAY_FINISHED)) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                this.onTrack = null;\n                setTimeout(function () {\n                  webRTCAdaptor.getStreamInfo(obj.streamId);\n                }, 5000);\n                _context2.next = 27;\n                break;\n\n              case 21:\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.STREAM_INFORMATION)) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                if (!(obj.streamId === this.streamId)) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                _context2.next = 25;\n                return streamService.getSubscriberToken({\n                  streamId: obj.streamId,\n                  settings: settings\n                });\n\n              case 25:\n                _token = _context2.sent;\n                webRTCAdaptor.play(obj.streamId, _token);\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handelWebRTCAdaptorCallback(_x, _x2) {\n        return _handelWebRTCAdaptorCallback.apply(this, arguments);\n      }\n\n      return handelWebRTCAdaptorCallback;\n    }()\n  }, {\n    key: \"cbErrorHandler\",\n    value: function cbErrorHandler(error) {\n      if (error === 'no_stream_exist') {\n        var _this$props2 = this.props,\n            webRTCAdaptor = _this$props2.webRTCAdaptor,\n            initWebRTCAdaptor = _this$props2.initWebRTCAdaptor;\n\n        if (!webRTCAdaptor) {\n          initWebRTCAdaptor(this.handelWebRTCAdaptorCallback.bind(this), this.cbErrorHandler.bind(this));\n        } else {\n          this.streamId && webRTCAdaptor.getStreamInfo(this.streamId);\n        }\n      }\n    }\n  }, {\n    key: \"createPlaybackideo\",\n    value: function createPlaybackideo() {\n      var _this2 = this;\n\n      var poster = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_IMAGE_URL;\n      var classNames = this.props.classNames;\n      var video = document.createElement('video');\n      video.setAttribute('id', 'subscriber');\n      video.setAttribute('class', classnames('video-js broadcaster', classNames));\n      video.autoplay = true;\n      video.muted = true;\n      video.controls = true;\n      video.playsInline = true;\n      document.querySelector('.video-container').append(video);\n      var player = videojs('subscriber', {\n        autoplay: true,\n        liveui: true,\n        muted: true,\n        controls: true,\n        bigPlayButton: false,\n        poster: poster\n      }, function () {\n        _this2.player = player;\n      });\n      player.on('ended', this.ended);\n      player.on('error', this.ended);\n    }\n  }, {\n    key: \"resetPlaybackVideo\",\n    value: function resetPlaybackVideo() {\n      var poster = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_IMAGE_URL;\n      this.destroyPlaybackVideo();\n\n      if (this.getLiveStreamOrVodURLInterval) {\n        clearInterval(this.getLiveStreamOrVodURLInterval);\n        this.getLiveStreamOrVodURLInterval = null;\n      }\n\n      this.createPlaybackideo(poster);\n    }\n  }, {\n    key: \"destroyPlaybackVideo\",\n    value: function destroyPlaybackVideo() {\n      this.streamId = null;\n      this.onTrack = null;\n\n      if (this.player) {\n        this.player.dispose();\n        this.player = null;\n      }\n    }\n  }, {\n    key: \"createRemoteVideo\",\n    value: function createRemoteVideo(stream) {\n      var _this3 = this;\n\n      var classNames = this.props.classNames;\n      var video = document.createElement('video');\n      video.setAttribute('id', 'subscriber');\n      video.setAttribute('class', classnames('video-js broadcaster', classNames));\n      video.autoplay = true;\n      video.muted = true;\n      video.playsInline = true;\n      video.srcObject = stream;\n      document.querySelector('.video-container').append(video);\n      var player = videojs('subscriber', {\n        liveui: true,\n        autoplay: true,\n        controls: true\n      }, function () {\n        _this3.player = player;\n      });\n      player.on('error', function () {\n        player.error(null);\n      });\n      player.addClass('vjs-waiting');\n    }\n  }, {\n    key: \"play\",\n    value: function () {\n      var _play = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(streamId) {\n        var _this$props3, initWebRTCAdaptor, initialized, webRTCAdaptor, settings, token;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props3 = this.props, initWebRTCAdaptor = _this$props3.initWebRTCAdaptor, initialized = _this$props3.initialized, webRTCAdaptor = _this$props3.webRTCAdaptor, settings = _this$props3.settings;\n                this.streamId = streamId;\n\n                if (!initialized) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.next = 5;\n                return streamService.getSubscriberToken({\n                  streamId: streamId,\n                  settings: settings\n                });\n\n              case 5:\n                token = _context3.sent;\n                webRTCAdaptor.play(streamId, token);\n                return _context3.abrupt(\"return\");\n\n              case 8:\n                initWebRTCAdaptor(this.handelWebRTCAdaptorCallback.bind(this), this.cbErrorHandler.bind(this));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function play(_x3) {\n        return _play.apply(this, arguments);\n      }\n\n      return play;\n    }()\n  }, {\n    key: \"playHLS\",\n    value: function () {\n      var _playHLS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(streamId) {\n        var _this4 = this;\n\n        var streamHeight,\n            _this$props4,\n            configs,\n            settings,\n            appName,\n            src,\n            _args4 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                streamHeight = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : 0;\n\n                if (streamId) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                if (!this.player) {\n                  this.createPlaybackideo();\n                }\n\n                if (this.getLiveStreamOrVodURLInterval) {\n                  clearInterval(this.getLiveStreamOrVodURLInterval);\n                  this.getLiveStreamOrVodURLInterval = null;\n                }\n\n                _this$props4 = this.props, configs = _this$props4.configs, settings = _this$props4.settings;\n                appName = configs.appName || settings.AntMediaAppname;\n                this.streamId = streamId;\n                _context4.next = 10;\n                return streamService.getLiveStreamOrVodURL({\n                  appName: appName,\n                  settings: settings,\n                  streamId: streamId\n                }, streamHeight);\n\n              case 10:\n                src = _context4.sent;\n\n                if (src) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 13:\n                setTimeout(function () {\n                  if (!_this4.player) return;\n\n                  _this4.player.addClass('vjs-waiting');\n\n                  _this4.player.src({\n                    type: 'application/x-mpegURL',\n                    src: src\n                  });\n\n                  _this4.player.play();\n\n                  _this4.player.controls(true);\n                }, 1 * 1000);\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function playHLS(_x4) {\n        return _playHLS.apply(this, arguments);\n      }\n\n      return playHLS;\n    }()\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.resetPlaybackVideo();\n    }\n  }, {\n    key: \"poster\",\n    value: function poster(src) {\n      if (this.player) {\n        this.player.poster(src);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"video-container\"\n      });\n    }\n  }]);\n\n  return Subscriber;\n}(React.PureComponent);\n\nexport default _c = withAntMedia(Subscriber);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/components/streaming/subscriber.tsx"],"names":["React","classnames","withAntMedia","streamService","WEBRTC_ADAPTOR_INFORMATIONS","videojs","Router","DEFAULT_IMAGE_URL","Subscriber","destroyPlaybackVideo","player","error","settings","props","streamId","resetPlaybackVideo","getLiveStreamOrVodURL","appName","AntMediaAppname","src","getLiveStreamOrVodURLInterval","setInterval","fetch","method","then","playHLS","events","on","onbeforeunload","off","clearInterval","info","obj","webRTCAdaptor","INITIALIZED","getSubscriberToken","token","play","NEW_STREAM_AVAILABLE","onTrack","dispose","createRemoteVideo","stream","PLAY_FINISHED","setTimeout","getStreamInfo","STREAM_INFORMATION","initWebRTCAdaptor","handelWebRTCAdaptorCallback","bind","cbErrorHandler","poster","classNames","video","document","createElement","setAttribute","autoplay","muted","controls","playsInline","querySelector","append","liveui","bigPlayButton","ended","createPlaybackideo","srcObject","addClass","initialized","streamHeight","configs","type","PureComponent"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport * as React from 'react';\nimport classnames from 'classnames';\nimport withAntMedia from 'src/antmedia';\nimport { streamService } from 'src/services';\nimport { StreamSettings } from 'src/interfaces';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport {\n  WebRTCAdaptorConfigs,\n  WebRTCAdaptorProps\n} from 'src/antmedia/interfaces';\nimport './index.less';\nimport videojs from 'video.js';\nimport Router from 'next/router';\n\ninterface IProps extends WebRTCAdaptorProps {\n  settings: StreamSettings;\n  configs: Partial<WebRTCAdaptorConfigs>;\n}\n\nconst DEFAULT_IMAGE_URL = '/';\n\nclass Subscriber extends React.PureComponent<IProps> {\n  private streamId: string;\n\n  private onTrack: string;\n\n  private player: videojs.Player;\n\n  private getLiveStreamOrVodURLInterval: NodeJS.Timeout;\n\n  componentDidMount() {\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n  }\n\n  componentWillUnmount() {\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n    if (this.getLiveStreamOrVodURLInterval) {\n      clearInterval(this.getLiveStreamOrVodURLInterval);\n      this.getLiveStreamOrVodURLInterval = null;\n    }\n  }\n\n  onbeforeunload = () => {\n    this.destroyPlaybackVideo();\n  };\n\n  ended = async () => {\n    this.player && this.player.error(null);\n    const { settings } = this.props;\n    if (!this.streamId) {\n      this.resetPlaybackVideo();\n      return;\n    }\n\n    const src = await streamService.getLiveStreamOrVodURL({\n      streamId: this.streamId,\n      settings,\n      appName: settings.AntMediaAppname\n    });\n    if (src) {\n      this.getLiveStreamOrVodURLInterval = setInterval(() => {\n        fetch(src, { method: 'HEAD' }).then(() => {\n          this.playHLS(this.streamId);\n        });\n      }, 5000);\n    }\n  };\n\n  async handelWebRTCAdaptorCallback(\n    info: WEBRTC_ADAPTOR_INFORMATIONS,\n    obj: any\n  ) {\n    const { webRTCAdaptor, settings } = this.props;\n    if (info === WEBRTC_ADAPTOR_INFORMATIONS.INITIALIZED) {\n      const token = await streamService.getSubscriberToken({\n        streamId: this.streamId,\n        settings\n      });\n      webRTCAdaptor.play(this.streamId, token);\n    } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.NEW_STREAM_AVAILABLE) {\n      if (this.onTrack === obj.streamId) {\n        return;\n      }\n\n      if (this.player) {\n        this.player.dispose();\n        this.player = null;\n      }\n\n      this.onTrack = obj.streamId;\n      this.createRemoteVideo(obj.stream);\n    } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.PLAY_FINISHED) {\n      this.onTrack = null;\n      setTimeout(() => {\n        webRTCAdaptor.getStreamInfo(obj.streamId);\n      }, 5000);\n    } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.STREAM_INFORMATION) {\n      if (obj.streamId === this.streamId) {\n        const token = await streamService.getSubscriberToken({\n          streamId: obj.streamId,\n          settings\n        });\n        webRTCAdaptor.play(obj.streamId, token);\n      }\n    }\n  }\n\n  cbErrorHandler(error: string) {\n    if (error === 'no_stream_exist') {\n      const { webRTCAdaptor, initWebRTCAdaptor } = this.props;\n      if (!webRTCAdaptor) {\n        initWebRTCAdaptor(\n          this.handelWebRTCAdaptorCallback.bind(this),\n          this.cbErrorHandler.bind(this)\n        );\n      } else {\n        this.streamId && webRTCAdaptor.getStreamInfo(this.streamId);\n      }\n    }\n  }\n\n  createPlaybackideo(poster = DEFAULT_IMAGE_URL) {\n    const { classNames } = this.props;\n    const video = document.createElement('video');\n    video.setAttribute('id', 'subscriber');\n    video.setAttribute('class', classnames('video-js broadcaster', classNames));\n    video.autoplay = true;\n    video.muted = true;\n    video.controls = true;\n    video.playsInline = true;\n    document.querySelector('.video-container').append(video);\n    const player = videojs(\n      'subscriber',\n      {\n        autoplay: true,\n        liveui: true,\n        muted: true,\n        controls: true,\n        bigPlayButton: false,\n        poster\n      },\n      () => {\n        this.player = player;\n      }\n    );\n    player.on('ended', this.ended);\n    player.on('error', this.ended);\n  }\n\n  resetPlaybackVideo(poster = DEFAULT_IMAGE_URL) {\n    this.destroyPlaybackVideo();\n    if (this.getLiveStreamOrVodURLInterval) {\n      clearInterval(this.getLiveStreamOrVodURLInterval);\n      this.getLiveStreamOrVodURLInterval = null;\n    }\n    this.createPlaybackideo(poster);\n  }\n\n  destroyPlaybackVideo() {\n    this.streamId = null;\n    this.onTrack = null;\n    if (this.player) {\n      this.player.dispose();\n      this.player = null;\n    }\n  }\n\n  createRemoteVideo(stream: any) {\n    const { classNames } = this.props;\n    const video = document.createElement('video');\n    video.setAttribute('id', 'subscriber');\n    video.setAttribute('class', classnames('video-js broadcaster', classNames));\n    video.autoplay = true;\n    video.muted = true;\n    video.playsInline = true;\n    video.srcObject = stream;\n    document.querySelector('.video-container').append(video);\n    const player = videojs('subscriber', {\n      liveui: true,\n      autoplay: true,\n      controls: true\n    }, () => {\n      this.player = player;\n    });\n    player.on('error', () => {\n      player.error(null);\n    });\n    player.addClass('vjs-waiting');\n  }\n\n  async play(streamId: string) {\n    const {\n      initWebRTCAdaptor, initialized, webRTCAdaptor, settings\n    } = this.props;\n    this.streamId = streamId;\n    if (initialized) {\n      const token = await streamService.getSubscriberToken({\n        streamId,\n        settings\n      });\n      webRTCAdaptor.play(streamId, token);\n      return;\n    }\n\n    initWebRTCAdaptor(\n      this.handelWebRTCAdaptorCallback.bind(this),\n      this.cbErrorHandler.bind(this)\n    );\n  }\n\n  async playHLS(streamId: string, streamHeight = 0) {\n    if (!streamId) {\n      return;\n    }\n\n    if (!this.player) {\n      this.createPlaybackideo();\n    }\n\n    if (this.getLiveStreamOrVodURLInterval) {\n      clearInterval(this.getLiveStreamOrVodURLInterval);\n      this.getLiveStreamOrVodURLInterval = null;\n    }\n\n    const { configs, settings } = this.props;\n    const appName = configs.appName || settings.AntMediaAppname;\n    this.streamId = streamId;\n    const src = await streamService.getLiveStreamOrVodURL(\n      {\n        appName,\n        settings,\n        streamId\n      },\n      streamHeight\n    );\n    if (!src) {\n      return;\n    }\n\n    setTimeout(() => {\n      if (!this.player) return;\n\n      this.player.addClass('vjs-waiting');\n      this.player.src({\n        type: 'application/x-mpegURL',\n        src\n      });\n      this.player.play();\n      this.player.controls(true);\n    }, 1 * 1000);\n  }\n\n  stop() {\n    this.resetPlaybackVideo();\n  }\n\n  poster(src: string) {\n    if (this.player) {\n      this.player.poster(src);\n    }\n  }\n\n  render() {\n    return <div className=\"video-container\" />;\n  }\n}\n\nexport default withAntMedia(Subscriber);\n"]},"metadata":{},"sourceType":"module"}