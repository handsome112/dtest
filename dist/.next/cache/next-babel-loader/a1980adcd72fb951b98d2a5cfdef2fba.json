{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { Button, message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Router from 'next/router';\nimport Head from 'next/head';\nimport { connect } from 'react-redux';\nimport { getMyProducts, removeMyProduct } from '@redux/performer/actions';\nimport ProductsTable from '@components/products/products-table';\nimport { performerService } from '@services/perfomer.service';\nimport { getResponseError, getSearchData } from '@lib/utils';\nimport './index.less';\n\nclass PerformerProductsPage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      limit: 5,\n      offset: 0,\n      sortBy: 'createdAt',\n      sort: 'desc',\n      filter: {}\n    };\n  }\n\n  componentDidMount() {\n    const {\n      getMyProducts: dispatchGetMyProducts\n    } = this.props;\n    dispatchGetMyProducts(_objectSpread({}, this.state));\n  }\n\n  componentDidUpdate(prevProps, prevStates) {\n    const {\n      getMyProducts: dispatchGetMyProducts\n    } = this.props;\n\n    if (prevStates !== this.state) {\n      dispatchGetMyProducts(_objectSpread({}, this.state));\n    }\n  }\n\n  onChange(pagination, filters, sorter) {\n    const oldState = this.state;\n    this.setState(getSearchData(pagination, filters, sorter, oldState));\n  }\n\n  async onRemove(id) {\n    const {\n      removeMyProduct: dispatchRemoveMyProduct\n    } = this.props;\n\n    if (!window.confirm('Are you sure you want to delete this item?')) {\n      return false;\n    }\n\n    try {\n      await performerService.removeProduct(id);\n      message.success('Removed!');\n      dispatchRemoveMyProduct(id);\n    } catch (e) {\n      const err = await Promise.resolve(e);\n      message.error(getResponseError(err));\n    }\n\n    return {};\n  }\n\n  render() {\n    const {\n      data,\n      searching,\n      total\n    } = this.props;\n    const {\n      limit\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My Products\")), __jsx(\"div\", {\n      className: \"performer-products-page\"\n    }, __jsx(\"div\", {\n      className: \"ant-page-header\"\n    }, __jsx(PageHeader, {\n      title: \"My Product\",\n      extra: __jsx(Button, {\n        type: \"primary\",\n        onClick: () => Router.push('/account/performer/products/add')\n      }, \"Add new Product\")\n    })), __jsx(ProductsTable, {\n      products: data,\n      searching: searching,\n      total: total,\n      onChange: this.onChange.bind(this),\n      pageSize: limit,\n      remove: this.onRemove.bind(this)\n    })));\n  }\n\n}\n\n_defineProperty(PerformerProductsPage, \"authenticate\", true);\n\n_defineProperty(PerformerProductsPage, \"layout\", 'primary');\n\nconst mapStateToProps = state => _objectSpread({}, state.performer.assets.products);\n\nconst mapDispatch = {\n  getMyProducts,\n  removeMyProduct\n};\nexport default connect(mapStateToProps, mapDispatch)(PerformerProductsPage);","map":null,"metadata":{},"sourceType":"module"}