{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport Header from 'next/head';\nimport { Row, Col, message, List, Button } from 'antd';\nimport Router from 'next/router';\nimport { performerService, streamService, transactionService } from 'src/services';\nimport { connect } from 'react-redux';\nimport { getStreamConversationSuccess, loadMoreStreamMessages, resetStreamMessage } from '@redux/stream-chat/actions';\nimport { updateCurrentUserBalance } from '@redux/user/actions';\nimport { SocketContext, Event } from 'src/socket';\nimport nextCookie from 'next-cookies';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport { getResponseError } from '@lib/utils';\nimport GroupPublisher from '@components/streaming/webrtc/groupchat/publisher';\nimport GroupSubscriber from '@components/streaming/webrtc/groupchat/subscriber';\nimport { StatusCodes } from 'http-status-codes'; // import './index.less';\n// eslint-disable-next-line no-shadow\n\nvar EVENT;\n\n(function (EVENT) {\n  EVENT[\"JOIN_ROOM\"] = \"JOIN_ROOM\";\n  EVENT[\"LEAVE_ROOM\"] = \"LEAVE_ROOM\";\n  EVENT[\"STREAM_INFORMATION_CHANGED\"] = \"private-stream/streamInformationChanged\";\n  EVENT[\"SEND_PAID_TOKEN\"] = \"SEND_PAID_TOKEN\";\n})(EVENT || (EVENT = {}));\n\nvar JOINED_THE_ROOM = 'JOINED_THE_ROOM';\nvar MODEL_LEFT_ROOM = 'MODEL_LEFT_ROOM';\nvar STREAM_JOINED = 'private-stream/streamJoined';\nvar STREAM_LEAVED = 'private-stream/streamLeaved';\n\nvar ListItem = function ListItem(_ref) {\n  var description = _ref.description,\n      title = _ref.title;\n  return __jsx(List.Item, null, __jsx(Row, {\n    style: {\n      width: '100%'\n    }\n  }, __jsx(Col, {\n    className: \"light-text\",\n    sm: {\n      span: 6\n    },\n    xs: {\n      span: 12\n    }\n  }, title), __jsx(Col, {\n    style: {\n      fontWeight: 'bold'\n    },\n    sm: {\n      span: 18\n    },\n    xs: {\n      span: 12\n    }\n  }, description)));\n};\n\nvar UserPrivateChat = /*#__PURE__*/function (_PureComponent) {\n  _inherits(UserPrivateChat, _PureComponent);\n\n  var _super = _createSuper(UserPrivateChat);\n\n  function UserPrivateChat(props) {\n    var _this;\n\n    _classCallCheck(this, UserPrivateChat);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"localVideoId\", 'group-publisher');\n\n    _defineProperty(_assertThisInitialized(_this), \"remoteVideoContainerClassname\", 'group-video-container');\n\n    _defineProperty(_assertThisInitialized(_this), \"publisherRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"subscriberRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"streamId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"streamList\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"interval\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"socket\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onbeforeunload\", function () {\n      _this.leaveSession();\n    });\n\n    _this.state = {\n      processing: false,\n      roomJoined: false,\n      total: 0,\n      callTime: 0,\n      paidToken: 0,\n      members: []\n    };\n    return _this;\n  }\n\n  _createClass(UserPrivateChat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.publisherRef = /*#__PURE__*/React.createRef();\n      this.subscriberRef = /*#__PURE__*/React.createRef();\n      this.socket = this.context;\n      window.addEventListener('beforeunload', this.onbeforeunload);\n      Router.events.on('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _activeConversation$d;\n\n      var activeConversation = this.props.activeConversation;\n\n      if (activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d = activeConversation.data) !== null && _activeConversation$d !== void 0 && _activeConversation$d._id && activeConversation !== prevProps.activeConversation) {\n        this.initSocketEvent();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('beforeunload', this.onbeforeunload);\n      Router.events.off('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"handler\",\n    value: function handler(_ref2) {\n      var _activeConversation$d2;\n\n      var total = _ref2.total,\n          members = _ref2.members,\n          conversationId = _ref2.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d2 = activeConversation.data) === null || _activeConversation$d2 === void 0 ? void 0 : _activeConversation$d2._id) === conversationId) {\n        this.setState({\n          total: total,\n          members: members\n        });\n      }\n    }\n  }, {\n    key: \"leaveSession\",\n    value: function leaveSession() {\n      var _this$props = this.props,\n          activeConversation = _this$props.activeConversation,\n          dispatchResetStreamMessage = _this$props.resetStreamMessage;\n      dispatchResetStreamMessage();\n      this.socket.off(JOINED_THE_ROOM);\n      this.socket.off(STREAM_JOINED);\n      this.socket.off(STREAM_LEAVED);\n      this.socket.off(MODEL_LEFT_ROOM);\n\n      if (this.socket && activeConversation && activeConversation.data) {\n        this.socket.emit(EVENT.LEAVE_ROOM, {\n          conversationId: activeConversation.data._id\n        });\n      }\n\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n\n      this.setState({\n        processing: false,\n        roomJoined: false,\n        total: 0,\n        members: []\n      });\n    }\n  }, {\n    key: \"joinGroupChat\",\n    value: function () {\n      var _joinGroupChat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this$props2, performer, dispatchGetStreamConversationSuccess, dispatchLoadStreamMessages, resp, _resp$data, sessionId, conversation, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props2 = this.props, performer = _this$props2.performer, dispatchGetStreamConversationSuccess = _this$props2.getStreamConversationSuccess, dispatchLoadStreamMessages = _this$props2.loadMoreStreamMessages;\n                _context.prev = 1;\n                this.setState({\n                  processing: true\n                });\n                _context.next = 5;\n                return streamService.joinGroupChat(performer._id);\n\n              case 5:\n                resp = _context.sent;\n\n                if (resp && resp.data) {\n                  this.socket = this.context;\n                  _resp$data = resp.data, sessionId = _resp$data.sessionId, conversation = _resp$data.conversation;\n                  this.publisherRef.current && this.publisherRef.current.start(conversation._id, sessionId);\n                  dispatchGetStreamConversationSuccess({\n                    data: conversation\n                  });\n                  dispatchLoadStreamMessages({\n                    conversationId: conversation._id,\n                    limit: 25,\n                    offset: 0,\n                    type: conversation.type\n                  });\n                  message.success('Success');\n                  this.socket.emit(EVENT.JOIN_ROOM, {\n                    conversationId: conversation._id\n                  });\n                }\n\n                _context.next = 15;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](1);\n                _context.next = 13;\n                return Promise.resolve(_context.t0);\n\n              case 13:\n                error = _context.sent;\n                message.error(getResponseError(error));\n\n              case 15:\n                _context.prev = 15;\n                this.setState({\n                  processing: false\n                });\n                return _context.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 9, 15, 18]]);\n      }));\n\n      function joinGroupChat() {\n        return _joinGroupChat.apply(this, arguments);\n      }\n\n      return joinGroupChat;\n    }()\n  }, {\n    key: \"roomJoinedHandler\",\n    value: function roomJoinedHandler(_ref3) {\n      var _activeConversation$d3,\n          _this2 = this;\n\n      var total = _ref3.total,\n          members = _ref3.members,\n          conversationId = _ref3.conversationId;\n      var _this$props3 = this.props,\n          activeConversation = _this$props3.activeConversation,\n          performer = _this$props3.performer,\n          user = _this$props3.user;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d3 = activeConversation.data) === null || _activeConversation$d3 === void 0 ? void 0 : _activeConversation$d3._id) === conversationId) {\n        this.interval = setInterval(function () {\n          var callTime = _this2.state.callTime;\n\n          if (user.balance < performer.groupCallPrice) {\n            message.warn('Your balance is not enough token.');\n            setTimeout(function () {\n              return window.location.reload();\n            }, 10 * 1000);\n            return;\n          }\n\n          _this2.setState({\n            callTime: callTime + 1\n          });\n\n          _this2.sendPaidToken(conversationId);\n        }, 60 * 1000);\n        this.setState({\n          total: total,\n          members: members,\n          roomJoined: true,\n          callTime: 0\n        });\n      }\n    }\n  }, {\n    key: \"leave\",\n    value: function leave() {\n      this.publisherRef.current && this.publisherRef.current.stop();\n      this.subscriberRef.current && this.subscriberRef.current.stop();\n      setTimeout(function () {\n        window.location.href = '/';\n      }, 10 * 1000);\n    }\n  }, {\n    key: \"sendPaidToken\",\n    value: function () {\n      var _sendPaidToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(conversationId) {\n        var _this$props4, performer, dispatchUpdateBalance, paidToken, newState, error;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _this$props4 = this.props, performer = _this$props4.performer, dispatchUpdateBalance = _this$props4.updateCurrentUserBalance;\n                paidToken = this.state.paidToken;\n                _context2.next = 5;\n                return transactionService.sendPaidToken(conversationId);\n\n              case 5:\n                newState = {\n                  paidToken: paidToken + performer.groupCallPrice\n                };\n                this.setState(newState);\n                dispatchUpdateBalance(performer.groupCallPrice * -1);\n                _context2.next = 16;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](0);\n                _context2.next = 14;\n                return Promise.resolve(_context2.t0);\n\n              case 14:\n                error = _context2.sent;\n\n                if (error.statusCode === 400) {\n                  message.error('Your tokens do not enough, please buy more.');\n                  clearInterval(this.interval);\n                  this.leave();\n                }\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 10]]);\n      }));\n\n      function sendPaidToken(_x) {\n        return _sendPaidToken.apply(this, arguments);\n      }\n\n      return sendPaidToken;\n    }()\n  }, {\n    key: \"initSocketEvent\",\n    value: function initSocketEvent() {\n      var _this3 = this;\n\n      this.socket = this.context;\n      this.socket.on(JOINED_THE_ROOM, function (_ref4) {\n        var streamId = _ref4.streamId,\n            streamList = _ref4.streamList,\n            conversationId = _ref4.conversationId;\n        var activeConversation = _this3.props.activeConversation;\n        if (conversationId !== activeConversation.data._id) return;\n        _this3.streamId = streamId;\n        _this3.streamList = streamList;\n        _this3.publisherRef.current && _this3.publisherRef.current.publish(streamId);\n\n        if (streamList.length) {\n          _this3.subscriberRef.current && _this3.subscriberRef.current.play(streamList);\n        }\n      });\n      this.socket.on(STREAM_JOINED, function (data) {\n        var activeConversation = _this3.props.activeConversation;\n        if (data.conversationId !== activeConversation.data._id) return;\n\n        if (_this3.streamId !== data.streamId) {\n          _this3.subscriberRef.current && _this3.subscriberRef.current.play([data.streamId]);\n        }\n      });\n      this.socket.on(STREAM_LEAVED, function (data) {\n        var activeConversation = _this3.props.activeConversation;\n        if (data.conversationId !== activeConversation.data._id) return;\n        _this3.streamList = _this3.streamList.filter(function (id) {\n          return id !== data.streamId;\n        });\n\n        if (_this3.streamId !== data.streamId) {\n          _this3.subscriberRef.current && _this3.subscriberRef.current.close(data.streamId);\n        }\n      });\n      this.socket.on(MODEL_LEFT_ROOM, function (data) {\n        var activeConversation = _this3.props.activeConversation;\n        if (data.conversationId !== activeConversation.data._id) return;\n        message.error('Model has left the room. You will be redirected in 10 seconds');\n        setTimeout(function () {\n          Router.push('/');\n        }, 10000);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var performer = this.props.performer;\n      var _this$state = this.state,\n          processing = _this$state.processing,\n          total = _this$state.total,\n          members = _this$state.members,\n          roomJoined = _this$state.roomJoined,\n          callTime = _this$state.callTime,\n          paidToken = _this$state.paidToken;\n      var dataSource = [{\n        title: 'Call time',\n        description: \"\".concat(callTime, \" minute(s)\")\n      }, {\n        title: 'Status',\n        description: roomJoined ? 'Live' : ''\n      }, {\n        title: 'Paid Token',\n        description: \"\".concat(paidToken, \" token(s)\")\n      }, {\n        title: 'Token per minute',\n        description: \"\".concat(performer.groupCallPrice, \" token(s)\") || 'N/A'\n      }];\n      return __jsx(React.Fragment, null, __jsx(Header, null, __jsx(\"title\", null, \"Group Chat\")), __jsx(Event, {\n        event: EVENT.STREAM_INFORMATION_CHANGED,\n        handler: this.handler.bind(this)\n      }), __jsx(Event, {\n        event: JOINED_THE_ROOM,\n        handler: this.roomJoinedHandler.bind(this)\n      }), __jsx(Row, null, __jsx(Col, {\n        md: 12,\n        xs: 24\n      }, !roomJoined ? __jsx(Button, {\n        type: \"primary\",\n        onClick: this.joinGroupChat.bind(this),\n        loading: processing,\n        block: true\n      }, \"Join Conversation\") : __jsx(Button, {\n        type: \"primary\",\n        onClick: this.leave.bind(this),\n        block: true,\n        disabled: processing\n      }, \"Stop Streaming\"), __jsx(Row, {\n        className: this.remoteVideoContainerClassname\n      }, __jsx(GroupPublisher, _extends({}, this.props, {\n        ref: this.publisherRef,\n        containerClassName: this.remoteVideoContainerClassname,\n        configs: {\n          localVideoId: this.localVideoId\n        }\n      })), __jsx(GroupSubscriber, _extends({}, this.props, {\n        ref: this.subscriberRef,\n        containerClassName: this.remoteVideoContainerClassname,\n        configs: {\n          isPlayMode: true\n        }\n      }))), __jsx(List, {\n        dataSource: dataSource,\n        renderItem: function renderItem(item) {\n          return __jsx(ListItem, {\n            description: item.description,\n            title: item.title\n          });\n        }\n      })), __jsx(Col, {\n        xs: 24,\n        md: 12\n      }, __jsx(ChatBox, _extends({}, this.props, {\n        totalParticipant: total,\n        members: members\n      })))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref5) {\n        var ctx, query, _nextCookie, token, headers, resp, performer;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                ctx = _ref5.ctx;\n                _context3.prev = 1;\n                query = ctx.query;\n\n                if (!(true && query.performer)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  performer: JSON.parse(query.performer)\n                });\n\n              case 5:\n                _nextCookie = nextCookie(ctx), token = _nextCookie.token;\n                headers = {\n                  Authorization: token\n                };\n                _context3.next = 9;\n                return performerService.details(query.username, headers);\n\n              case 9:\n                resp = _context3.sent;\n                performer = resp.data;\n\n                if (!performer.isBlocked) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                throw StatusCodes.FORBIDDEN;\n\n              case 13:\n                return _context3.abrupt(\"return\", {\n                  performer: performer\n                });\n\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](1);\n\n                if (!true) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", Router.push('/'));\n\n              case 20:\n                ctx.res.writeHead && ctx.res.writeHead(302, {\n                  Location: '/'\n                });\n                ctx.res.end && ctx.res.end();\n                return _context3.abrupt(\"return\", {});\n\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 16]]);\n      }));\n\n      function getInitialProps(_x2) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return UserPrivateChat;\n}(PureComponent);\n\n_defineProperty(UserPrivateChat, \"authenticate\", true);\n\nUserPrivateChat.contextType = SocketContext;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread(_objectSpread({}, state.streaming), {}, {\n    ui: state.ui,\n    user: state.user.current,\n    loggedIn: state.auth.loggedIn,\n    activeConversation: state.streamMessage.activeConversation\n  });\n};\n\nvar mapDispatchs = {\n  getStreamConversationSuccess: getStreamConversationSuccess,\n  loadMoreStreamMessages: loadMoreStreamMessages,\n  resetStreamMessage: resetStreamMessage,\n  updateCurrentUserBalance: updateCurrentUserBalance\n};\nexport default connect(mapStateToProps, mapDispatchs)(UserPrivateChat);","map":null,"metadata":{},"sourceType":"module"}