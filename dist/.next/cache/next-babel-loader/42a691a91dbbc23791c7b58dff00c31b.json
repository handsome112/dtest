{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { isUrl } from '@lib/string';\nimport { omit } from 'lodash';\nimport cookie from 'js-cookie';\nimport { APIRequest, TOKEN } from './api-request';\nexport var PerformerService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(PerformerService, _APIRequest);\n\n  var _super = _createSuper(PerformerService);\n\n  function PerformerService() {\n    _classCallCheck(this, PerformerService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PerformerService, [{\n    key: \"me\",\n    value: function me(headers) {\n      return this.get('/performers/me', headers);\n    }\n  }, {\n    key: \"updateMe\",\n    value: function updateMe(payload) {\n      return this.put('/performers', payload);\n    }\n  }, {\n    key: \"search\",\n    value: function search(query) {\n      return this.get(this.buildUrl('/performers/search', query));\n    }\n  }, {\n    key: \"details\",\n    value: function details(username) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get(\"/performers/\".concat(username, \"/view\"), headers);\n    }\n  }, {\n    key: \"getAvatarUploadUrl\",\n    value: function getAvatarUploadUrl() {\n      return \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT, \"/performers/avatar/upload\");\n    }\n  }, {\n    key: \"getDocumentsUploadUrl\",\n    value: function getDocumentsUploadUrl() {\n      return \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT, \"/performers/documents/upload\");\n    }\n  }, {\n    key: \"getReleaseFormUrl\",\n    value: function getReleaseFormUrl() {\n      return \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT, \"/performers/release-form/upload\");\n    }\n  }, {\n    key: \"myProduct\",\n    value: function myProduct(query) {\n      return this.get(this.buildUrl('/performer/performer-assets/products/search', query));\n    }\n  }, {\n    key: \"createProduct\",\n    value: function createProduct(url, data) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        onProgress: function onProgress() {}\n      };\n      return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.upload.addEventListener('progress', function (event) {\n          if (event.lengthComputable) {\n            options.onProgress({\n              percentage: event.loaded / event.total * 100\n            });\n          }\n        });\n        req.addEventListener('load', function () {\n          var success = req.status >= 200 && req.status < 300;\n          var response = req.response;\n\n          if (!success) {\n            return reject(response);\n          }\n\n          return resolve(response);\n        });\n        req.upload.addEventListener('error', function () {\n          reject(req.response);\n        });\n        var formData = new FormData(); // formData.append('file', file, file.name);\n\n        if (data.image) {\n          var image = data.image.file.originFileObj;\n          formData.append('image', image, image.name);\n        }\n\n        if (data.digitalFile) {\n          var digitalFile = data.digitalFile.file.originFileObj;\n          formData.append('digitalFile', digitalFile, digitalFile.name);\n        }\n\n        Object.keys(omit(data, ['image', 'digitalFile'])).forEach(function (v) {\n          formData.append(v, data[v]);\n        });\n        req.responseType = 'json';\n        req.open('POST', isUrl(url) ? url : \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT).concat(url));\n        var token = cookie.get(TOKEN);\n\n        if (token) {\n          req.setRequestHeader('Authorization', token);\n        }\n\n        req.send(formData);\n      });\n    }\n  }, {\n    key: \"updateProduct\",\n    value: function updateProduct(url, data) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        onProgress: function onProgress() {}\n      };\n      return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.upload.addEventListener('progress', function (event) {\n          if (event.lengthComputable) {\n            options.onProgress({\n              percentage: event.loaded / event.total * 100\n            });\n          }\n        });\n        req.addEventListener('load', function () {\n          var success = req.status >= 200 && req.status < 300;\n          var response = req.response;\n\n          if (!success) {\n            return reject(response);\n          }\n\n          return resolve(response);\n        });\n        req.upload.addEventListener('error', function () {\n          reject(req.response);\n        });\n        var formData = new FormData(); // formData.append('file', file, file.name);\n\n        if (data.image && data.image.file) {\n          var image = data.image.file.originFileObj;\n          formData.append('image', image, image.name);\n        }\n\n        if (data.digitalFile && data.digitalFile.file) {\n          var digitalFile = data.digitalFile.file.originFileObj;\n          formData.append('digitalFile', digitalFile, digitalFile.name);\n        }\n\n        Object.keys(omit(data, ['image', 'digitalFile'])).forEach(function (v) {\n          formData.append(v, data[v]);\n        });\n        req.responseType = 'json';\n        req.open('PUT', isUrl(url) ? url : \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT).concat(url));\n        var token = cookie.get(TOKEN);\n\n        if (token) {\n          req.setRequestHeader('Authorization', token);\n        }\n\n        req.send(formData);\n      });\n    }\n  }, {\n    key: \"removeProduct\",\n    value: function removeProduct(id) {\n      return this.del(\"/performer/performer-assets/products/\".concat(id));\n    }\n  }, {\n    key: \"getCommission\",\n    value: function getCommission() {\n      return this.get('/settings/performer/commission');\n    }\n  }, {\n    key: \"updatePaymentInfo\",\n    value: function updatePaymentInfo(payload) {\n      return this.post('/performers/bank-transfer/update', payload);\n    }\n  }, {\n    key: \"updateDirectDepost\",\n    value: function updateDirectDepost(payload) {\n      return this.post('/performers/direct-deposit/update', payload);\n    }\n  }, {\n    key: \"updatePaxum\",\n    value: function updatePaxum(payload) {\n      return this.post('/performers/paxum/update', payload);\n    }\n  }, {\n    key: \"updateBitpay\",\n    value: function updateBitpay(payload) {\n      return this.post('/performers/bitpay/update', payload);\n    }\n  }, {\n    key: \"updateStreamingStatus\",\n    value: function updateStreamingStatus(payload) {\n      return this.post('/performers/streaming-status/update', payload);\n    }\n  }, {\n    key: \"geoBlock\",\n    value: function geoBlock(payload) {\n      return this.post('/performers/blocking/update', payload);\n    }\n  }, {\n    key: \"getBlockedList\",\n    value: function getBlockedList() {\n      return this.get(this.buildUrl('/performers/blocking'));\n    }\n  }, {\n    key: \"increaseView\",\n    value: function increaseView(performerId) {\n      return this.post(\"/performers/\".concat(performerId, \"/inc-view\"));\n    }\n  }, {\n    key: \"updateDefaultPrice\",\n    value: function updateDefaultPrice(payload) {\n      return this.post('/performers/default-price/update', payload);\n    }\n  }, {\n    key: \"updateBroadcastSetting\",\n    value: function updateBroadcastSetting(payload) {\n      return this.post('/performers/broadcast-setting/update', payload);\n    }\n  }, {\n    key: \"suspendAccount\",\n    value: function suspendAccount(password) {\n      return this.post('/performers/suspend-account', {\n        password: password\n      });\n    }\n  }, {\n    key: \"checkBlock\",\n    value: function checkBlock(performerId) {\n      return this.get(\"/performers/\".concat(performerId, \"/check-blocking\"));\n    }\n  }]);\n\n  return PerformerService;\n}(APIRequest);\nexport var GENNDER_PERFORMER = ['female', 'transgender', 'male'];\nexport var performerService = new PerformerService();","map":null,"metadata":{},"sourceType":"module"}