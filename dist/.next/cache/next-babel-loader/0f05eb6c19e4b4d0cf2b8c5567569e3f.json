{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/studio/account-information.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Form, Input, Button, Row, Col, Upload } from 'antd';\nimport Countries from '@components/common/base/select/countries';\nimport './index.less';\nimport { TOKEN } from '@services/api-request';\nimport { studioService } from 'src/services';\nimport cookie from 'js-cookie';\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 24\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 24\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 0\n    }\n  }\n};\n\nconst StudioInformation = ({\n  onFinish,\n  loading,\n  name,\n  firstName,\n  lastName,\n  username,\n  email,\n  country,\n  state,\n  // minPayment,\n  phone,\n  address,\n  city,\n  zipcode,\n  documentVerificationId,\n  documentVerification,\n  countries\n}) => {\n  const [certificateId, setCertificateId] = React.useState(documentVerificationId);\n  const [certificate, setCertificate] = React.useState([]);\n  const [form] = Form.useForm();\n  React.useEffect(() => {\n    if (documentVerification) {\n      setCertificate([{\n        uid: documentVerification._id,\n        name: documentVerification.name,\n        status: 'done',\n        url: documentVerification.url\n      }]);\n    }\n  }, []);\n\n  const onCertificateChange = ({\n    file,\n    fileList\n  }) => {\n    if (file.status === 'done' && file.response) {\n      const {\n        data\n      } = file.response;\n      setCertificateId(data.file._id);\n      setCertificate([{\n        uid: data.file._id,\n        name: data.file.name,\n        status: 'done',\n        url: data.url\n      }]);\n    } else {\n      setCertificate(fileList);\n    }\n  };\n\n  const submit = values => {\n    onFinish(_objectSpread(_objectSpread({}, values), {}, {\n      documentVerificationId: certificateId\n    }));\n  };\n\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    onFinish: submit,\n    name: \"contactSettingForm\",\n    className: \"performerEditForm\",\n    initialValues: {\n      firstName,\n      lastName,\n      name,\n      username,\n      email,\n      country,\n      city,\n      state,\n      phone,\n      address,\n      zipcode\n    },\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }), __jsx(Row, {\n    gutter: 25,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    sm: 12,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    name: \"firstName\",\n    label: \"First Name\",\n    rules: [{\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input your first name!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    placeholder: \"First name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"lastName\",\n    label: \"Last Name\",\n    rules: [{\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input your last name!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    placeholder: \"Last name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"name\",\n    label: \"Studio Name\",\n    rules: [{\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Studio name must according to Alphanumeric formating'\n    }, {\n      whitespace: true,\n      message: 'Please input your Studio name!'\n    }, {\n      required: true,\n      message: 'Please input your Studio name!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    placeholder: \"Studio name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"username\",\n    label: \"User Name\",\n    rules: [{\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'User name must according to Alphanumeric formating'\n    }, {\n      whitespace: true,\n      message: 'Please input your user name!'\n    }, {\n      required: true,\n      message: 'Please input your user name!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    placeholder: \"Last name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"email\",\n    label: \"Email Address\",\n    rules: [{\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }, {\n      required: true,\n      message: 'Please input your E-mail!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    placeholder: \"studi@example.com\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 11\n    }\n  }, __jsx(Upload, {\n    showUploadList: {\n      showPreviewIcon: true,\n      showRemoveIcon: false,\n      showDownloadIcon: true\n    },\n    name: \"documentVerification\",\n    headers: {\n      Authorization: false ? cookie.get(TOKEN) : ''\n    },\n    fileList: certificate,\n    listType: \"text\",\n    action: studioService.getDocumentsUploadUrl(),\n    onChange: onCertificateChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 15\n    }\n  }, __jsx(UploadOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 17\n    }\n  }), ' ', \"Upload Company registration certificate\")))), __jsx(Col, {\n    sm: 12,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    name: \"country\",\n    label: \"Country\",\n    rules: [{\n      required: true,\n      message: 'Please input your country!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }, __jsx(Countries, {\n    defaultValue: country,\n    countries: countries,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"state\",\n    label: \"State Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    placeholder: \"samplestate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"city\",\n    label: \"City\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    placeholder: \"samplecity\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"zipcode\",\n    label: \"Zip\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    placeholder: \"012345-678\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"address\",\n    label: \"Address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    placeholder: \"Address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"phone\",\n    label: \"Mobile Phone\",\n    rules: [{\n      min: 8,\n      max: 14,\n      message: '8-14 digits'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    placeholder: \"+18000 0000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  })))), __jsx(Form.Item, _extends({}, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }\n  }, \"Save Changes\")));\n};\n\nexport default StudioInformation;","map":null,"metadata":{},"sourceType":"module"}