{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable camelcase */\nimport { PureComponent } from 'react';\nimport withAntmedia from 'src/antmedia';\nimport { message } from 'antd';\nimport { getResponseError } from '@lib/utils';\nimport { streamService } from 'src/services';\nimport './index.less';\nimport videojs from 'video.js';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport Router from 'next/router';\nimport { isMobile } from 'react-device-detect';\nimport MicControlsPlugin from 'src/videojs/mic-controls/plugin';\nimport { LocalStream } from 'src/antmedia/LocalStream';\n\nvar Publisher = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Publisher, _PureComponent);\n\n  var _super = _createSuper(Publisher);\n\n  function Publisher(props) {\n    var _this;\n\n    _classCallCheck(this, Publisher);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"publisher\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onbeforeunload\", function () {\n      if (_this.publisher) {\n        _this.publisher.dispose();\n\n        _this.publisher = undefined;\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Publisher, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      videojs.registerPlugin('webRTCMicControlsPlugin', MicControlsPlugin);\n      Router.events.on('routeChangeStart', this.onbeforeunload); // window.addEventListener('beforeunload', this.onbeforeunload);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Router.events.off('routeChangeStart', this.onbeforeunload); // window.removeEventListener('beforeunload', this.onbeforeunload);\n    }\n  }, {\n    key: \"startPublishing\",\n    value: function () {\n      var _startPublishing = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(idOfStream) {\n        var _this$props, webRTCAdaptor, leaveSession, settings, token, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = this.props, webRTCAdaptor = _this$props.webRTCAdaptor, leaveSession = _this$props.leaveSession, settings = _this$props.settings;\n                _context.prev = 1;\n                _context.next = 4;\n                return streamService.getPublishToken({\n                  streamId: idOfStream,\n                  settings: settings\n                });\n\n              case 4:\n                token = _context.sent;\n                webRTCAdaptor.publish(idOfStream, token);\n                _context.next = 15;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                _context.next = 12;\n                return Promise.resolve(_context.t0);\n\n              case 12:\n                error = _context.sent;\n                message.error(getResponseError(error));\n                leaveSession();\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8]]);\n      }));\n\n      function startPublishing(_x) {\n        return _startPublishing.apply(this, arguments);\n      }\n\n      return startPublishing;\n    }()\n  }, {\n    key: \"publish\",\n    value: function publish(streamId) {\n      var initialized = this.props.initialized;\n      initialized && this.startPublishing(streamId);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this$props2 = this.props,\n          initWebRTCAdaptor = _this$props2.initWebRTCAdaptor,\n          initialized = _this$props2.initialized,\n          publish_started = _this$props2.publish_started;\n      var onTrack = this.props.onTrack;\n\n      if (initialized && !publish_started && onTrack) {\n        this.startPublishing(onTrack);\n      }\n\n      initWebRTCAdaptor(this.handelWebRTCAdaptorCallback.bind(this));\n    }\n  }, {\n    key: \"handelWebRTCAdaptorCallback\",\n    value: function handelWebRTCAdaptorCallback(info) {\n      var _this2 = this;\n\n      if (info === WEBRTC_ADAPTOR_INFORMATIONS.INITIALIZED) {\n        if (!isMobile) {\n          var _this$props3 = this.props,\n              configs = _this$props3.configs,\n              muteLocalMic = _this$props3.muteLocalMic,\n              unmuteLocalMic = _this$props3.unmuteLocalMic;\n          var player = videojs(configs.localVideoId, {\n            liveui: false,\n            controls: true,\n            muted: true,\n            bigPlayButton: false,\n            controlBar: {\n              playToggle: false,\n              currentTimeDisplay: false,\n              volumePanel: false\n            }\n          });\n          player.on('error', function () {\n            player.error(null);\n          });\n          player.one('play', function () {\n            // eslint-disable-next-line dot-notation\n            player['webRTCMicControlsPlugin']({\n              muteLocalMic: muteLocalMic,\n              unmuteLocalMic: unmuteLocalMic,\n              isMicMuted: false\n            });\n            _this2.publisher = player;\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          initialized = _this$props4.initialized,\n          publish_started = _this$props4.publish_started,\n          classNames = _this$props4.classNames,\n          localVideoId = _this$props4.configs.localVideoId;\n      return __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(LocalStream, {\n        id: localVideoId,\n        hidden: !initialized,\n        className: classNames\n      })), publish_started && __jsx(\"div\", {\n        className: \"text-center\"\n      }, __jsx(\"span\", {\n        className: \"publishing\"\n      }, \"Publishing\")));\n    }\n  }]);\n\n  return Publisher;\n}(PureComponent);\n\nexport default withAntmedia(Publisher);","map":null,"metadata":{},"sourceType":"module"}