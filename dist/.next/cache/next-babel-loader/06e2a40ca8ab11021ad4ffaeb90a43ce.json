{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/photos/gallery-form.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React from 'react';\nimport { Form, Input, Button, Space, Radio, Row, Col, Upload, message, Divider, Select, Checkbox } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport Router from 'next/router';\nimport { formItemLayout, tailFormItemLayout, getBase64, getResponseError, unitPrices } from 'src/lib';\nimport FormInputItem from '@components/common/base/input-item-list';\nimport { photoService } from 'src/services';\nimport './index.less';\nimport NumberFormat from '@components/common/layout/numberformat';\n// const imageStyle: React.CSSProperties = {\n//   height: 225,\n//   width: 225,\n//   objectFit: 'cover',\n//   marginTop: 10\n// };\nconst initialValues = {\n  description: '',\n  isSale: false,\n  status: 'draft'\n};\nconst PERFORMER_GALLERY_STATUS = [{\n  key: 'draft',\n  name: 'Draft'\n}, {\n  key: 'active',\n  name: 'Active'\n}, {\n  key: 'inactive',\n  name: 'Inactive'\n}];\n\nconst FormGallery = ({\n  onFinish,\n  loading,\n  gallery,\n  performer\n}) => {\n  let inputRef;\n  const [form] = Form.useForm();\n  const [uploading, setUploading] = React.useState(false);\n  const [fileList, setFileList] = React.useState([]);\n\n  if (gallery !== null && gallery !== void 0 && gallery.token && !unitPrices.find(p => p.value === gallery.token)) {\n    unitPrices.push({\n      value: gallery.token,\n      text: __jsx(NumberFormat, {\n        value: gallery.token,\n        suffix: \" tokens\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 51\n        }\n      })\n    });\n    unitPrices.sort((a, b) => a.value - b.value);\n  }\n\n  const [tokens, setTokenPrice] = React.useState(unitPrices);\n  const priceSelectOptions = (tokens || []).map(price => ({\n    label: price.text,\n    value: price.value\n  }));\n  const dependencies = ['isSale', 'token'];\n  const formInput = [{\n    name: 'name',\n    label: 'Name',\n    rules: [{\n      required: true,\n      message: 'Please input gallery name!'\n    }],\n    children: __jsx(Input, {\n      placeholder: \"Title Gallery\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    })\n  }, {\n    name: 'description',\n    label: 'Description',\n    children: __jsx(Input.TextArea, {\n      placeholder: \"Title Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    })\n  }, {\n    name: 'isSale',\n    valuePropName: 'checked',\n    children: __jsx(Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, \"Is sale Gallery?\")\n  }, {\n    fieldKey: 'tokenPrice',\n    label: 'Token',\n    dependencies,\n    children: () => __jsx(Form.Item, {\n      name: \"token\",\n      dependencies: dependencies,\n      rules: [({\n        getFieldValue\n      }) => ({\n        validator: (_, value) => new Promise((resolve, reject) => {\n          const isValid = getFieldValue('isSale');\n\n          if (!isValid || isValid && parseInt(value, 10) > 0) {\n            return resolve(null);\n          }\n\n          return reject(new Error('Price must be positive integer number!'));\n        })\n      })],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, __jsx(Select, {\n      disabled: !form.getFieldValue('isSale'),\n      placeholder: \"Please Select Number of Token\",\n      onKeyDown: e => {\n        if (e.keyCode === 13) {\n          return e.preventDefault();\n        }\n\n        return {};\n      },\n      options: priceSelectOptions,\n      dropdownRender: menu => __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }\n      }, menu, __jsx(Divider, {\n        dashed: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 17\n        }\n      }), __jsx(Space, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }\n      }, __jsx(Input, {\n        placeholder: \"Input number of token\",\n        type: \"number\",\n        min: 1,\n        ref: ref => inputRef = ref,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 19\n        }\n      }), __jsx(Button, {\n        onClick: () => {\n          let token = parseInt(inputRef.state.value, 10);\n          if (token < 1) token = 1;\n          if (tokens.find(t => t.value === token)) return;\n          setTokenPrice([...tokens, {\n            text: __jsx(NumberFormat, {\n              value: token,\n              suffix: \" tokens\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 33\n              }\n            }),\n            value: token\n          }].sort((a, b) => a.value - b.value));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 19\n        }\n      }, \"Add\"))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }))\n  }, {\n    name: 'status',\n    label: 'Status',\n    children: __jsx(Radio.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }\n    }, PERFORMER_GALLERY_STATUS.map(status => __jsx(Radio, {\n      value: status.key,\n      key: status.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }, status.name)))\n  }];\n\n  const searchGalleryPhoto = async () => {\n    try {\n      if (gallery._id) {\n        const resp = await photoService.search({\n          galleryId: gallery._id,\n          performerId: performer._id\n        });\n\n        if (resp.data.total > 0) {\n          var _resp$data, _resp$data$data;\n\n          setFileList((_resp$data = resp.data) === null || _resp$data === void 0 ? void 0 : (_resp$data$data = _resp$data.data) === null || _resp$data$data === void 0 ? void 0 : _resp$data$data.map(p => _objectSpread(_objectSpread({}, p), {}, {\n            uid: p._id,\n            name: p.title,\n            status: 'done',\n            uploadStatus: p.status,\n            url: p.photo.url\n          })));\n        }\n      }\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n    }\n  };\n\n  const onUploading = file => {// console.log(file);\n  };\n\n  const handleUploadPhotos = async () => {\n    if (!gallery && !gallery._id) return;\n\n    if (!fileList || !fileList.length) {\n      message.error('Please select photo!');\n      return;\n    }\n\n    const data = {\n      galleryId: gallery._id,\n      token: 0,\n      performerId: performer._id,\n      status: 'active'\n    };\n    const uploadFiles = [...fileList].filter(f => f.status === 'uploading' && f.originFileObj);\n\n    if (!uploadFiles.length) {\n      message.error('Please select new file!');\n      return;\n    }\n\n    setUploading(true);\n    /**\n     * Upload photos\n     */\n\n    try {\n      const resp = await Promise.all(uploadFiles.map(file => photoService.uploadImages(file.originFileObj, data, onUploading)));\n      const uploadedFiles = fileList.filter(f => f.status === 'done');\n      const uploadingFiles = fileList.filter(f => f.status === 'uploading');\n      setFileList([...uploadedFiles, ...resp.map(({\n        data: d\n      }, index) => d._id && _objectSpread(_objectSpread(_objectSpread({}, uploadingFiles[index]), d), {}, {\n        uid: d._id,\n        status: 'done',\n        uploadStatus: d.status,\n        name: d.title\n      }))]);\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n    }\n\n    setUploading(false);\n  };\n\n  const handleBeforeUpload = () => false;\n\n  const handleChange = async ({\n    fileList: fl\n  }) => {\n    const files = await Promise.all(fl.filter(file => file.status !== 'done').map(file => getBase64(file.originFileObj, 'uploading', file)));\n    const uploadedFiles = fl.filter(file => file.status === 'done');\n    setFileList([...uploadedFiles, ...files.map(file => _objectSpread({}, file))]);\n  };\n\n  const onPreview = f => {\n    const file = f;\n    file.status = file.uploadStatus;\n    Router.push({\n      pathname: '/account/performer/photos/update',\n      query: {\n        data: JSON.stringify(file)\n      }\n    }, `/account/performer/photos/${file.uid}/update`);\n  };\n\n  const onRemove = async file => {\n    try {\n      setUploading(true);\n      await photoService.remove(file.uid);\n      message.success('Removed!');\n    } catch (e) {\n      const err = await Promise.resolve(e);\n      message.error(getResponseError(err));\n      setTimeout(() => setFileList(fileList), 1000);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    if (!uploading && fileList !== null && fileList !== void 0 && fileList.length) {\n      const uploadingFiles = fileList.filter(f => f.status === 'uploading');\n      uploadingFiles.length > 0 && handleUploadPhotos();\n    }\n  }, [fileList, uploading]);\n  React.useEffect(() => {\n    searchGalleryPhoto();\n  }, []);\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    onFinish: onFinish,\n    name: \"galleryCreatingForm\",\n    initialValues: _objectSpread(_objectSpread({}, initialValues), gallery),\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 5\n    }\n  }), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    sm: 24,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 9\n    }\n  }, __jsx(FormInputItem, {\n    fields: formInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 11\n    }\n  }), gallery._id && __jsx(Upload, {\n    accept: \"image/*\",\n    multiple: true,\n    showUploadList: true,\n    onPreview: onPreview,\n    onRemove: onRemove,\n    listType: \"picture-card\",\n    disabled: uploading,\n    fileList: fileList,\n    onChange: handleChange,\n    beforeUpload: handleBeforeUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }\n  }, __jsx(PlusOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 15\n    }\n  }), __jsx(\"div\", {\n    className: \"ant-upload-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 15\n    }\n  }, \"Upload\")))), __jsx(Form.Item, _extends({}, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }\n  }), __jsx(Space, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 11\n    }\n  }, \"Save Changes\"), __jsx(Button, {\n    type: \"primary\",\n    onClick: () => Router.back(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 11\n    }\n  }, \"Back\"))));\n};\n\nFormGallery.defaultProps = {\n  gallery: null,\n  performer: null,\n  remove: null\n};\nexport default FormGallery;","map":null,"metadata":{},"sourceType":"module"}