{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Tabs, message, Form } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport PerformerProfile from '@components/performer/profile-detail';\nimport Router from 'next/router';\nimport { connect } from 'react-redux';\nimport { updatePerformerProfile, updateCurrentPerformer, updatePerformerProfileSuccess, setupdatingPerformerProfile } from 'src/redux/performer/actions';\nimport { performerService, authService } from 'src/services';\nimport ProfileEditForm from '@components/performer/profile-edit-form';\nimport { getResponseError } from 'src/lib/utils';\nimport { ImageUpload } from '@components/file/image-upload';\nimport './index.less';\nimport { beforeAvatarUpload } from '@lib/file';\n\nvar PerformerProfilePage = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PerformerProfilePage, _PureComponent);\n\n  var _super = _createSuper(PerformerProfilePage);\n\n  function PerformerProfilePage(props) {\n    _classCallCheck(this, PerformerProfilePage);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(PerformerProfilePage, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          updateSuccess = _this$props.updateSuccess,\n          updateError = _this$props.updateError;\n\n      if (updateSuccess && prevProps.updateSuccess !== updateSuccess) {\n        message.success('Update Profile Success.');\n      }\n\n      if (prevProps.updateError !== updateError && updateError) {\n        message.error(getResponseError(updateError));\n      }\n    }\n  }, {\n    key: \"onTabsChange\",\n    value: function onTabsChange(key) {\n      Router.push({\n        pathname: '/account/performer/profile',\n        query: {\n          action: key\n        }\n      }, \"/account/performer/profile?action=\".concat(key), {\n        shallow: false\n      });\n    }\n  }, {\n    key: \"onFinish\",\n    value: function onFinish(data) {\n      var _this$props2 = this.props,\n          performer = _this$props2.performer,\n          dispatchupDatePerformerProfile = _this$props2.updatePerformerProfile;\n      dispatchupDatePerformerProfile(_objectSpread(_objectSpread({}, performer), data));\n    }\n  }, {\n    key: \"onUploadedAvatar\",\n    value: function onUploadedAvatar(data) {\n      var _this$props3 = this.props,\n          performer = _this$props3.performer,\n          dispatchUpdatePerformerProfileSuccess = _this$props3.updatePerformerProfileSuccess,\n          dispatchSetUpdating = _this$props3.setupdatingPerformerProfile;\n      dispatchSetUpdating();\n      dispatchUpdatePerformerProfileSuccess(_objectSpread(_objectSpread({}, performer), {}, {\n        avatar: data.response.data.url\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          action = _this$props4.action,\n          performer = _this$props4.performer,\n          categoriesData = _this$props4.categoriesData,\n          updating = _this$props4.updating,\n          countries = _this$props4.countries;\n      var uploadHeaders = {\n        authorization: authService.getToken()\n      };\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My Profile\")), __jsx(\"div\", {\n        className: \"performer-profile-page\"\n      }, __jsx(PageHeader, {\n        title: \"My Profile\"\n      }), __jsx(Tabs, {\n        activeKey: action || 'profile-image',\n        style: {\n          padding: '0 24px'\n        },\n        size: \"large\",\n        onChange: this.onTabsChange.bind(this)\n      }, __jsx(Tabs.TabPane, {\n        tab: \"Profile Image\",\n        key: \"profile-image\"\n      }, __jsx(Form.Item, {\n        label: \"Profile Image\"\n      }, __jsx(ImageUpload, {\n        options: {\n          fieldName: 'avatar'\n        },\n        imageUrl: performer === null || performer === void 0 ? void 0 : performer.avatar,\n        uploadUrl: performerService.getAvatarUploadUrl(),\n        headers: uploadHeaders,\n        beforeUpload: beforeAvatarUpload,\n        onUploaded: this.onUploadedAvatar.bind(this)\n      }))), __jsx(Tabs.TabPane, {\n        tab: \"My Profile\",\n        key: \"profile\"\n      }, __jsx(PerformerProfile, {\n        performer: performer\n      })), __jsx(Tabs.TabPane, {\n        tab: \"Edit Profile\",\n        key: \"edit-profile\"\n      }, __jsx(ProfileEditForm, _extends({}, performer, {\n        categoriesData: categoriesData,\n        countries: countries,\n        onFinish: this.onFinish.bind(this),\n        loading: updating\n      }))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var ctx = _ref.ctx;\n      var query = ctx.query;\n      return {\n        action: query.action\n      };\n    }\n  }]);\n\n  return PerformerProfilePage;\n}(PureComponent);\n\n_defineProperty(PerformerProfilePage, \"authenticate\", true);\n\n_defineProperty(PerformerProfilePage, \"layout\", 'primary');\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    performer: state.performer.current,\n    updating: state.performer.updating,\n    updateSuccess: state.performer.updateSuccess,\n    updateError: state.performer.updateError,\n    categoriesData: state.performer.categories.data,\n    countries: state.settings.countries\n  };\n};\n\nvar mapDispatchs = {\n  updatePerformerProfile: updatePerformerProfile,\n  updateCurrentPerformer: updateCurrentPerformer,\n  updatePerformerProfileSuccess: updatePerformerProfileSuccess,\n  setupdatingPerformerProfile: setupdatingPerformerProfile\n};\nexport default connect(mapStateToProps, mapDispatchs)(PerformerProfilePage);","map":null,"metadata":{},"sourceType":"module"}