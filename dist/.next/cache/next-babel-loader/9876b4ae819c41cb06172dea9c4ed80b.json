{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { omit } from 'lodash';\nimport { isUrl } from '@lib/string';\nimport cookie from 'js-cookie';\nimport { TOKEN } from 'src/services/api-request';\nimport { APIRequest } from './api-request';\nexport var PhotoService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(PhotoService, _APIRequest);\n\n  var _super = _createSuper(PhotoService);\n\n  function PhotoService() {\n    _classCallCheck(this, PhotoService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PhotoService, [{\n    key: \"search\",\n    value: function search(params) {\n      return this.get(this.buildUrl('/performer/performer-assets/photos/search', params));\n    }\n  }, {\n    key: \"searchByGallery\",\n    value: function searchByGallery(galleryId, params, headers) {\n      return this.get(this.buildUrl(\"/user/performer-assets/photos/\".concat(galleryId, \"/search\"), params), headers);\n    }\n  }, {\n    key: \"details\",\n    value: function details(id, headers) {\n      return this.get(\"/performer/performer-assets/photos/\".concat(id, \"/view\"), headers);\n    }\n  }, {\n    key: \"myPhotos\",\n    value: function myPhotos(query) {\n      return this.get(this.buildUrl('/performer/performer-assets/photos/search', query));\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      return this.del(\"/performer/performer-assets/photos/\".concat(id));\n    }\n  }, {\n    key: \"create\",\n    value: function create(url, data) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        onProgress: function onProgress() {}\n      };\n      return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.upload.addEventListener('progress', function (event) {\n          if (event.lengthComputable) {\n            options.onProgress({\n              percentage: event.loaded / event.total * 100\n            });\n          }\n        });\n        req.addEventListener('load', function () {\n          var success = req.status >= 200 && req.status < 300;\n          var response = req.response;\n\n          if (!success) {\n            return reject(response);\n          }\n\n          return resolve(response);\n        });\n        req.upload.addEventListener('error', function () {\n          reject(req.response);\n        });\n        var formData = new FormData(); // formData.append('file', file, file.name);\n\n        if (data.photo) {\n          var photo = data.photo.file.originFileObj;\n          formData.append('photo', photo, photo.name);\n        }\n\n        Object.keys(omit(data, ['photo'])).forEach(function (v) {\n          formData.append(v, data[v]);\n        });\n        req.responseType = 'json';\n        req.open('POST', isUrl(url) ? url : \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT).concat(url));\n        var token = cookie.get(TOKEN);\n\n        if (token) {\n          req.setRequestHeader('Authorization', token);\n        }\n\n        req.send(formData);\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(url, data) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        onProgress: function onProgress() {}\n      };\n      return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.upload.addEventListener('progress', function (event) {\n          if (event.lengthComputable) {\n            options.onProgress({\n              percentage: event.loaded / event.total * 100\n            });\n          }\n        });\n        req.addEventListener('load', function () {\n          var success = req.status >= 200 && req.status < 300;\n          var response = req.response;\n\n          if (!success) {\n            return reject(response);\n          }\n\n          return resolve(response);\n        });\n        req.upload.addEventListener('error', function () {\n          reject(req.response);\n        });\n        var formData = new FormData(); // formData.append('file', file, file.name);\n\n        if (data.photo && data.photo.file) {\n          var photo = data.photo.file.originFileObj;\n          formData.append('photo', photo, photo.name);\n        }\n\n        Object.keys(omit(data, ['photo'])).forEach(function (v) {\n          formData.append(v, data[v]);\n        });\n        req.responseType = 'json';\n        req.open('PUT', isUrl(url) ? url : \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT).concat(url));\n        var token = cookie.get(TOKEN);\n\n        if (token) {\n          req.setRequestHeader('Authorization', token);\n        }\n\n        req.send(formData);\n      });\n    }\n  }, {\n    key: \"uploadImages\",\n    value: function uploadImages(file, payload, onProgress) {\n      return this.upload('/performer/performer-assets/photos/upload', [{\n        fieldname: 'photo',\n        file: file\n      }], {\n        onProgress: onProgress,\n        customData: payload\n      });\n    }\n  }]);\n\n  return PhotoService;\n}(APIRequest);\nexport var photoService = new PhotoService();","map":null,"metadata":{},"sourceType":"module"}