{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable camelcase */\nimport { streamService } from 'src/services';\nimport Router from 'next/router';\nimport React, { PureComponent } from 'react';\nimport withAntmedia from 'src/antmedia';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport { SocketContext } from 'src/socket';\nimport videojs from 'video.js';\nimport './index.less';\nimport { isMobile } from 'react-device-detect';\n\nclass Publisher extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"publisher\", void 0);\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      const {\n        publish_started,\n        webRTCAdaptor\n      } = this.props;\n      const {\n        conversationId,\n        streamId\n      } = this.state;\n\n      if (streamId && publish_started) {\n        webRTCAdaptor && webRTCAdaptor.leaveFromRoom(conversationId);\n        this.socket.emit('private-stream/leave', {\n          conversationId,\n          streamId\n        });\n      }\n\n      if (this.publisher) {\n        this.publisher.dispose();\n        this.publisher = undefined;\n      }\n\n      this.setState({\n        conversationId: null,\n        streamId: null\n      });\n    });\n\n    this.state = {\n      conversationId: null,\n      streamId: null\n    };\n  }\n\n  componentDidMount() {\n    this.socket = this.context;\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n    window.addEventListener('beforeunload', this.onbeforeunload);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n  }\n\n  async handelWebRTCAdaptorCallback(info, obj) {\n    const {\n      webRTCAdaptor,\n      settings,\n      configs\n    } = this.props;\n    const {\n      conversationId,\n      streamId\n    } = this.state;\n\n    if (info === WEBRTC_ADAPTOR_INFORMATIONS.INITIALIZED) {\n      webRTCAdaptor.joinRoom(conversationId, streamId);\n    } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.JOINED_THE_ROOM) {\n      const token = await streamService.getPublishToken({\n        streamId,\n        settings\n      });\n      webRTCAdaptor.publish(streamId, token);\n    } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_STARTED) {\n      if (!isMobile) {\n        const player = videojs(configs.localVideoId, {\n          liveui: true,\n          controls: true,\n          muted: true,\n          controlBar: {\n            playToggle: false,\n            currentTimeDisplay: false,\n            fullscreenToggle: false,\n            pictureInPictureToggle: false,\n            volumePanel: false\n          }\n        });\n        player.on('error', () => {\n          player.error(null);\n        });\n        player.one('play', () => {\n          this.publisher = player;\n        });\n      }\n\n      this.socket.emit('private-stream/join', {\n        conversationId,\n        streamId: obj.streamId\n      });\n    } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_FINISHED) {\n      this.socket.emit('private-stream/leave', {\n        conversationId,\n        streamId: obj.streamId\n      });\n    }\n  }\n\n  start(conversationId) {\n    this.setState({\n      conversationId\n    });\n  }\n\n  publish(streamId) {\n    const {\n      initWebRTCAdaptor\n    } = this.props;\n    this.setState({\n      streamId\n    });\n    initWebRTCAdaptor(this.handelWebRTCAdaptorCallback.bind(this));\n  }\n\n  stop() {\n    const {\n      leaveSession\n    } = this.props;\n    leaveSession && leaveSession();\n  }\n\n  render() {\n    const {\n      publish_started,\n      configs\n    } = this.props;\n    return __jsx(\"video\", {\n      id: configs.localVideoId,\n      className: \"video-js broadcaster\",\n      hidden: !publish_started,\n      autoPlay: true,\n      playsInline: true,\n      muted: true\n    });\n  }\n\n}\n\nPublisher.contextType = SocketContext;\nexport default withAntmedia(Publisher);","map":null,"metadata":{},"sourceType":"module"}