{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { Card, Pagination, Popconfirm } from 'antd';\nimport { MaleSignIcon, FemaleSignIcon, TransgenderIcon } from '@components/common/base/icons';\nimport { getAge } from 'src/lib';\nimport { HeartFilled } from '@ant-design/icons';\nimport './favourite-performer-grid.less';\nimport { connect } from 'react-redux';\n\nvar renderGender = function renderGender(gender) {\n  switch (gender) {\n    case 'male':\n      return __jsx(MaleSignIcon, {\n        color: \"#666\"\n      });\n\n    case 'female':\n      return __jsx(FemaleSignIcon, {\n        color: \"#666\"\n      });\n\n    case 'transgender':\n      return __jsx(TransgenderIcon, {\n        color: \"#666\"\n      });\n\n    default:\n      return __jsx(React.Fragment, null);\n  }\n};\n\nvar FavouritePerformerGrid = function FavouritePerformerGrid(_ref) {\n  var data = _ref.data,\n      success = _ref.success,\n      searching = _ref.searching,\n      title = _ref.title,\n      dislike = _ref.dislike,\n      setFilter = _ref.setFilter,\n      countries = _ref.countries,\n      total = _ref.total,\n      _ref$query = _ref.query,\n      limit = _ref$query.limit,\n      offset = _ref$query.offset,\n      placeholderAvatarUrl = _ref.placeholderAvatarUrl;\n\n  var renderFlag = function renderFlag(country) {\n    var pCountry = countries.find(function (c) {\n      return c.code === country;\n    });\n    return pCountry && __jsx(\"span\", {\n      className: \"performer-flag\"\n    }, __jsx(\"img\", {\n      alt: \"\",\n      src: pCountry.flag\n    }));\n  };\n\n  return __jsx(Card, {\n    className: \"favorite-performer-grid\",\n    title: title,\n    bordered: false,\n    hoverable: false,\n    actions: [total > 0 && total > limit && __jsx(Pagination, {\n      disabled: searching,\n      current: Math.round(offset / limit) + 1,\n      pageSize: limit,\n      total: total,\n      size: \"small\",\n      onChange: function onChange(page) {\n        return setFilter('offset', (page - 1) * limit);\n      }\n    })]\n  }, success && data.length > 0 ? data.map(function (favourite) {\n    var _favourite$performer, _favourite$performer2, _favourite$performer3, _favourite$performer4, _favourite$performer5, _favourite$performer6, _favourite$performer7;\n\n    return __jsx(Card.Grid, {\n      className: \"performer-box\",\n      key: favourite.favoriteId,\n      hoverable: false\n    }, __jsx(Link, {\n      href: {\n        pathname: '/stream',\n        query: {\n          performer: JSON.stringify(favourite.performer)\n        }\n      },\n      as: \"/profile/\".concat((_favourite$performer = favourite.performer) === null || _favourite$performer === void 0 ? void 0 : _favourite$performer.username)\n    }, __jsx(\"a\", {\n      className: \"performer-avatar\"\n    }, __jsx(\"img\", {\n      src: ((_favourite$performer2 = favourite.performer) === null || _favourite$performer2 === void 0 ? void 0 : _favourite$performer2.avatar) || placeholderAvatarUrl,\n      alt: \"\"\n    }))), __jsx(\"div\", {\n      className: \"performer-title\"\n    }, __jsx(\"div\", {\n      className: \"performer-name\"\n    }, __jsx(\"span\", null, ((_favourite$performer3 = favourite.performer) === null || _favourite$performer3 === void 0 ? void 0 : _favourite$performer3.username) || 'N/A')), ((_favourite$performer4 = favourite.performer) === null || _favourite$performer4 === void 0 ? void 0 : _favourite$performer4.dateOfBirth) && __jsx(\"span\", null, \"(\", getAge((_favourite$performer5 = favourite.performer) === null || _favourite$performer5 === void 0 ? void 0 : _favourite$performer5.dateOfBirth), \")\"), renderGender((_favourite$performer6 = favourite.performer) === null || _favourite$performer6 === void 0 ? void 0 : _favourite$performer6.gender), renderFlag((_favourite$performer7 = favourite.performer) === null || _favourite$performer7 === void 0 ? void 0 : _favourite$performer7.country)), __jsx(Popconfirm, {\n      placement: \"bottom\",\n      title: \"Are you sure to dislike this performer!\",\n      onConfirm: function onConfirm() {\n        return dislike(favourite.performer);\n      },\n      okText: \"Yes\",\n      cancelText: \"No\"\n    }, __jsx(HeartFilled, {\n      className: \"icon\"\n    })));\n  }) : __jsx(\"p\", null, \"No favorites\"));\n};\n\nFavouritePerformerGrid.defaultProps = {\n  total: 0,\n  success: false,\n  title: '',\n  placeholderAvatarUrl: '/no-avatar.png'\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    placeholderAvatarUrl: state.ui.placeholderAvatarUrl\n  };\n};\n\nexport default connect(mapStateToProps)(FavouritePerformerGrid);","map":null,"metadata":{},"sourceType":"module"}