{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { logout } from '@redux/auth/actions';\nimport { updateCurrentStudio, setUpdatingStudio, updateStudioSuccess, updateStudioFail, getMembersSearching, getMembersFail, getMembersSuccess, updateMemberStatus, getMembersCommissionsSuccess, getMembersCommissionsFail, getMembersCommissionsSearching, updateMemberCommision, setGettingStudioEarning, getStudioEarningSuccess, getStudioEarningFail, getPerformerRequestSuccess, getPerformerRequestFail, setGettingPerformerRequest, getStudioStatsSuccess, updateTotalPerformer, getStudioPayoutRequestFail, getStudioPayoutRequestSuccess, setGettingStudioPayoutRequest } from './actions';\nconst initialState = {\n  current: {\n    _id: null,\n    avatar: '/default-user-icon.png',\n    stats: {},\n    balance: 0,\n    name: '',\n    email: ''\n  },\n  updatingStudio: false,\n  members: {\n    data: [],\n    total: 0,\n    success: false,\n    searching: false,\n    error: null\n  },\n  commissions: {\n    data: [],\n    total: 0,\n    success: false,\n    searching: false,\n    error: null\n  },\n  performerRequests: {\n    data: [],\n    total: 0,\n    success: false,\n    searching: false,\n    error: null\n  },\n  earning: {\n    data: [],\n    stats: null,\n    total: 0,\n    searching: false,\n    success: false,\n    error: null,\n    fromDate: null,\n    toDate: null\n  },\n  studioPayout: {\n    data: [],\n    total: 0,\n    searching: false,\n    success: false,\n    error: null\n  },\n  updateStudioSuccess: false,\n  updateStudioError: null\n};\nconst studioReducers = [{\n  on: updateCurrentStudio,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload\n    });\n  }\n\n}, {\n  on: updateStudioSuccess,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload,\n      updateStudioSuccess: true,\n      updatingStudio: false,\n      updateStudioError: null\n    });\n  }\n\n}, {\n  on: updateStudioFail,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateStudioSuccess: false,\n      updatingStudio: false,\n      updateStudioError: data.payload\n    });\n  }\n\n}, {\n  on: setUpdatingStudio,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updatingStudio: true,\n      updateStudioSuccess: false\n    });\n  }\n\n}, {\n  on: getMembersSearching,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      members: _objectSpread(_objectSpread({}, state.members), {}, {\n        searching: true,\n        error: null\n      })\n    });\n  }\n\n}, {\n  on: getMembersSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      members: {\n        searching: false,\n        success: true,\n        data: action.payload.data,\n        total: action.payload.total,\n        error: null\n      }\n    });\n  }\n\n}, {\n  on: getMembersFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      members: _objectSpread(_objectSpread({}, state.members), {}, {\n        searching: false,\n        success: false,\n        error: action.payload\n      })\n    });\n  }\n\n}, {\n  on: updateMemberStatus,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      members: _objectSpread(_objectSpread({}, state.members), {}, {\n        data: state.members.data.map(member => _objectSpread(_objectSpread({}, member), {}, {\n          status: member._id === action.payload ? member.status === 'active' ? 'inactive' : 'active' : member.status\n        }))\n      })\n    });\n  }\n\n}, {\n  on: getMembersCommissionsSearching,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      commissions: _objectSpread(_objectSpread({}, state.commissions), {}, {\n        searching: true,\n        error: null\n      })\n    });\n  }\n\n}, {\n  on: getMembersCommissionsSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      commissions: {\n        searching: false,\n        success: true,\n        data: action.payload.data,\n        total: action.payload.total,\n        error: null\n      }\n    });\n  }\n\n}, {\n  on: getMembersCommissionsFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      commissions: _objectSpread(_objectSpread({}, state.commissions), {}, {\n        searching: false,\n        success: false,\n        error: action.payload\n      })\n    });\n  }\n\n}, {\n  on: updateMemberCommision,\n\n  reducer(state, action) {\n    const {\n      id,\n      memberCommission\n    } = action.payload;\n    const {\n      commissions\n    } = state;\n    const commission = commissions.data.find(c => c._id === id);\n\n    if (commission) {\n      commission.commissionSetting.memberCommission = memberCommission;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      commissions: _objectSpread(_objectSpread({}, state.commissions), {}, {\n        data: [...commissions.data]\n      })\n    });\n  }\n\n}, {\n  on: getStudioEarningSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      earning: {\n        data: action.payload.data.data,\n        total: action.payload.data.total,\n        fromDate: action.payload.fromDate,\n        toDate: action.payload.toDate,\n        stats: action.payload.stats,\n        searching: false,\n        success: true,\n        error: null\n      }\n    });\n  }\n\n}, {\n  on: getStudioEarningFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      earning: _objectSpread(_objectSpread({}, state.earning), {}, {\n        searching: false,\n        success: false,\n        error: action.payload\n      })\n    });\n  }\n\n}, {\n  on: setGettingStudioEarning,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      earning: _objectSpread(_objectSpread({}, state.earning), {}, {\n        searching: true,\n        success: false\n      })\n    });\n  }\n\n}, {\n  on: setGettingPerformerRequest,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performerRequests: _objectSpread(_objectSpread({}, state.performerRequests), {}, {\n        searching: true,\n        error: null\n      })\n    });\n  }\n\n}, {\n  on: getPerformerRequestSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performerRequests: {\n        searching: false,\n        success: true,\n        data: action.payload.data,\n        total: action.payload.total,\n        error: null\n      }\n    });\n  }\n\n}, {\n  on: getPerformerRequestFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      performerRequests: _objectSpread(_objectSpread({}, state.performerRequests), {}, {\n        searching: false,\n        success: false,\n        error: action.payload\n      })\n    });\n  }\n\n}, {\n  on: logout,\n\n  reducer() {\n    return _objectSpread({}, initialState);\n  }\n\n}, {\n  on: getStudioStatsSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        stats: action.payload\n      })\n    });\n  }\n\n}, {\n  on: updateTotalPerformer,\n\n  reducer(state, action) {\n    const {\n      current\n    } = state;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      stats: _objectSpread(_objectSpread({}, state.stats), {}, {\n        totalPerformer: current.stats.totalPerformer + action.payload\n      })\n    });\n  }\n\n}, // studio payout request\n{\n  on: getStudioPayoutRequestSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      studioPayout: {\n        data: action.payload.data,\n        total: action.payload.total,\n        searching: false,\n        success: true,\n        error: null\n      }\n    });\n  }\n\n}, {\n  on: getStudioPayoutRequestFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      studioPayout: _objectSpread(_objectSpread({}, state.studioPayout), {}, {\n        searching: false,\n        success: false,\n        error: action.payload\n      })\n    });\n  }\n\n}, {\n  on: setGettingStudioPayoutRequest,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      studioPayout: _objectSpread(_objectSpread({}, state.studioPayout), {}, {\n        searching: true,\n        error: null\n      })\n    });\n  }\n\n}];\nexport default merge({}, createReducers('studio', [studioReducers], initialState));","map":null,"metadata":{},"sourceType":"module"}