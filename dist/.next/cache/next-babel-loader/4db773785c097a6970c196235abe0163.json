{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport '../index.less';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport FormLogin from '@components/auth/login/performer-login-form';\nimport Head from 'next/head';\nimport { performerlogin, resetLoginData } from '@redux/auth/actions';\nimport { FormRegisterPlaceHolder } from '@components/common/layout';\n\nclass Login extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"rememberMe\", false);\n\n    _defineProperty(this, \"submit\", data => {\n      const {\n        performerlogin: dispatchPerformerlogin\n      } = this.props;\n      dispatchPerformerlogin(_objectSpread(_objectSpread({}, data), {}, {\n        remember: this.rememberMe\n      }));\n    });\n  }\n\n  componentWillUnmount() {\n    const {\n      resetLoginData: resetLogin\n    } = this.props;\n    resetLogin();\n  }\n\n  render() {\n    const {\n      requesting,\n      error,\n      success,\n      ui\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, (ui === null || ui === void 0 ? void 0 : ui.singularTextModel) || 'Performer', ' ', \"Sign in\")), __jsx(\"div\", {\n      className: \"register-page\",\n      style: {}\n    }, __jsx(\"div\", {\n      className: \"form-register-container\"\n    }, __jsx(FormLogin, {\n      requesting: requesting,\n      submit: this.submit.bind(this),\n      error: error,\n      onRemember: value => {\n        this.rememberMe = value;\n      },\n      success: success\n    })), __jsx(FormRegisterPlaceHolder, {\n      ui: ui\n    })));\n  }\n\n}\n\n_defineProperty(Login, \"layout\", 'auth');\n\n_defineProperty(Login, \"authenticate\", false);\n\nconst mapStates = state => _objectSpread(_objectSpread({}, state.auth.userLogin), {}, {\n  ui: state.ui\n});\n\nconst mapDispatch = {\n  performerlogin,\n  resetLoginData\n};\nexport default connect(mapStates, mapDispatch)(Login);","map":null,"metadata":{},"sourceType":"module"}