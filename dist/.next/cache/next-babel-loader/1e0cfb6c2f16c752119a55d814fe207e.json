{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport './Messenger.less';\nimport { connect } from 'react-redux';\nimport { getStreamConversation } from '@redux/stream-chat/actions';\nimport MessageList from './MessageList';\n\nvar StreamMessenger = /*#__PURE__*/function (_PureComponent) {\n  _inherits(StreamMessenger, _PureComponent);\n\n  var _super = _createSuper(StreamMessenger);\n\n  function StreamMessenger() {\n    _classCallCheck(this, StreamMessenger);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(StreamMessenger, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          streamId = _this$props.streamId,\n          activeConversation = _this$props.activeConversation,\n          dispatchGetStreamConversation = _this$props.getStreamConversation;\n\n      if (!activeConversation && streamId) {\n        dispatchGetStreamConversation({\n          conversation: activeConversation.data,\n          isPublic: true\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          activeConversation = _this$props2.activeConversation,\n          isPublic = _this$props2.isPublic,\n          loggedIn = _this$props2.loggedIn;\n      return __jsx(\"div\", {\n        className: classnames('message-stream', loggedIn ? 'user-logged-in' : '')\n      }, activeConversation && activeConversation.data && activeConversation.data.streamId ? __jsx(MessageList, {\n        isPublic: isPublic\n      }) : __jsx(\"p\", null, \"No conversation found.\"));\n    }\n  }]);\n\n  return StreamMessenger;\n}(PureComponent);\n\nvar mapStates = function mapStates(state) {\n  return {\n    activeConversation: state.streamMessage.activeConversation,\n    loggedIn: state.auth.loggedIn\n  };\n};\n\nvar mapDispatchs = {\n  getStreamConversation: getStreamConversation\n};\nexport default connect(mapStates, mapDispatchs)(StreamMessenger);","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/components/stream-chat/Messenger.tsx"],"names":["PureComponent","classnames","connect","getStreamConversation","MessageList","StreamMessenger","props","streamId","activeConversation","dispatchGetStreamConversation","conversation","data","isPublic","loggedIn","mapStates","state","streamMessage","auth","mapDispatchs"],"mappings":";;;;;;;;;;;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,kBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,QAAsC,4BAAtC;AACA,OAAOC,WAAP,MAAwB,eAAxB;;IASMC,e;;;;;;;;;;;;;WACJ,6BAAoB;AAClB,wBAA+F,KAAKC,KAApG;AAAA,UAAQC,QAAR,eAAQA,QAAR;AAAA,UAAkBC,kBAAlB,eAAkBA,kBAAlB;AAAA,UAA6DC,6BAA7D,eAAsCN,qBAAtC;;AACA,UAAI,CAACK,kBAAD,IAAuBD,QAA3B,EAAqC;AACnCE,QAAAA,6BAA6B,CAAC;AAAEC,UAAAA,YAAY,EAAEF,kBAAkB,CAACG,IAAnC;AAAyCC,UAAAA,QAAQ,EAAE;AAAnD,SAAD,CAA7B;AACD;AACF;;;WAED,kBAAS;AACP,yBAAmD,KAAKN,KAAxD;AAAA,UAAQE,kBAAR,gBAAQA,kBAAR;AAAA,UAA4BI,QAA5B,gBAA4BA,QAA5B;AAAA,UAAsCC,QAAtC,gBAAsCA,QAAtC;AACA,aACE;AAAK,QAAA,SAAS,EAAEZ,UAAU,CAAC,gBAAD,EAAmBY,QAAQ,GAAG,gBAAH,GAAsB,EAAjD;AAA1B,SACGL,kBAAkB,IAAIA,kBAAkB,CAACG,IAAzC,IAAiDH,kBAAkB,CAACG,IAAnB,CAAwBJ,QAAzE,GAAoF,MAAC,WAAD;AAAa,QAAA,QAAQ,EAAEK;AAAvB,QAApF,GAA0H,0CAD7H,CADF;AAKD;;;;EAf2BZ,a;;AAiB9B,IAAMc,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD;AAAA,SAAiB;AACjCP,IAAAA,kBAAkB,EAAEO,KAAK,CAACC,aAAN,CAAoBR,kBADP;AAEjCK,IAAAA,QAAQ,EAAEE,KAAK,CAACE,IAAN,CAAWJ;AAFY,GAAjB;AAAA,CAAlB;;AAIA,IAAMK,YAAY,GAAG;AAAEf,EAAAA,qBAAqB,EAArBA;AAAF,CAArB;AACA,eAAeD,OAAO,CAACY,SAAD,EAAYI,YAAZ,CAAP,CAAiCb,eAAjC,CAAf","sourcesContent":["import { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport './Messenger.less';\nimport { connect } from 'react-redux';\nimport { getStreamConversation } from '@redux/stream-chat/actions';\nimport MessageList from './MessageList';\n\ninterface IProps {\n  streamId?: string;\n  getStreamConversation: Function;\n  activeConversation?: any;\n  isPublic?: boolean,\n  loggedIn: boolean;\n}\nclass StreamMessenger extends PureComponent<IProps> {\n  componentDidMount() {\n    const { streamId, activeConversation, getStreamConversation: dispatchGetStreamConversation } = this.props;\n    if (!activeConversation && streamId) {\n      dispatchGetStreamConversation({ conversation: activeConversation.data, isPublic: true });\n    }\n  }\n\n  render() {\n    const { activeConversation, isPublic, loggedIn } = this.props;\n    return (\n      <div className={classnames('message-stream', loggedIn ? 'user-logged-in' : '')}>\n        {activeConversation && activeConversation.data && activeConversation.data.streamId ? <MessageList isPublic={isPublic} /> : <p>No conversation found.</p>}\n      </div>\n    );\n  }\n}\nconst mapStates = (state: any) => ({\n  activeConversation: state.streamMessage.activeConversation,\n  loggedIn: state.auth.loggedIn\n});\nconst mapDispatchs = { getStreamConversation };\nexport default connect(mapStates, mapDispatchs)(StreamMessenger);\n"]},"metadata":{},"sourceType":"module"}