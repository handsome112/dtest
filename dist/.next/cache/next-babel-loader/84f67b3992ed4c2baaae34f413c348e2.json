{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport { message, Tabs, Collapse } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport { getResponseError } from '@lib/utils';\nimport Router from 'next/router';\nimport PasswordChange from '@components/auth/password-change';\nimport { PAYMENT_ACCOUNT } from 'src/interfaces';\nimport StudioInformation from '@components/studio/account-information';\nimport CommissionCard, { ROLE } from '@components/commission/commission-card';\nimport { WireTransferSettingForm, PaypalSettingFrom, IssueCheckUSSetingForm, DirectDepositSettingForm, BitpaySettigForm, PaxumSettingForm } from '@components/payment';\nimport { updateStudio, updateStudioPaymentInfo, updateStudioDirectDeposit, updateStudioPaxum, updateStudioBitpay } from 'src/redux/studio/actions';\nimport { updatePassword } from 'src/redux/auth/actions';\nimport { connect } from 'react-redux';\nimport { omit } from 'lodash';\nimport { paymentInformationService } from '@services/payment-information.service';\nvar Panel = Collapse.Panel;\n\nvar StudioProfilePage = /*#__PURE__*/function (_PureComponent) {\n  _inherits(StudioProfilePage, _PureComponent);\n\n  var _super = _createSuper(StudioProfilePage);\n\n  function StudioProfilePage(props) {\n    var _this;\n\n    _classCallCheck(this, StudioProfilePage);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      paymentInformationKey: '',\n      paymentInformation: {}\n    };\n    return _this;\n  }\n\n  _createClass(StudioProfilePage, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevStates) {\n      var _this$props = this.props,\n          success = _this$props.success,\n          errorInfo = _this$props.errorInfo,\n          auth = _this$props.auth;\n      var paymentInformationKey = this.state.paymentInformationKey;\n\n      if (prevProps.success !== success && success) {\n        message.success('Update Profile Success.');\n      }\n\n      if (prevProps.errorInfo !== errorInfo && errorInfo) {\n        message.error(getResponseError(errorInfo));\n      }\n\n      if (prevProps.auth.updatePassword.success !== auth.updatePassword.success && auth.updatePassword.success) {\n        message.success('Update Password Success.');\n      }\n\n      if (prevProps.auth.updatePassword.error !== auth.updatePassword.error && auth.updatePassword.error) {\n        message.error(getResponseError(auth.updatePassword.error));\n      }\n\n      if (paymentInformationKey && paymentInformationKey !== prevStates.paymentInformationKey) {\n        this.getPaymentInformation();\n      }\n    }\n  }, {\n    key: \"onTabsChange\",\n    value: function onTabsChange(key) {\n      Router.push({\n        pathname: '/studio/account-settings',\n        query: {\n          action: key\n        }\n      }, \"/studio/account-settings?action=\".concat(key), {\n        shallow: false\n      });\n    }\n  }, {\n    key: \"onFinish\",\n    value: function onFinish(data) {\n      var _this$props2 = this.props,\n          studio = _this$props2.studio,\n          dispatchUpdateStudio = _this$props2.updateStudio;\n      dispatchUpdateStudio(_objectSpread(_objectSpread({}, omit(studio, ['bankTransferOption', 'bitpay'])), data));\n    }\n  }, {\n    key: \"onPasswordChange\",\n    value: function onPasswordChange(data) {\n      var dispatchUpdatePassword = this.props.updatePassword;\n      dispatchUpdatePassword(_objectSpread({\n        source: 'studio'\n      }, data));\n    }\n  }, {\n    key: \"onPaymentInformationChange\",\n    value: function onPaymentInformationChange(key) {\n      this.setState({\n        paymentInformationKey: key\n      });\n    }\n  }, {\n    key: \"getPaymentInformation\",\n    value: function () {\n      var _getPaymentInformation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var paymentInformationKey;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                paymentInformationKey = this.state.paymentInformationKey;\n                paymentInformationService.findOne({\n                  type: paymentInformationKey\n                }).then(function (resp) {\n                  return _this2.setState({\n                    paymentInformation: _defineProperty({}, paymentInformationKey, resp.data)\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getPaymentInformation() {\n        return _getPaymentInformation.apply(this, arguments);\n      }\n\n      return getPaymentInformation;\n    }()\n  }, {\n    key: \"submitPaymentInfoForm\",\n    value: function () {\n      var _submitPaymentInfoForm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n        var paymentInformationKey, resp, error;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                paymentInformationKey = this.state.paymentInformationKey;\n                _context2.next = 4;\n                return paymentInformationService.create(_objectSpread({\n                  type: paymentInformationKey\n                }, data));\n\n              case 4:\n                resp = _context2.sent;\n                this.setState({\n                  paymentInformation: _defineProperty({}, paymentInformationKey, resp.data)\n                });\n                message.success('Update Payment Information Success');\n                _context2.next = 15;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](0);\n                _context2.next = 13;\n                return Promise.resolve(_context2.t0);\n\n              case 13:\n                error = _context2.sent;\n                message.error(getResponseError(error));\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 9]]);\n      }));\n\n      function submitPaymentInfoForm(_x) {\n        return _submitPaymentInfoForm.apply(this, arguments);\n      }\n\n      return submitPaymentInfoForm;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          action = _this$props3.action,\n          updating = _this$props3.updating,\n          studio = _this$props3.studio,\n          countries = _this$props3.countries;\n      var paymentInformation = this.state.paymentInformation;\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Account Settings\")), __jsx(\"div\", {\n        className: \"studio-main-background\"\n      }, __jsx(PageHeader, {\n        title: \"Account Settings\"\n      }), __jsx(Tabs, {\n        defaultActiveKey: action || 'account-information',\n        style: {\n          padding: '0 24px'\n        },\n        size: \"large\",\n        onChange: this.onTabsChange.bind(this)\n      }, __jsx(Tabs.TabPane, {\n        key: \"account-information\",\n        tab: \"Account Information\"\n      }, __jsx(StudioInformation, _extends({}, studio, {\n        countries: countries,\n        onFinish: this.onFinish.bind(this),\n        loading: updating\n      }))), __jsx(Tabs.TabPane, {\n        key: \"change-password\",\n        tab: \"Change Password\"\n      }, __jsx(PasswordChange, {\n        onFinish: this.onPasswordChange.bind(this),\n        submiting: updating\n      })), __jsx(Tabs.TabPane, {\n        tab: \"(%) Commission\",\n        key: \"commission\"\n      }, __jsx(CommissionCard, {\n        role: ROLE.STUDIO\n      })), __jsx(Tabs.TabPane, {\n        tab: \"Payment Information\",\n        key: \"paymentInfo\"\n      }, __jsx(Collapse, {\n        accordion: true,\n        onChange: this.onPaymentInformationChange.bind(this)\n      }, __jsx(Panel, {\n        header: \"Wire Transfer (Free)\",\n        key: \"wire\",\n        forceRender: true\n      }, __jsx(WireTransferSettingForm, {\n        paymentInformation: paymentInformation.wire,\n        loading: updating,\n        onFinish: this.submitPaymentInfoForm.bind(this)\n      })), __jsx(Panel, {\n        header: \"Paypal\",\n        key: \"paypal\",\n        forceRender: true\n      }, __jsx(PaypalSettingFrom, {\n        paymentInformation: paymentInformation.paypal,\n        loading: updating,\n        onFinish: this.submitPaymentInfoForm.bind(this)\n      })), __jsx(Panel, {\n        header: \"Issue Check (U.S only)\",\n        key: \"issue_check_us\",\n        forceRender: true\n      }, __jsx(IssueCheckUSSetingForm, {\n        paymentInformation: paymentInformation.issue_check_us,\n        loading: updating,\n        onFinish: this.submitPaymentInfoForm.bind(this)\n      })), __jsx(Panel, {\n        header: \"Direct Deposit\",\n        key: \"deposit\",\n        forceRender: true\n      }, __jsx(DirectDepositSettingForm, {\n        paymentInformation: paymentInformation.deposit,\n        loading: updating,\n        onFinish: this.submitPaymentInfoForm.bind(this)\n      })), __jsx(Panel, {\n        header: \"Paxum\",\n        key: PAYMENT_ACCOUNT.PAXUM,\n        forceRender: true\n      }, __jsx(PaxumSettingForm, {\n        paymentInformation: paymentInformation[PAYMENT_ACCOUNT.PAXUM],\n        loading: updating,\n        onFinish: this.submitPaymentInfoForm.bind(this)\n      })), __jsx(Panel, {\n        header: \"Bitpay\",\n        key: PAYMENT_ACCOUNT.BITPAY,\n        forceRender: true\n      }, __jsx(BitpaySettigForm, {\n        paymentInformation: paymentInformation[PAYMENT_ACCOUNT.BITPAY],\n        loading: updating,\n        onFinish: this.submitPaymentInfoForm.bind(this)\n      })))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var ctx = _ref.ctx;\n      var query = ctx.query;\n      return {\n        action: query.action\n      };\n    }\n  }]);\n\n  return StudioProfilePage;\n}(PureComponent);\n\n_defineProperty(StudioProfilePage, \"authenticate\", true);\n\n_defineProperty(StudioProfilePage, \"layout\", 'primary');\n\nvar mapStates = function mapStates(state) {\n  return {\n    auth: state.auth,\n    studio: state.studio.current,\n    updating: state.studio.updatingStudio,\n    success: state.studio.updateStudioSuccess,\n    countries: state.settings.countries,\n    errorInfo: state.studio.updateStudioError\n  };\n};\n\nvar mapDispatch = {\n  updateStudio: updateStudio,\n  updateStudioPaymentInfo: updateStudioPaymentInfo,\n  updateStudioDirectDeposit: updateStudioDirectDeposit,\n  updateStudioPaxum: updateStudioPaxum,\n  updateStudioBitpay: updateStudioBitpay,\n  updatePassword: updatePassword\n};\nexport default connect(mapStates, mapDispatch)(StudioProfilePage);","map":null,"metadata":{},"sourceType":"module"}