{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { omit } from 'lodash';\nimport { isUrl } from '@lib/string';\nimport cookie from 'js-cookie';\nimport { TOKEN } from 'src/services/api-request';\nimport { APIRequest } from './api-request';\nexport var PhotoService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(PhotoService, _APIRequest);\n\n  var _super = _createSuper(PhotoService);\n\n  function PhotoService() {\n    _classCallCheck(this, PhotoService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PhotoService, [{\n    key: \"search\",\n    value: function search(params) {\n      return this.get(this.buildUrl('/performer/performer-assets/photos/search', params));\n    }\n  }, {\n    key: \"searchByGallery\",\n    value: function searchByGallery(galleryId, params, headers) {\n      return this.get(this.buildUrl(\"/user/performer-assets/photos/\".concat(galleryId, \"/search\"), params), headers);\n    }\n  }, {\n    key: \"details\",\n    value: function details(id, headers) {\n      return this.get(\"/performer/performer-assets/photos/\".concat(id, \"/view\"), headers);\n    }\n  }, {\n    key: \"myPhotos\",\n    value: function myPhotos(query) {\n      return this.get(this.buildUrl('/performer/performer-assets/photos/search', query));\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      return this.del(\"/performer/performer-assets/photos/\".concat(id));\n    }\n  }, {\n    key: \"create\",\n    value: function create(url, data) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        onProgress: function onProgress() {}\n      };\n      return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.upload.addEventListener('progress', function (event) {\n          if (event.lengthComputable) {\n            options.onProgress({\n              percentage: event.loaded / event.total * 100\n            });\n          }\n        });\n        req.addEventListener('load', function () {\n          var success = req.status >= 200 && req.status < 300;\n          var response = req.response;\n\n          if (!success) {\n            return reject(response);\n          }\n\n          return resolve(response);\n        });\n        req.upload.addEventListener('error', function () {\n          reject(req.response);\n        });\n        var formData = new FormData(); // formData.append('file', file, file.name);\n\n        if (data.photo) {\n          var photo = data.photo.file.originFileObj;\n          formData.append('photo', photo, photo.name);\n        }\n\n        Object.keys(omit(data, ['photo'])).forEach(function (v) {\n          formData.append(v, data[v]);\n        });\n        req.responseType = 'json';\n        req.open('POST', isUrl(url) ? url : \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT).concat(url));\n        var token = cookie.get(TOKEN);\n\n        if (token) {\n          req.setRequestHeader('Authorization', token);\n        }\n\n        req.send(formData);\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(url, data) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        onProgress: function onProgress() {}\n      };\n      return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.upload.addEventListener('progress', function (event) {\n          if (event.lengthComputable) {\n            options.onProgress({\n              percentage: event.loaded / event.total * 100\n            });\n          }\n        });\n        req.addEventListener('load', function () {\n          var success = req.status >= 200 && req.status < 300;\n          var response = req.response;\n\n          if (!success) {\n            return reject(response);\n          }\n\n          return resolve(response);\n        });\n        req.upload.addEventListener('error', function () {\n          reject(req.response);\n        });\n        var formData = new FormData(); // formData.append('file', file, file.name);\n\n        if (data.photo && data.photo.file) {\n          var photo = data.photo.file.originFileObj;\n          formData.append('photo', photo, photo.name);\n        }\n\n        Object.keys(omit(data, ['photo'])).forEach(function (v) {\n          formData.append(v, data[v]);\n        });\n        req.responseType = 'json';\n        req.open('PUT', isUrl(url) ? url : \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT).concat(url));\n        var token = cookie.get(TOKEN);\n\n        if (token) {\n          req.setRequestHeader('Authorization', token);\n        }\n\n        req.send(formData);\n      });\n    }\n  }, {\n    key: \"uploadImages\",\n    value: function uploadImages(file, payload, onProgress) {\n      return this.upload('/performer/performer-assets/photos/upload', [{\n        fieldname: 'photo',\n        file: file\n      }], {\n        onProgress: onProgress,\n        customData: payload\n      });\n    }\n  }]);\n\n  return PhotoService;\n}(APIRequest);\nexport var photoService = new PhotoService();","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/services/photo.service.ts"],"names":["omit","isUrl","cookie","TOKEN","APIRequest","PhotoService","params","get","buildUrl","galleryId","headers","id","query","del","url","data","options","onProgress","Promise","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","percentage","loaded","total","success","status","response","formData","FormData","photo","file","originFileObj","append","name","Object","keys","forEach","v","responseType","open","process","env","NEXT_PUBLIC_API_ENDPOINT","token","setRequestHeader","send","payload","fieldname","customData","photoService"],"mappings":"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","sourcesContent":["import { omit } from 'lodash';\nimport { isUrl } from '@lib/string';\nimport cookie from 'js-cookie';\nimport { TOKEN } from 'src/services/api-request';\nimport {\n  IResponse,\n  IPerformerPhotoPayload,\n  IDataResponse,\n  IPhoto\n} from 'src/interfaces';\nimport { APIRequest } from './api-request';\n\nexport class PhotoService extends APIRequest {\n  search(params?: {\n    [key: string]: string;\n  }): Promise<IResponse<IDataResponse<IPhoto>>> {\n    return this.get(\n      this.buildUrl('/performer/performer-assets/photos/search', params)\n    );\n  }\n\n  searchByGallery(\n    galleryId: string,\n    params?: {\n      [key: string]: any;\n    },\n    headers?: Record<string, any>\n  ) {\n    return this.get(\n      this.buildUrl(\n        `/user/performer-assets/photos/${galleryId}/search`,\n        params\n      ),\n      headers\n    );\n  }\n\n  details(id: string, headers?: { [key: string]: string }) {\n    return this.get(`/performer/performer-assets/photos/${id}/view`, headers);\n  }\n\n  myPhotos(query?: { [key: string]: any }) {\n    return this.get(\n      this.buildUrl('/performer/performer-assets/photos/search', query)\n    );\n  }\n\n  remove(id: string) {\n    return this.del(`/performer/performer-assets/photos/${id}`);\n  }\n\n  create(\n    url: string,\n    data: IPerformerPhotoPayload,\n    options: { onProgress: Function } = {\n      onProgress() {}\n    }\n  ): Promise<IResponse<any>> {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: (event.loaded / event.total) * 100\n          });\n        }\n      });\n\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const { response } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      // formData.append('file', file, file.name);\n      if (data.photo) {\n        const photo = data.photo.file.originFileObj;\n        formData.append('photo', photo, photo.name);\n      }\n\n      Object.keys(omit(data, ['photo'])).forEach((v) => {\n        formData.append(v, data[v]);\n      });\n\n      req.responseType = 'json';\n      req.open('POST', isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n\n      const token: any = cookie.get(TOKEN);\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n      req.send(formData);\n    });\n  }\n\n  update(\n    url: string,\n    data: IPerformerPhotoPayload,\n    options: { onProgress: Function } = {\n      onProgress() {}\n    }\n  ): Promise<IResponse<any>> {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: (event.loaded / event.total) * 100\n          });\n        }\n      });\n\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const { response } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      // formData.append('file', file, file.name);\n      if (data.photo && data.photo.file) {\n        const photo = data.photo.file.originFileObj;\n        formData.append('photo', photo, photo.name);\n      }\n\n      Object.keys(omit(data, ['photo'])).forEach((v) => {\n        formData.append(v, data[v]);\n      });\n\n      req.responseType = 'json';\n      req.open('PUT', isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n\n      const token: any = cookie.get(TOKEN);\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n      req.send(formData);\n    });\n  }\n\n  uploadImages(file: File, payload: any, onProgress?: Function) {\n    return this.upload(\n      '/performer/performer-assets/photos/upload',\n      [\n        {\n          fieldname: 'photo',\n          file\n        }\n      ],\n      {\n        onProgress,\n        customData: payload\n      }\n    );\n  }\n}\n\nexport const photoService = new PhotoService();\n"]},"metadata":{},"sourceType":"module"}