{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport './Messenger.less';\nimport { connect } from 'react-redux';\nimport { getStreamConversation } from '@redux/stream-chat/actions';\nimport MessageList from './MessageList';\n\nclass StreamMessenger extends PureComponent {\n  componentDidMount() {\n    const {\n      streamId,\n      activeConversation,\n      getStreamConversation: dispatchGetStreamConversation\n    } = this.props;\n\n    if (!activeConversation && streamId) {\n      dispatchGetStreamConversation({\n        conversation: activeConversation.data,\n        isPublic: true\n      });\n    }\n  }\n\n  render() {\n    const {\n      activeConversation,\n      isPublic,\n      loggedIn\n    } = this.props;\n    return __jsx(\"div\", {\n      className: classnames('message-stream', loggedIn ? 'user-logged-in' : '')\n    }, activeConversation && activeConversation.data && activeConversation.data.streamId ? __jsx(MessageList, {\n      isPublic: isPublic\n    }) : __jsx(\"p\", null, \"No conversation found.\"));\n  }\n\n}\n\nconst mapStates = state => ({\n  activeConversation: state.streamMessage.activeConversation,\n  loggedIn: state.auth.loggedIn\n});\n\nconst mapDispatchs = {\n  getStreamConversation\n};\nexport default connect(mapStates, mapDispatchs)(StreamMessenger);","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/components/stream-chat/Messenger.tsx"],"names":["PureComponent","classnames","connect","getStreamConversation","MessageList","StreamMessenger","componentDidMount","streamId","activeConversation","dispatchGetStreamConversation","props","conversation","data","isPublic","render","loggedIn","mapStates","state","streamMessage","auth","mapDispatchs"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,kBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,QAAsC,4BAAtC;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AASA,MAAMC,eAAN,SAA8BL,aAA9B,CAAoD;AAClDM,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,kBAAZ;AAAgCL,MAAAA,qBAAqB,EAAEM;AAAvD,QAAyF,KAAKC,KAApG;;AACA,QAAI,CAACF,kBAAD,IAAuBD,QAA3B,EAAqC;AACnCE,MAAAA,6BAA6B,CAAC;AAAEE,QAAAA,YAAY,EAAEH,kBAAkB,CAACI,IAAnC;AAAyCC,QAAAA,QAAQ,EAAE;AAAnD,OAAD,CAA7B;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEN,MAAAA,kBAAF;AAAsBK,MAAAA,QAAtB;AAAgCE,MAAAA;AAAhC,QAA6C,KAAKL,KAAxD;AACA,WACE;AAAK,MAAA,SAAS,EAAET,UAAU,CAAC,gBAAD,EAAmBc,QAAQ,GAAG,gBAAH,GAAsB,EAAjD;AAA1B,OACGP,kBAAkB,IAAIA,kBAAkB,CAACI,IAAzC,IAAiDJ,kBAAkB,CAACI,IAAnB,CAAwBL,QAAzE,GAAoF,MAAC,WAAD;AAAa,MAAA,QAAQ,EAAEM;AAAvB,MAApF,GAA0H,0CAD7H,CADF;AAKD;;AAfiD;;AAiBpD,MAAMG,SAAS,GAAIC,KAAD,KAAiB;AACjCT,EAAAA,kBAAkB,EAAES,KAAK,CAACC,aAAN,CAAoBV,kBADP;AAEjCO,EAAAA,QAAQ,EAAEE,KAAK,CAACE,IAAN,CAAWJ;AAFY,CAAjB,CAAlB;;AAIA,MAAMK,YAAY,GAAG;AAAEjB,EAAAA;AAAF,CAArB;AACA,eAAeD,OAAO,CAACc,SAAD,EAAYI,YAAZ,CAAP,CAAiCf,eAAjC,CAAf","sourcesContent":["import { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport './Messenger.less';\nimport { connect } from 'react-redux';\nimport { getStreamConversation } from '@redux/stream-chat/actions';\nimport MessageList from './MessageList';\n\ninterface IProps {\n  streamId?: string;\n  getStreamConversation: Function;\n  activeConversation?: any;\n  isPublic?: boolean,\n  loggedIn: boolean;\n}\nclass StreamMessenger extends PureComponent<IProps> {\n  componentDidMount() {\n    const { streamId, activeConversation, getStreamConversation: dispatchGetStreamConversation } = this.props;\n    if (!activeConversation && streamId) {\n      dispatchGetStreamConversation({ conversation: activeConversation.data, isPublic: true });\n    }\n  }\n\n  render() {\n    const { activeConversation, isPublic, loggedIn } = this.props;\n    return (\n      <div className={classnames('message-stream', loggedIn ? 'user-logged-in' : '')}>\n        {activeConversation && activeConversation.data && activeConversation.data.streamId ? <MessageList isPublic={isPublic} /> : <p>No conversation found.</p>}\n      </div>\n    );\n  }\n}\nconst mapStates = (state: any) => ({\n  activeConversation: state.streamMessage.activeConversation,\n  loggedIn: state.auth.loggedIn\n});\nconst mapDispatchs = { getStreamConversation };\nexport default connect(mapStates, mapDispatchs)(StreamMessenger);\n"]},"metadata":{},"sourceType":"module"}