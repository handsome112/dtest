{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/streaming/footer.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport './footer.less';\nimport { SETTING_KEYS } from 'src/constants';\nimport React from 'react';\nimport { Row, Col, Button, message } from 'antd';\nimport { PlusCircleOutlined, UserOutlined, CrownOutlined } from '@ant-design/icons';\nimport { checkUserLogin, getResponseError } from 'src/lib/utils';\nimport Router from 'next/router';\nimport Popup from '@components/common/base/popup';\nimport { transactionService } from 'src/services';\nimport NumberFormat from '@components/common/layout/numberformat';\nimport SendTipContent from './tip/content';\nconst btnStyle = {\n  height: 50,\n  marginBottom: 1\n};\n\nconst Footer = ({\n  activeConversation,\n  performer,\n  loggedIn,\n  inGroupChat,\n  inPrivateChat,\n  user,\n  updateCurrentUserBalance,\n  settings\n}) => {\n  const tipPopupRef = /*#__PURE__*/React.createRef();\n  let contentRef;\n  const {\n    username,\n    _id\n  } = performer;\n  const [tipping, setTipping] = React.useState(false);\n  const [disableOk, setDisableOk] = React.useState(false);\n\n  const handleError = async e => {\n    const error = await Promise.resolve(e);\n    message.error(getResponseError(error));\n  };\n\n  const goChatRoom = roomName => {\n    if (!checkUserLogin(loggedIn, user)) {\n      if (false) {\n        Router.push('/auth/login');\n      }\n\n      return;\n    }\n\n    const option = roomName === 'privatechat' ? SETTING_KEYS.OPTION_FOR_PRIVATE : SETTING_KEYS.OPTION_FOR_GROUP;\n    const path = settings[option] === 'webrtc' ? 'webrtc/' : '';\n    Router.push({\n      pathname: `/stream/${path}${roomName}`,\n      query: {\n        username,\n        performer: JSON.stringify(performer)\n      }\n    }, `/stream/${path}${roomName}/${username}`);\n  };\n\n  const getMoreTokens = () => {\n    if (!checkUserLogin(loggedIn, user)) {\n      if (false) {\n        Router.push('/auth/login');\n      }\n\n      return;\n    }\n\n    Router.push('/account/user/funds-tokens');\n  };\n\n  const sendTip = () => {\n    if (!checkUserLogin(loggedIn, user)) {\n      message.error(`Please login to send tip to ${username}!`);\n      return;\n    }\n\n    tipPopupRef.current && tipPopupRef.current.setVisible(true);\n  };\n\n  const onOk = async () => {\n    var _activeConversation$d;\n\n    if (activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d = activeConversation.data) !== null && _activeConversation$d !== void 0 && _activeConversation$d._id) {\n      const ref = tipPopupRef.current;\n\n      try {\n        setTipping(true);\n        const token = contentRef ? contentRef.getValueToken() : 0;\n        if (parseInt(token, 10) <= 0) return;\n        await transactionService.sendTipToken(_id, token, activeConversation.data._id);\n        ref && ref.setVisible(false);\n        updateCurrentUserBalance && updateCurrentUserBalance(-token);\n\n        const content = __jsx(NumberFormat, {\n          value: token,\n          prefix: \"You sent \",\n          suffix: \" tokens\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }\n        });\n\n        message.success(content);\n      } catch (e) {\n        handleError(e);\n      } finally {\n        setTipping(false);\n        ref && ref.setVisible(false);\n      }\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"stream-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, __jsx(Popup, {\n    title: `Tips to ${username}`,\n    okButtonProps: {\n      disabled: disableOk\n    },\n    content: __jsx(SendTipContent, {\n      ref: ref => contentRef = ref,\n      setDisableOk: setDisableOk,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }),\n    ref: tipPopupRef,\n    loading: tipping,\n    onOk: onOk,\n    width: 567,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), __jsx(Row, {\n    gutter: [1, 1],\n    style: {\n      marginBottom: '15px',\n      marginTop: '1px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    lg: 6,\n    xs: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    disabled: inGroupChat,\n    type: \"primary\",\n    style: _objectSpread({}, btnStyle),\n    onClick: () => goChatRoom('groupchat'),\n    block: true,\n    icon: __jsx(\"img\", {\n      className: \"anticon\",\n      src: \"/icons/group.svg\",\n      height: 16,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, \"Group Chat\")), __jsx(Col, {\n    lg: 6,\n    xs: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    disabled: inPrivateChat,\n    type: \"primary\",\n    style: _objectSpread({}, btnStyle),\n    onClick: () => goChatRoom('privatechat'),\n    block: true,\n    icon: __jsx(UserOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 19\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, \"Private Chat\")), __jsx(Col, {\n    lg: 6,\n    xs: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    style: _objectSpread({}, btnStyle),\n    block: true,\n    onClick: () => getMoreTokens(),\n    icon: __jsx(CrownOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 19\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, \"Top-up My Tokens\")), __jsx(Col, {\n    lg: 6,\n    xs: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    style: _objectSpread({}, btnStyle),\n    onClick: () => sendTip(),\n    block: true,\n    icon: __jsx(PlusCircleOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 19\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, \"Send Tip\"))));\n};\n\nFooter.defaultProps = {\n  updateCurrentUserBalance: null,\n  inGroupChat: false,\n  inPrivateChat: false\n};\nexport default Footer;","map":null,"metadata":{},"sourceType":"module"}