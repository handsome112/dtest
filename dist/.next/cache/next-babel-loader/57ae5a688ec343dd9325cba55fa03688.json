{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable dot-notation */\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Row, Col, message } from 'antd';\nimport { HLS, WEBRTC } from 'src/interfaces';\nimport { connect } from 'react-redux';\nimport { streamService, performerService, messageService } from 'src/services';\nimport { SocketContext, Event } from 'src/socket';\nimport nextCookie from 'next-cookies';\nimport ModalBuyAssets from '@components/performer-assets/common/modal-buy-assets';\nimport PerformerProduct from '@components/performer-assets/product-carousel';\nimport PerformerVideo from '@components/performer-assets/video-carousel';\nimport PerformerGallery from '@components/performer-assets/gallery-carousel';\nimport ProfileCard from '@components/performer/profile-card';\nimport PerformerCarousel from '@components/performer/performer-carousel';\nimport Header from '@components/streaming/header';\nimport Footer from '@components/streaming/footer';\nimport Router from 'next/router';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport LiveSubscriber from 'src/components/streaming/subscriber';\nimport { loadStreamMessages, getStreamConversationSuccess, receiveStreamMessageSuccess, resetStreamMessage, resetAllStreamMessage } from '@redux/stream-chat/actions';\nimport { getPerformerDetails, updatePerformerAsset } from '@redux/performer/actions';\nimport { updateCurrentUserBalance } from '@redux/user/actions';\nimport { getResponseError } from '@lib/utils';\nimport { StatusCodes } from 'http-status-codes';\nimport './index.less';\nimport { currentUserSelecter } from '@redux/selectors';\nimport { getPoster } from '@lib/stream'; // eslint-disable-next-line no-shadow\n\nvar PERFORMER_ASSETS_TYPE; // eslint-disable-next-line no-shadow\n\n(function (PERFORMER_ASSETS_TYPE) {\n  PERFORMER_ASSETS_TYPE[\"PRODUCT\"] = \"product\";\n  PERFORMER_ASSETS_TYPE[\"GALLERY\"] = \"gallery\";\n  PERFORMER_ASSETS_TYPE[\"VIDEO\"] = \"video\";\n})(PERFORMER_ASSETS_TYPE || (PERFORMER_ASSETS_TYPE = {}));\n\nvar STREAM_EVENT; // eslint-disable-next-line no-shadow\n\n(function (STREAM_EVENT) {\n  STREAM_EVENT[\"JOIN_BROADCASTER\"] = \"join-broadcaster\";\n  STREAM_EVENT[\"MODEL_LEFT\"] = \"model-left\";\n  STREAM_EVENT[\"ROOM_INFORMATIOM_CHANGED\"] = \"public-room-changed\";\n  STREAM_EVENT[\"MODEL_UPDATE_STREAMING_STATUS\"] = \"modelUpdateStreamingStatus\";\n  STREAM_EVENT[\"USER_LEFT_ROOM\"] = \"USER_LEFT_ROOM\";\n})(STREAM_EVENT || (STREAM_EVENT = {}));\n\nvar EVENT;\n\n(function (EVENT) {\n  EVENT[\"BLOCK_USERS\"] = \"nofify_users_block\";\n})(EVENT || (EVENT = {}));\n\nvar LivePage = /*#__PURE__*/function (_PureComponent) {\n  _inherits(LivePage, _PureComponent);\n\n  var _super = _createSuper(LivePage);\n\n  function LivePage(props) {\n    var _this;\n\n    _classCallCheck(this, LivePage);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"subscriberRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"buyAssetsRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"socket\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onbeforeunload\", function () {\n      _this.leavePublicRoom();\n    });\n\n    _this.state = {\n      total: 0,\n      members: []\n    };\n    return _this;\n  }\n\n  _createClass(LivePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscriberRef = /*#__PURE__*/React.createRef();\n      this.buyAssetsRef = /*#__PURE__*/React.createRef();\n      var _this$props = this.props,\n          performer = _this$props.performer,\n          user = _this$props.user;\n\n      if (!performer) {\n        Router.push('/');\n        return;\n      }\n\n      if (user && user.role === 'performer') {\n        Router.push('/live');\n        return;\n      }\n\n      if (user && user.role === 'studio') {\n        Router.push('/studio/account-settings');\n        return;\n      }\n\n      this.socket = this.context;\n      Router.events.on('routeChangeStart', this.onbeforeunload);\n      window.addEventListener('beforeunload', this.onbeforeunload);\n      this.initProfilePage();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          performer = _this$props2.performer,\n          data = _this$props2.data,\n          activeConversation = _this$props2.activeConversation;\n\n      if (data && data.isBlocked) {\n        Router.push('/403');\n        return;\n      }\n\n      if (performer && performer._id !== prevProps.performer._id) {\n        this.initProfilePage();\n      }\n\n      if (prevProps.activeConversation !== activeConversation) {\n        var _prevProps$activeConv;\n\n        ((_prevProps$activeConv = prevProps.activeConversation) === null || _prevProps$activeConv === void 0 ? void 0 : _prevProps$activeConv._id) && this.socket.emit('public-stream/leave', {\n          conversationId: prevProps.activeConversation._id\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('beforeunload', this.onbeforeunload);\n      Router.events.off('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(_ref) {\n      var _activeConversation$d;\n\n      var total = _ref.total,\n          members = _ref.members,\n          conversationId = _ref.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n        this.setState({\n          total: total,\n          members: members\n        });\n      }\n    }\n  }, {\n    key: \"onBoughtAssetSuccess\",\n    value: function onBoughtAssetSuccess(type, id, payload) {\n      var dispatchUpdatePerformerAsset = this.props.updatePerformerAsset;\n      dispatchUpdatePerformerAsset({\n        type: type,\n        id: id,\n        payload: payload\n      });\n    }\n  }, {\n    key: \"joinPeformerPublicRoom\",\n    value: function () {\n      var _joinPeformerPublicRoom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this$props3, performer, dispatchLoadStreamMessages, dispatchGetStreamConversationSuccess, resp, conversation, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props3 = this.props, performer = _this$props3.performer, dispatchLoadStreamMessages = _this$props3.loadStreamMessages, dispatchGetStreamConversationSuccess = _this$props3.getStreamConversationSuccess;\n\n                if (!performer) {\n                  _context.next = 25;\n                  break;\n                }\n\n                _context.prev = 2;\n                _context.next = 5;\n                return messageService.findPublicConversationPerformer(performer._id);\n\n              case 5:\n                resp = _context.sent;\n                conversation = resp.data;\n\n                if (!(conversation && conversation._id)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                dispatchGetStreamConversationSuccess({\n                  data: conversation\n                });\n                dispatchLoadStreamMessages({\n                  conversationId: conversation._id,\n                  limit: 25,\n                  offset: 0,\n                  type: conversation.type\n                });\n                this.socket = this.context;\n                this.socket && this.socket.emit('public-stream/join', {\n                  conversationId: conversation._id\n                });\n                _context.next = 15;\n                break;\n\n              case 14:\n                throw new Promise(function (resolve) {\n                  return resolve('No available broadcast. Try again later');\n                });\n\n              case 15:\n                _context.next = 23;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](2);\n                _context.next = 21;\n                return Promise.resolve(_context.t0);\n\n              case 21:\n                error = _context.sent;\n                message.error(getResponseError(error));\n\n              case 23:\n                _context.prev = 23;\n                return _context.finish(23);\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 17, 23, 25]]);\n      }));\n\n      function joinPeformerPublicRoom() {\n        return _joinPeformerPublicRoom.apply(this, arguments);\n      }\n\n      return joinPeformerPublicRoom;\n    }()\n  }, {\n    key: \"initProfilePage\",\n    value: function initProfilePage() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          performer = _this$props4.performer,\n          streamingStatus = _this$props4.performer.streamingStatus,\n          dispatchGetPerformerDetail = _this$props4.getPerformerDetails;\n      setTimeout(function () {\n        _this2.subscriberRef.current && _this2.subscriberRef.current.resetPlaybackVideo(getPoster(streamingStatus));\n      }, 100);\n      dispatchGetPerformerDetail(performer);\n      this.inscreaseView();\n      this.joinPeformerPublicRoom();\n    }\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n        var performerId, _this$props5, optionForBroadcast, performer, resp, sessionId, _this$subscriberRef$c, _this$subscriberRef$c2, error;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                performerId = _ref2.performerId;\n                _context2.prev = 1;\n                _this$props5 = this.props, optionForBroadcast = _this$props5.settings.optionForBroadcast, performer = _this$props5.performer;\n\n                if (!(performer._id !== performerId)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                _context2.next = 7;\n                return streamService.joinPublicChat(performerId);\n\n              case 7:\n                resp = _context2.sent;\n                sessionId = resp.data.sessionId;\n\n                if (optionForBroadcast === HLS) {\n                  (_this$subscriberRef$c = this.subscriberRef.current) === null || _this$subscriberRef$c === void 0 ? void 0 : _this$subscriberRef$c.playHLS(sessionId);\n                } else if (optionForBroadcast === WEBRTC) {\n                  (_this$subscriberRef$c2 = this.subscriberRef.current) === null || _this$subscriberRef$c2 === void 0 ? void 0 : _this$subscriberRef$c2.play(sessionId);\n                }\n\n                _context2.next = 18;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](1);\n                _context2.next = 16;\n                return Promise.resolve(_context2.t0);\n\n              case 16:\n                error = _context2.sent;\n                message.error(getResponseError(error));\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 12]]);\n      }));\n\n      function subscribe(_x) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n  }, {\n    key: \"leavePublicRoom\",\n    value: function leavePublicRoom() {\n      var _activeConversation$d2;\n\n      var _this$props6 = this.props,\n          activeConversation = _this$props6.activeConversation,\n          dispatchResetStreamMessage = _this$props6.resetStreamMessage;\n      dispatchResetStreamMessage();\n\n      if (this.socket && activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d2 = activeConversation.data) !== null && _activeConversation$d2 !== void 0 && _activeConversation$d2._id) {\n        this.socket.emit('public-stream/leave', {\n          conversationId: activeConversation.data._id\n        });\n      }\n\n      this.setState({\n        total: 0,\n        members: []\n      });\n    }\n  }, {\n    key: \"modelLeftHandler\",\n    value: function modelLeftHandler(_ref3) {\n      var _this$subscriberRef$c3;\n\n      var performerId = _ref3.performerId;\n      var performer = this.props.performer;\n\n      if (performerId !== performer._id) {\n        return;\n      }\n\n      (_this$subscriberRef$c3 = this.subscriberRef.current) === null || _this$subscriberRef$c3 === void 0 ? void 0 : _this$subscriberRef$c3.stop();\n      message.info('Model has left the room!');\n    }\n  }, {\n    key: \"showAssetToBuy\",\n    value: function () {\n      var _showAssetToBuy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(type, item) {\n        var isBought, isSale, name, itemType;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                isBought = item.isBought, isSale = item.isSale, name = item.name, itemType = item.type;\n                _context3.t0 = type;\n                _context3.next = _context3.t0 === 'gallery' ? 4 : _context3.t0 === 'product' ? 8 : 12;\n                break;\n\n              case 4:\n                if (!(isBought || !isSale)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                Router.push({\n                  pathname: '/photos',\n                  query: {\n                    data: JSON.stringify(item),\n                    id: item._id\n                  }\n                }, \"/photos/\".concat(item._id));\n                return _context3.abrupt(\"return\");\n\n              case 7:\n                return _context3.abrupt(\"break\", 13);\n\n              case 8:\n                if (!(isBought && itemType === 'digital')) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                message.info(\"You have purchased \".concat(name, \" already. Please check your email!\"));\n                return _context3.abrupt(\"return\");\n\n              case 11:\n                return _context3.abrupt(\"break\", 13);\n\n              case 12:\n                return _context3.abrupt(\"break\", 13);\n\n              case 13:\n                this.buyAssetsRef.showModalBuyAssets(item, type);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function showAssetToBuy(_x2, _x3) {\n        return _showAssetToBuy.apply(this, arguments);\n      }\n\n      return showAssetToBuy;\n    }()\n  }, {\n    key: \"userBlockHandler\",\n    value: function userBlockHandler(_ref4) {\n      var performerId = _ref4.performerId;\n      var performer = this.props.performer;\n\n      if (performerId === performer._id) {\n        Router.push('/403');\n      }\n    }\n  }, {\n    key: \"modelUpdateStreamingStatusHander\",\n    value: function modelUpdateStreamingStatusHander(_ref5) {\n      var _this3 = this;\n\n      var status = _ref5.status,\n          id = _ref5.id;\n      var performer = this.props.performer;\n\n      if (id === performer._id) {\n        setTimeout(function () {\n          _this3.subscriberRef.current && _this3.subscriberRef.current.resetPlaybackVideo(getPoster(status));\n        }, 100);\n      }\n    }\n  }, {\n    key: \"inscreaseView\",\n    value: function () {\n      var _inscreaseView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var id;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                id = this.props.performer._id;\n                _context4.next = 4;\n                return performerService.increaseView(id);\n\n              case 4:\n                _context4.next = 8;\n                break;\n\n              case 6:\n                _context4.prev = 6;\n                _context4.t0 = _context4[\"catch\"](0);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 6]]);\n      }));\n\n      function inscreaseView() {\n        return _inscreaseView.apply(this, arguments);\n      }\n\n      return inscreaseView;\n    }()\n  }, {\n    key: \"userLeftRoomHandle\",\n    value: function userLeftRoomHandle(_ref6) {\n      var _activeConversation$d3;\n\n      var username = _ref6.username,\n          conversationId = _ref6.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d3 = activeConversation.data) === null || _activeConversation$d3 === void 0 ? void 0 : _activeConversation$d3._id) === conversationId) {\n        var _this$state = this.state,\n            total = _this$state.total,\n            members = _this$state.members;\n        var leftMemberIndex = members.findIndex(function (m) {\n          return m.username === username;\n        });\n\n        if (leftMemberIndex > -1) {\n          this.setState({\n            total: total - 1,\n            members: members.splice(leftMemberIndex, 1)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props7 = this.props,\n          performer = _this$props7.performer,\n          data = _this$props7.data,\n          searching = _this$props7.searching,\n          success = _this$props7.success,\n          products = _this$props7.products,\n          videos = _this$props7.videos,\n          galleries = _this$props7.galleries,\n          ui = _this$props7.ui;\n      var _this$state2 = this.state,\n          members = _this$state2.members,\n          total = _this$state2.total;\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"\".concat(ui === null || ui === void 0 ? void 0 : ui.siteName, \" | \").concat(performer === null || performer === void 0 ? void 0 : performer.username))), __jsx(Event, {\n        event: STREAM_EVENT.JOIN_BROADCASTER,\n        handler: this.subscribe.bind(this)\n      }), __jsx(Event, {\n        event: STREAM_EVENT.MODEL_LEFT,\n        handler: this.modelLeftHandler.bind(this)\n      }), __jsx(Event, {\n        event: STREAM_EVENT.USER_LEFT_ROOM,\n        handler: this.userLeftRoomHandle.bind(this)\n      }), __jsx(Event, {\n        event: STREAM_EVENT.ROOM_INFORMATIOM_CHANGED,\n        handler: this.onChange.bind(this)\n      }), __jsx(Event, {\n        event: EVENT.BLOCK_USERS,\n        handler: this.userBlockHandler.bind(this)\n      }), __jsx(Event, {\n        event: STREAM_EVENT.MODEL_UPDATE_STREAMING_STATUS,\n        handler: this.modelUpdateStreamingStatusHander.bind(this)\n      }), __jsx(\"div\", {\n        className: \"profile-page\"\n      }, __jsx(ModalBuyAssets // eslint-disable-next-line no-return-assign\n      , _extends({\n        ref: function ref(_ref7) {\n          return _this4.buyAssetsRef = _ref7;\n        },\n        onSucess: this.onBoughtAssetSuccess.bind(this)\n      }, this.props)), __jsx(Header, this.props), __jsx(Row, {\n        className: \"streaming-container\"\n      }, __jsx(Col, {\n        md: 13,\n        xs: 24\n      }, __jsx(LiveSubscriber, {\n        ref: this.subscriberRef,\n        configs: {\n          isPlayMode: true\n        }\n      }), __jsx(Footer, this.props)), __jsx(Col, {\n        md: 11,\n        xs: 24\n      }, __jsx(ChatBox, _extends({}, this.props, {\n        members: members,\n        totalParticipant: total\n      })))), __jsx(Row, {\n        gutter: [{\n          sm: 25,\n          xs: 0\n        }, {\n          sm: 10,\n          xs: 25\n        }]\n      }, __jsx(Col, {\n        xs: {\n          span: 24\n        },\n        lg: {\n          span: 8\n        }\n      }, __jsx(ProfileCard, {\n        placeholderAvatarUrl: ui === null || ui === void 0 ? void 0 : ui.placeholderAvatarUrl,\n        performer: data,\n        searching: searching,\n        success: success\n      })), __jsx(Col, {\n        xs: {\n          span: 24\n        },\n        lg: {\n          span: 16\n        }\n      }, __jsx(PerformerProduct, {\n        performer: data,\n        products: products,\n        searching: searching,\n        success: success,\n        purchaseProduct: this.showAssetToBuy.bind(this, 'product')\n      }), __jsx(PerformerVideo, {\n        performer: data,\n        videos: videos,\n        searching: searching,\n        success: success\n      }), __jsx(PerformerGallery, {\n        performer: data,\n        galleries: galleries,\n        searching: searching,\n        success: success,\n        purchaseGallery: this.showAssetToBuy.bind(this, 'gallery')\n      }), __jsx(PerformerCarousel, _extends({\n        performers: data && data.relatedPerformers\n      }, this.props))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref8) {\n        var ctx, query, _nextCookie, token, headers, resp, performer;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                ctx = _ref8.ctx;\n                _context5.prev = 1;\n                query = ctx.query;\n\n                if (!(true && query.performer)) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", {\n                  performer: JSON.parse(query.performer)\n                });\n\n              case 5:\n                _nextCookie = nextCookie(ctx), token = _nextCookie.token;\n                headers = {\n                  Authorization: token\n                };\n                _context5.next = 9;\n                return performerService.details(query.username, headers);\n\n              case 9:\n                resp = _context5.sent;\n                performer = resp.data;\n\n                if (!performer.isBlocked) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                throw StatusCodes.FORBIDDEN;\n\n              case 13:\n                return _context5.abrupt(\"return\", {\n                  performer: performer\n                });\n\n              case 16:\n                _context5.prev = 16;\n                _context5.t0 = _context5[\"catch\"](1);\n\n                if (!true) {\n                  _context5.next = 20;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", Router.push('/'));\n\n              case 20:\n                ctx.res.writeHead && ctx.res.writeHead(302, {\n                  Location: '/'\n                });\n                ctx.res.end && ctx.res.end();\n                return _context5.abrupt(\"return\", {});\n\n              case 23:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[1, 16]]);\n      }));\n\n      function getInitialProps(_x4) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return LivePage;\n}(PureComponent);\n\n_defineProperty(LivePage, \"authenticate\", false);\n\nLivePage.contextType = SocketContext;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread(_objectSpread(_objectSpread({\n    ui: state.ui\n  }, state.streaming), state.performer.performerDetails), {}, {\n    user: currentUserSelecter(state),\n    loggedIn: state.auth.loggedIn,\n    activeConversation: state.streamMessage.activeConversation\n  });\n};\n\nvar mapDispatch = {\n  loadStreamMessages: loadStreamMessages,\n  getStreamConversationSuccess: getStreamConversationSuccess,\n  receiveStreamMessageSuccess: receiveStreamMessageSuccess,\n  resetStreamMessage: resetStreamMessage,\n  resetAllStreamMessage: resetAllStreamMessage,\n  updateCurrentUserBalance: updateCurrentUserBalance,\n  getPerformerDetails: getPerformerDetails,\n  updatePerformerAsset: updatePerformerAsset\n};\nexport default connect(mapStateToProps, mapDispatch)(LivePage);","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/pages/stream/index.tsx"],"names":["React","PureComponent","Head","Row","Col","message","HLS","WEBRTC","connect","streamService","performerService","messageService","SocketContext","Event","nextCookie","ModalBuyAssets","PerformerProduct","PerformerVideo","PerformerGallery","ProfileCard","PerformerCarousel","Header","Footer","Router","ChatBox","LiveSubscriber","loadStreamMessages","getStreamConversationSuccess","receiveStreamMessageSuccess","resetStreamMessage","resetAllStreamMessage","getPerformerDetails","updatePerformerAsset","updateCurrentUserBalance","getResponseError","StatusCodes","currentUserSelecter","getPoster","PERFORMER_ASSETS_TYPE","STREAM_EVENT","EVENT","LivePage","props","leavePublicRoom","state","total","members","subscriberRef","createRef","buyAssetsRef","performer","user","push","role","socket","context","events","on","onbeforeunload","window","addEventListener","initProfilePage","prevProps","data","activeConversation","isBlocked","_id","emit","conversationId","removeEventListener","off","setState","type","id","payload","dispatchUpdatePerformerAsset","dispatchLoadStreamMessages","dispatchGetStreamConversationSuccess","findPublicConversationPerformer","resp","conversation","limit","offset","Promise","resolve","error","streamingStatus","dispatchGetPerformerDetail","setTimeout","current","resetPlaybackVideo","inscreaseView","joinPeformerPublicRoom","performerId","optionForBroadcast","settings","joinPublicChat","sessionId","playHLS","play","dispatchResetStreamMessage","stop","info","item","isBought","isSale","name","itemType","pathname","query","JSON","stringify","showModalBuyAssets","status","increaseView","username","leftMemberIndex","findIndex","m","splice","searching","success","products","videos","galleries","ui","siteName","JOIN_BROADCASTER","subscribe","bind","MODEL_LEFT","modelLeftHandler","USER_LEFT_ROOM","userLeftRoomHandle","ROOM_INFORMATIOM_CHANGED","onChange","BLOCK_USERS","userBlockHandler","MODEL_UPDATE_STREAMING_STATUS","modelUpdateStreamingStatusHander","ref","onBoughtAssetSuccess","isPlayMode","sm","xs","span","placeholderAvatarUrl","showAssetToBuy","relatedPerformers","ctx","parse","token","headers","Authorization","details","FORBIDDEN","res","writeHead","Location","end","contextType","mapStateToProps","streaming","performerDetails","loggedIn","auth","streamMessage","mapDispatch"],"mappings":"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","sourcesContent":["/* eslint-disable dot-notation */\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Row, Col, message } from 'antd';\nimport { IResponse } from 'src/services/api-request';\nimport {\n  IPerformer,\n  IUser,\n  IUIConfig,\n  StreamSettings,\n  HLS,\n  WEBRTC,\n  IProduct,\n  IVideo,\n  IPhoto,\n  IPerformerGallery\n} from 'src/interfaces';\nimport { connect } from 'react-redux';\nimport { streamService, performerService, messageService } from 'src/services';\nimport { SocketContext, Event } from 'src/socket';\nimport nextCookie from 'next-cookies';\nimport ModalBuyAssets from '@components/performer-assets/common/modal-buy-assets';\nimport PerformerProduct from '@components/performer-assets/product-carousel';\nimport PerformerVideo from '@components/performer-assets/video-carousel';\nimport PerformerGallery from '@components/performer-assets/gallery-carousel';\nimport ProfileCard from '@components/performer/profile-card';\nimport PerformerCarousel from '@components/performer/performer-carousel';\nimport Header from '@components/streaming/header';\nimport Footer from '@components/streaming/footer';\nimport Router from 'next/router';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport LiveSubscriber from 'src/components/streaming/subscriber';\nimport {\n  loadStreamMessages,\n  getStreamConversationSuccess,\n  receiveStreamMessageSuccess,\n  resetStreamMessage,\n  resetAllStreamMessage\n} from '@redux/stream-chat/actions';\nimport {\n  getPerformerDetails,\n  updatePerformerAsset\n} from '@redux/performer/actions';\nimport { updateCurrentUserBalance } from '@redux/user/actions';\nimport { getResponseError } from '@lib/utils';\nimport { StatusCodes } from 'http-status-codes';\nimport './index.less';\nimport { currentUserSelecter } from '@redux/selectors';\nimport { getPoster } from '@lib/stream';\n\n// eslint-disable-next-line no-shadow\nenum PERFORMER_ASSETS_TYPE {\n  PRODUCT = 'product',\n  GALLERY = 'gallery',\n  VIDEO = 'video'\n}\n\n// eslint-disable-next-line no-shadow\nenum STREAM_EVENT {\n  JOIN_BROADCASTER = 'join-broadcaster',\n  MODEL_LEFT = 'model-left',\n  ROOM_INFORMATIOM_CHANGED = 'public-room-changed',\n  MODEL_UPDATE_STREAMING_STATUS = 'modelUpdateStreamingStatus',\n  USER_LEFT_ROOM = 'USER_LEFT_ROOM'\n}\n\n// eslint-disable-next-line no-shadow\nenum EVENT {\n  BLOCK_USERS = 'nofify_users_block'\n}\n\ninterface IProps {\n  resetStreamMessage: Function;\n  resetAllStreamMessage: Function;\n  getStreamConversationSuccess: Function;\n  loadStreamMessages: Function;\n  activeConversation: any;\n  ui: IUIConfig;\n  user: IUser;\n  loggedIn: boolean;\n  performer: IPerformer;\n  success: boolean;\n  searching: boolean;\n  settings: StreamSettings;\n  data: IPerformer;\n  getPerformerDetails: Function;\n  updatePerformerAsset: Function;\n  updateCurrentUserBalance: Function;\n  receiveStreamMessageSuccess: Function;\n  products: Record<string, IProduct>;\n  videos: Record<string, IVideo>;\n  photos: Record<string, IPhoto>;\n  galleries: Record<string, IPerformerGallery>;\n  getStreamConversation: Function;\n}\n\ninterface IStates {\n  total: number;\n  members: IUser[];\n}\n\nclass LivePage extends PureComponent<IProps, IStates> {\n  static authenticate = false;\n\n  private subscriberRef: any;\n\n  private buyAssetsRef: any;\n\n  private socket: SocketIOClient.Socket;\n\n  static async getInitialProps({ ctx }) {\n    try {\n      const { query } = ctx;\n      if (process.browser && query.performer) {\n        return {\n          performer: JSON.parse(query.performer)\n        };\n      }\n\n      const { token } = nextCookie(ctx);\n      const headers = { Authorization: token };\n      const resp: IResponse<IPerformer> = await performerService.details(\n        query.username,\n        headers\n      );\n      const performer = resp.data;\n      if (performer.isBlocked) {\n        throw StatusCodes.FORBIDDEN;\n      }\n\n      return {\n        performer\n      };\n    } catch (e) {\n      // const err = await PromisePurchaseItemModelresolve(e);\n      if (process.browser) {\n        return Router.push('/');\n      }\n\n      ctx.res.writeHead && ctx.res.writeHead(302, { Location: '/' });\n      ctx.res.end && ctx.res.end();\n      return {};\n    }\n  }\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      total: 0,\n      members: []\n    };\n  }\n\n  componentDidMount(): any {\n    this.subscriberRef = React.createRef();\n    this.buyAssetsRef = React.createRef();\n    const { performer, user } = this.props;\n    if (!performer) {\n      Router.push('/');\n      return;\n    }\n\n    if (user && user.role === 'performer') {\n      Router.push('/live');\n      return;\n    }\n\n    if (user && user.role === 'studio') {\n      Router.push('/studio/account-settings');\n      return;\n    }\n\n    this.socket = this.context;\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n    window.addEventListener('beforeunload', this.onbeforeunload);\n    this.initProfilePage();\n  }\n\n  componentDidUpdate(prevProps: IProps) {\n    const { performer, data, activeConversation } = this.props;\n    if (data && data.isBlocked) {\n      Router.push('/403');\n      return;\n    }\n\n    if (performer && performer._id !== prevProps.performer._id) {\n      this.initProfilePage();\n    }\n\n    if (prevProps.activeConversation !== activeConversation) {\n      prevProps.activeConversation?._id\n        && this.socket.emit('public-stream/leave', {\n          conversationId: prevProps.activeConversation._id\n        });\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n  }\n\n  onChange({ total, members, conversationId }) {\n    const { activeConversation } = this.props;\n    if (activeConversation?.data?._id === conversationId) {\n      this.setState({ total, members });\n    }\n  }\n\n  onbeforeunload = () => {\n    this.leavePublicRoom();\n  };\n\n  onBoughtAssetSuccess(type, id, payload) {\n    const { updatePerformerAsset: dispatchUpdatePerformerAsset } = this.props;\n    dispatchUpdatePerformerAsset({ type, id, payload });\n  }\n\n  async joinPeformerPublicRoom() {\n    const {\n      performer,\n      loadStreamMessages: dispatchLoadStreamMessages,\n      getStreamConversationSuccess: dispatchGetStreamConversationSuccess\n    } = this.props;\n    if (performer) {\n      try {\n        // this.setState({ loading: true })\n        const resp = await messageService.findPublicConversationPerformer(\n          performer._id\n        );\n        const conversation = resp.data;\n        if (conversation && conversation._id) {\n          dispatchGetStreamConversationSuccess({ data: conversation });\n          dispatchLoadStreamMessages({\n            conversationId: conversation._id,\n            limit: 25,\n            offset: 0,\n            type: conversation.type\n          });\n          this.socket = this.context;\n          this.socket\n            && this.socket.emit('public-stream/join', {\n              conversationId: conversation._id\n            });\n        } else {\n          throw new Promise((resolve) => resolve('No available broadcast. Try again later'));\n        }\n      } catch (e) {\n        const error = await Promise.resolve(e);\n        message.error(getResponseError(error));\n      } finally {\n        // this.setState({ loading: false});\n      }\n    }\n  }\n\n  initProfilePage() {\n    const {\n      performer,\n      performer: { streamingStatus },\n      getPerformerDetails: dispatchGetPerformerDetail\n    } = this.props;\n    setTimeout(() => {\n      this.subscriberRef.current\n        && this.subscriberRef.current.resetPlaybackVideo(\n          getPoster(streamingStatus)\n        );\n    }, 100);\n    dispatchGetPerformerDetail(performer);\n    this.inscreaseView();\n    this.joinPeformerPublicRoom();\n  }\n\n  async subscribe({ performerId }) {\n    try {\n      const {\n        settings: { optionForBroadcast },\n        performer\n      } = this.props;\n      if (performer._id !== performerId) {\n        return;\n      }\n\n      const resp = await streamService.joinPublicChat(performerId);\n      const { sessionId } = resp.data;\n      if (optionForBroadcast === HLS) {\n        this.subscriberRef.current?.playHLS(sessionId);\n      } else if (optionForBroadcast === WEBRTC) {\n        this.subscriberRef.current?.play(sessionId);\n      }\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n    }\n  }\n\n  leavePublicRoom() {\n    const {\n      activeConversation,\n      resetStreamMessage: dispatchResetStreamMessage\n    } = this.props;\n    dispatchResetStreamMessage();\n    if (this.socket && activeConversation?.data?._id) {\n      this.socket.emit('public-stream/leave', {\n        conversationId: activeConversation.data._id\n      });\n    }\n\n    this.setState({\n      total: 0,\n      members: []\n    });\n  }\n\n  modelLeftHandler({ performerId }) {\n    const { performer } = this.props;\n    if (performerId !== performer._id) {\n      return;\n    }\n\n    this.subscriberRef.current?.stop();\n    message.info('Model has left the room!');\n  }\n\n  async showAssetToBuy(type: PERFORMER_ASSETS_TYPE, item) {\n    const {\n      isBought, isSale, name, type: itemType\n    } = item;\n    switch (type) {\n      case 'gallery':\n        if (isBought || !isSale) {\n          Router.push(\n            {\n              pathname: '/photos',\n              query: {\n                data: JSON.stringify(item),\n                id: item._id\n              }\n            },\n            `/photos/${item._id}`\n          );\n          return;\n        }\n        break;\n      case 'product':\n        if (isBought && itemType === 'digital') {\n          message.info(\n            `You have purchased ${name} already. Please check your email!`\n          );\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    this.buyAssetsRef.showModalBuyAssets(item, type);\n  }\n\n  userBlockHandler({ performerId }) {\n    const { performer } = this.props;\n    if (performerId === performer._id) {\n      Router.push('/403');\n    }\n  }\n\n  modelUpdateStreamingStatusHander({ status, id }) {\n    const { performer } = this.props;\n    if (id === performer._id) {\n      setTimeout(() => {\n        this.subscriberRef.current\n          && this.subscriberRef.current.resetPlaybackVideo(\n            getPoster(status)\n          );\n      }, 100);\n    }\n  }\n\n  async inscreaseView() {\n    try {\n      const {\n        performer: { _id: id }\n      } = this.props;\n      await performerService.increaseView(id);\n      // eslint-disable-next-line no-empty\n    } catch {}\n  }\n\n  userLeftRoomHandle({ username, conversationId }) {\n    const { activeConversation } = this.props;\n    if (activeConversation?.data?._id === conversationId) {\n      const { total, members } = this.state;\n      const leftMemberIndex = members.findIndex((m) => m.username === username);\n      if (leftMemberIndex > -1) {\n        this.setState({\n          total: total - 1,\n          members: members.splice(leftMemberIndex, 1)\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      performer,\n      data,\n      searching,\n      success,\n      products,\n      videos,\n      galleries,\n      ui\n    } = this.props;\n    const { members, total } = this.state;\n    return (\n      <>\n        <Head>\n          <title>{`${ui?.siteName} | ${performer?.username}`}</title>\n        </Head>\n\n        <Event\n          event={STREAM_EVENT.JOIN_BROADCASTER}\n          handler={this.subscribe.bind(this)}\n        />\n        <Event\n          event={STREAM_EVENT.MODEL_LEFT}\n          handler={this.modelLeftHandler.bind(this)}\n        />\n        <Event\n          event={STREAM_EVENT.USER_LEFT_ROOM}\n          handler={this.userLeftRoomHandle.bind(this)}\n        />\n        <Event\n          event={STREAM_EVENT.ROOM_INFORMATIOM_CHANGED}\n          handler={this.onChange.bind(this)}\n        />\n        <Event\n          event={EVENT.BLOCK_USERS}\n          handler={this.userBlockHandler.bind(this)}\n        />\n        <Event\n          event={STREAM_EVENT.MODEL_UPDATE_STREAMING_STATUS}\n          handler={this.modelUpdateStreamingStatusHander.bind(this)}\n        />\n\n        <div className=\"profile-page\">\n          <ModalBuyAssets\n            // eslint-disable-next-line no-return-assign\n            ref={(ref) => (this.buyAssetsRef = ref)}\n            onSucess={this.onBoughtAssetSuccess.bind(this)}\n            {...this.props}\n          />\n\n          <Header {...this.props} />\n\n          <Row className=\"streaming-container\">\n            <Col md={13} xs={24}>\n              <LiveSubscriber\n                ref={this.subscriberRef}\n                configs={{\n                  isPlayMode: true\n                }}\n              />\n              <Footer {...this.props} />\n            </Col>\n            <Col md={11} xs={24}>\n              <ChatBox\n                {...this.props}\n                members={members}\n                totalParticipant={total}\n              />\n            </Col>\n          </Row>\n          <Row\n            gutter={[\n              { sm: 25, xs: 0 },\n              { sm: 10, xs: 25 }\n            ]}\n          >\n            <Col xs={{ span: 24 }} lg={{ span: 8 }}>\n              <ProfileCard\n                placeholderAvatarUrl={ui?.placeholderAvatarUrl}\n                performer={data}\n                searching={searching}\n                success={success}\n              />\n            </Col>\n            <Col xs={{ span: 24 }} lg={{ span: 16 }}>\n              <PerformerProduct\n                performer={data}\n                products={products}\n                searching={searching}\n                success={success}\n                purchaseProduct={this.showAssetToBuy.bind(this, 'product')}\n              />\n              <PerformerVideo\n                performer={data}\n                videos={videos}\n                searching={searching}\n                success={success}\n              />\n              <PerformerGallery\n                performer={data}\n                galleries={galleries}\n                searching={searching}\n                success={success}\n                purchaseGallery={this.showAssetToBuy.bind(this, 'gallery')}\n              />\n              <PerformerCarousel\n                performers={data && data.relatedPerformers}\n                {...this.props}\n              />\n            </Col>\n          </Row>\n        </div>\n      </>\n    );\n  }\n}\n\nLivePage.contextType = SocketContext;\n\nconst mapStateToProps = (state) => ({\n  ui: state.ui,\n  ...state.streaming,\n  ...state.performer.performerDetails,\n  user: currentUserSelecter(state),\n  loggedIn: state.auth.loggedIn,\n  activeConversation: state.streamMessage.activeConversation\n});\nconst mapDispatch = {\n  loadStreamMessages,\n  getStreamConversationSuccess,\n  receiveStreamMessageSuccess,\n  resetStreamMessage,\n  resetAllStreamMessage,\n  updateCurrentUserBalance,\n  getPerformerDetails,\n  updatePerformerAsset\n};\nexport default connect(mapStateToProps, mapDispatch)(LivePage);\n"]},"metadata":{},"sourceType":"module"}