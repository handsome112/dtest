{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from 'react';\nimport { Form, Input, Button, Space, Select, Row, Col, InputNumber } from 'antd';\nimport Router from 'next/router';\nimport { formItemLayout, tailFormItemLayout } from 'src/lib';\nimport FormInputItem from '@components/common/base/input-item-list';\nvar initialValues = {\n  description: '',\n  sourceId: '',\n  sourceType: 'order',\n  performerId: '',\n  token: 0\n};\n\nvar RefundRequestForm = function RefundRequestForm(_ref) {\n  var onFinish = _ref.onFinish,\n      loading = _ref.loading,\n      performers = _ref.performers,\n      products = _ref.products,\n      onChangePerformer = _ref.onChangePerformer;\n  var selectPerformerRef;\n  var selectProductRef;\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var performerSelectOptions = performers && performers.map(function (per) {\n    return {\n      label: per.username,\n      value: per._id\n    };\n  });\n  var productSelectOptions = products && products.map(function (prod) {\n    return {\n      label: \"\".concat(prod.productsInfo && prod.productsInfo[0] ? prod.productsInfo[0].name : 'N/A', \" - \").concat(prod.orderNumber),\n      value: prod._id\n    };\n  });\n  var leftFormItem = [{\n    name: 'performerId',\n    label: 'Performer',\n    rules: [{\n      required: true,\n      message: 'Please select performer!'\n    }],\n    children: __jsx(Select, {\n      showSearch: true,\n      optionFilterProp: \"label\",\n      ref: function ref(_ref2) {\n        return selectPerformerRef = _ref2;\n      },\n      placeholder: \"Please Select Performer\",\n      options: performerSelectOptions,\n      onChange: function onChange(value) {\n        form.setFieldsValue({\n          sourceId: ''\n        });\n        onChangePerformer(value);\n      },\n      dropdownRender: function dropdownRender(menu) {\n        return __jsx(React.Fragment, null, menu);\n      }\n    })\n  }, {\n    name: 'description',\n    label: 'Description',\n    children: __jsx(Input.TextArea, {\n      placeholder: \"Enter Description\"\n    })\n  }];\n  var rightInputFrom = [{\n    name: 'sourceId',\n    label: 'Product',\n    rules: [{\n      required: true,\n      message: 'Please select product!'\n    }],\n    children: __jsx(Select, {\n      showSearch: true,\n      optionFilterProp: \"label\",\n      ref: function ref(_ref3) {\n        return selectProductRef = _ref3;\n      },\n      placeholder: \"Please Select Product\",\n      options: productSelectOptions,\n      onChange: function onChange(value) {\n        var prod = products.find(function (p) {\n          return p._id === value;\n        });\n        prod && form.setFieldsValue({\n          token: prod.totalPrice\n        });\n      },\n      dropdownRender: function dropdownRender(menu) {\n        return __jsx(React.Fragment, null, menu);\n      }\n    })\n  }, {\n    name: 'token',\n    label: 'Token',\n    rules: [{\n      required: true,\n      message: 'Please input product token!'\n    }],\n    children: __jsx(InputNumber, {\n      min: 1,\n      disabled: true\n    })\n  }];\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    onFinish: onFinish,\n    name: \"productsForm\",\n    className: \"product-form\",\n    initialValues: _objectSpread({}, initialValues),\n    layout: \"vertical\"\n  }), __jsx(Row, {\n    gutter: 25\n  }, __jsx(Col, {\n    sm: 12,\n    xs: 24,\n    md: 12,\n    lg: 12\n  }, __jsx(FormInputItem, {\n    fields: leftFormItem\n  })), __jsx(Col, {\n    sm: 12,\n    xs: 24,\n    md: 12,\n    lg: 12\n  }, __jsx(FormInputItem, {\n    fields: rightInputFrom\n  }))), __jsx(Form.Item, tailFormItemLayout, __jsx(Space, null, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    loading: loading\n  }, \"Save Changes\"), __jsx(Button, {\n    type: \"primary\",\n    onClick: function onClick() {\n      return Router.push('/account/user/refund-request');\n    }\n  }, \"Back\"))));\n};\n\nRefundRequestForm.defaultProps = {\n  performers: [],\n  products: []\n};\nexport default RefundRequestForm;","map":null,"metadata":{},"sourceType":"module"}