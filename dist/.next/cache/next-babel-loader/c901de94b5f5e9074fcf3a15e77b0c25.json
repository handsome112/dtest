{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { APIRequest } from './api-request';\nexport var MessageService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(MessageService, _APIRequest);\n\n  var _super = _createSuper(MessageService);\n\n  function MessageService() {\n    _classCallCheck(this, MessageService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MessageService, [{\n    key: \"getConversations\",\n    value: function getConversations(query) {\n      return this.get(this.buildUrl('/conversations', query));\n    }\n  }, {\n    key: \"searchConversations\",\n    value: function searchConversations(query) {\n      return this.get(this.buildUrl('/conversations/search', query));\n    }\n  }, {\n    key: \"createConversation\",\n    value: function createConversation(data) {\n      return this.post('/conversations', data);\n    }\n  }, {\n    key: \"getConversationDetail\",\n    value: function getConversationDetail(id) {\n      return this.get(\"/conversations/\".concat(id));\n    }\n  }, {\n    key: \"getConversationByStreamId\",\n    value: function getConversationByStreamId(streamId) {\n      return this.get(\"/conversations/stream/\".concat(streamId));\n    }\n  }, {\n    key: \"getMessages\",\n    value: function getMessages(conversationId, query) {\n      return this.get(this.buildUrl(\"/messages/conversations/\".concat(conversationId), query));\n    }\n  }, {\n    key: \"getPublicMessages\",\n    value: function getPublicMessages(conversationId, query) {\n      return this.get(this.buildUrl(\"/messages/conversations/public/\".concat(conversationId), query));\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(conversationId, data) {\n      return this.post(\"/messages/conversations/\".concat(conversationId), data);\n    }\n  }, {\n    key: \"sendStreamMessage\",\n    value: function sendStreamMessage(conversationId, data) {\n      return this.post(\"/messages/stream/conversations/\".concat(conversationId), data);\n    }\n  }, {\n    key: \"sendPublicStreamMessage\",\n    value: function sendPublicStreamMessage(conversationId, data) {\n      return this.post(\"/messages/stream/public/conversations/\".concat(conversationId), data);\n    }\n  }, {\n    key: \"findPublicConversationPerformer\",\n    value: function findPublicConversationPerformer(performerId) {\n      return this.get(\"/conversations/stream/public/\".concat(performerId));\n    }\n  }, {\n    key: \"countTotalNotRead\",\n    value: function countTotalNotRead() {\n      return this.get('/messages/counting-not-read-messages');\n    }\n  }, {\n    key: \"readAllInConversation\",\n    value: function readAllInConversation(conversationId, recipientId) {\n      return this.post('/messages/read-all', {\n        conversationId: conversationId,\n        recipientId: recipientId\n      });\n    }\n  }, {\n    key: \"getMessageUploadUrl\",\n    value: function getMessageUploadUrl() {\n      return \"\".concat(process.env.NEXT_PUBLIC_API_ENDPOINT, \"/messages/private/file\");\n    }\n  }, {\n    key: \"deleteMessage\",\n    value: function deleteMessage(id) {\n      return this.del(\"/messages/\".concat(id));\n    }\n  }, {\n    key: \"deleteAllMessageInConversation\",\n    value: function deleteAllMessageInConversation(conversationId) {\n      return this.del(\"/messages/\".concat(conversationId, \"/remove-all-message\"));\n    }\n  }]);\n\n  return MessageService;\n}(APIRequest);\nexport var messageService = new MessageService();","map":null,"metadata":{},"sourceType":"module"}