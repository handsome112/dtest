{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/streaming/header.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Row, Col, Button, message } from 'antd';\nimport { GiftIcon } from '@components/common/base/icons';\nimport Popup from '@components/common/base/popup';\nimport { defaultColor } from 'src/lib';\nimport { HeartFilled, HeartOutlined, MailOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport { favouriteService, transactionService } from 'src/services';\nimport { getResponseError, checkUserLogin } from 'src/lib/utils';\nimport Router from 'next/router';\nimport NumberFormat from '@components/common/layout/numberformat';\nimport SendTipContent from './tip/content';\nimport './header.less';\nconst btnStyle = {\n  height: 35,\n  margin: 8\n};\nexport default (({\n  performer,\n  ui,\n  loggedIn,\n  user,\n  updateCurrentUserBalance,\n  activeConversation\n}) => {\n  const tipPopupRef = /*#__PURE__*/React.createRef();\n  let contentRef;\n  const {\n    _id,\n    username\n  } = performer;\n  const [isFavorite, setIsFavorite] = React.useState(performer.isFavorite || false);\n  const [disableOk, setDisableOk] = React.useState(false);\n  const [tipping, setTipping] = React.useState(false);\n\n  const handleError = async e => {\n    const error = await Promise.resolve(e);\n    message.error(getResponseError(error));\n  };\n\n  const onLike = async () => {\n    if (!checkUserLogin(loggedIn, user)) {\n      message.error('Please login to add favorite!');\n      return;\n    }\n\n    try {\n      await favouriteService.favorite(_id, isFavorite);\n      setIsFavorite(!isFavorite);\n    } catch (e) {\n      handleError(e);\n    }\n  };\n\n  const sendGift = () => {\n    if (!checkUserLogin(loggedIn, user)) {\n      message.error(`Please login to send gift to ${username}!`);\n    }\n  };\n\n  const notify = () => {\n    if (!checkUserLogin(loggedIn, user)) {\n      message.error(`Please login to notify ${username}!`);\n    }\n  };\n\n  const sendMessage = () => {\n    if (!checkUserLogin(loggedIn, user)) {\n      if (false) {\n        Router.push('/auth/login');\n      }\n\n      return;\n    }\n\n    Router.push({\n      pathname: '/messages',\n      query: {\n        toSource: 'performer',\n        toId: _id || ''\n      }\n    });\n  };\n\n  const sendTip = () => {\n    if (!checkUserLogin(loggedIn, user)) {\n      message.error(`Please login to send tip to ${username}!`);\n      return;\n    }\n\n    tipPopupRef.current && tipPopupRef.current.setVisible(true);\n  };\n\n  const onOk = async () => {\n    var _activeConversation$d;\n\n    if (activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d = activeConversation.data) !== null && _activeConversation$d !== void 0 && _activeConversation$d._id) {\n      const ref = tipPopupRef.current;\n\n      try {\n        setTipping(true);\n        const token = contentRef ? contentRef.getValueToken() : 0;\n        if (parseInt(token, 10) <= 0) return;\n        await transactionService.sendTipToken(_id, token, activeConversation.data._id);\n        ref && ref.setVisible(false);\n        updateCurrentUserBalance && updateCurrentUserBalance(-token);\n\n        const content = __jsx(NumberFormat, {\n          value: token,\n          prefix: \"You sent \",\n          suffix: \" tokens\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 11\n          }\n        });\n\n        message.success(content);\n      } catch (e) {\n        handleError(e);\n      } finally {\n        setTipping(false);\n        ref && ref.setVisible(false);\n      }\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Popup, {\n    title: `Tips to ${username}`,\n    okButtonProps: {\n      disabled: disableOk\n    },\n    content: __jsx(SendTipContent, {\n      ref: ref => {\n        contentRef = ref;\n      },\n      setDisableOk: setDisableOk,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }),\n    loading: tipping,\n    ref: tipPopupRef,\n    onOk: onOk,\n    width: 567,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }), __jsx(Row, {\n    className: \"stream-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    sm: 12,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"left-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, __jsx(\"img\", {\n    src: performer.avatar || (ui === null || ui === void 0 ? void 0 : ui.placeholderAvatarUrl) || '/user.png',\n    alt: \"\",\n    className: \"stream-avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }), ' ', __jsx(\"div\", {\n    className: \"stream-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, performer.username), performer.streamingTitle && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 15\n    }\n  }, performer.streamingTitle)))), __jsx(Col, {\n    sm: 12,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    className: \"button-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    hidden: true,\n    icon: __jsx(GiftIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }),\n    style: btnStyle,\n    onClick: () => sendGift(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, \"Send Gift\"), __jsx(Button, {\n    type: \"default\",\n    hidden: true,\n    style: btnStyle,\n    icon: __jsx(HeartOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    }),\n    onClick: () => notify(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, \"Notify me\"), __jsx(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    type: \"default\",\n    style: btnStyle,\n    icon: __jsx(MailOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 23\n      }\n    }),\n    onClick: () => sendMessage(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 15\n    }\n  }, \"Send message\")), __jsx(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    type: \"default\",\n    style: _objectSpread(_objectSpread({}, btnStyle), {}, {\n      width: 100,\n      flexDirection: 'row',\n      justifyContent: 'center'\n    }),\n    onClick: () => onLike(),\n    icon: isFavorite ? __jsx(HeartFilled, {\n      style: {\n        color: defaultColor.primaryColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }\n    }) : __jsx(HeartOutlined, {\n      style: {\n        color: defaultColor.primaryColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 19\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  }, isFavorite ? 'UnLike' : 'Like')), __jsx(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    style: btnStyle,\n    onClick: () => sendTip(),\n    icon: __jsx(PlusCircleOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 23\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 15\n    }\n  }, \"Send Tip\"))))));\n});","map":null,"metadata":{},"sourceType":"module"}