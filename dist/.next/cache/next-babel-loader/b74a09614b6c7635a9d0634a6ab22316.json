{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { gettingPerformerProduct, getPerformerProductsSuccess, getPerformerProductsFail, loadMorePerformerProduct, purchaseProductSuccess } from './actions';\nconst initialProductState = {\n  data: {},\n  total: 0,\n  error: null,\n  searching: false,\n  success: false,\n  ids: []\n};\nconst productReducers = [{\n  on: gettingPerformerProduct,\n\n  reducer() {\n    return _objectSpread(_objectSpread({}, initialProductState), {}, {\n      searching: true\n    });\n  }\n\n}, {\n  on: getPerformerProductsSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      data: action.payload.data,\n      total: action.payload.total,\n      ids: action.payload.ids,\n      error: null,\n      searching: false,\n      success: true\n    });\n  }\n\n}, {\n  on: getPerformerProductsFail,\n\n  reducer(_, action) {\n    return {\n      data: null,\n      error: action.payload.data,\n      searching: false,\n      success: false\n    };\n  }\n\n}, {\n  on: loadMorePerformerProduct,\n\n  reducer(state, action) {\n    const {\n      ids,\n      data\n    } = state;\n    const products = action.payload;\n    products.forEach(p => {\n      data[p._id] = p;\n      ids.push(p._id);\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: purchaseProductSuccess,\n\n  reducer(state, action) {\n    const {\n      data\n    } = state;\n    data[action.payload].isBought = true;\n    return _objectSpread({}, state);\n  }\n\n}];\nexport default merge({}, createReducers('product', [productReducers], initialProductState));","map":null,"metadata":{},"sourceType":"module"}