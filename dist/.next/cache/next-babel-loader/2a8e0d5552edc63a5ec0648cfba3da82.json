{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/tag/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport Router, { withRouter } from 'next/router';\nimport { connect } from 'react-redux';\nimport PerformerGrid from '@components/performer/performer-grid';\nimport { searchPerformer, updatePerformerFavourite } from '@redux/performer/actions';\nimport Error from 'pages/_error';\nimport { Button, Row, Col, message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport { GENNDER_PERFORMER } from '@services/perfomer.service';\nimport { favouriteService } from 'src/services';\nimport { getResponseError } from 'src/lib';\nimport './index.less';\nimport { SocketContext } from 'src/socket';\nconst initQueryState = {\n  offset: 0,\n  limit: 100,\n  gender: '',\n  category: '',\n  country: '',\n  sortBy: '',\n  sort: 'desc'\n};\nconst focusStyle = {\n  color: '#ff2977',\n  backgroundColor: '#fff',\n  borderColor: '#ff2977'\n};\n\nclass PerformerTagPage extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"search\", () => {\n      const {\n        searchPerformer: dispatchSearchPerformer,\n        router\n      } = this.props;\n      const {\n        query\n      } = this.state;\n      dispatchSearchPerformer(_objectSpread(_objectSpread({}, router.query), query));\n    });\n\n    this.state = {\n      query: initQueryState\n    };\n  }\n\n  componentDidMount() {\n    this.search();\n    this.socket = this.context;\n    this.socket.on('modelUpdateStatus', this.search);\n    this.socket.on('modelUpdateStreamingStatus', this.search);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      router,\n      loggedIn\n    } = this.props;\n\n    if (router.query !== prevProps.router.query) {\n      this.search();\n    }\n\n    if (!loggedIn && loggedIn !== prevProps.loggedIn) {\n      this.search();\n    }\n  }\n\n  componentWillUnmount() {\n    this.socket = this.context;\n\n    if (this.socket) {\n      this.socket.off('modelUpdateStatus');\n      this.socket.off('modelUpdateStreamingStatus');\n    }\n  }\n\n  async onLike(performer) {\n    const {\n      _id,\n      isFavorite\n    } = performer;\n    const {\n      updatePerformerFavourite: dispatchUpdatePerformerFavourite\n    } = this.props;\n\n    try {\n      await favouriteService.favorite(_id, isFavorite);\n      dispatchUpdatePerformerFavourite(_id);\n    } catch (error) {\n      const e = await Promise.resolve(error);\n      message.error(getResponseError(e));\n    }\n  }\n\n  filter(name, value) {\n    const {\n      router\n    } = this.props;\n    const {\n      query\n    } = this.state;\n    Router.push({\n      pathname: '/tag',\n      query: _objectSpread(_objectSpread(_objectSpread({}, router.query), query), {}, {\n        [name]: value\n      })\n    });\n  }\n\n  render() {\n    const {\n      router\n    } = this.props;\n    const {\n      query\n    } = this.state;\n    const {\n      tags\n    } = router.query;\n    if (!router.query.tags) return __jsx(Error, {\n      statusCode: 404,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 36\n      }\n    });\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, \"Models -\", tags)), __jsx(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, __jsx(PageHeader, {\n      title: tags,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }), __jsx(Row, {\n      align: \"middle\",\n      justify: \"center\",\n      className: \"filter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, GENNDER_PERFORMER.map(gender => __jsx(Button, {\n      key: gender,\n      onClick: this.filter.bind(this, 'gender', gender),\n      type: \"dashed\",\n      style: gender === query.gender ? _objectSpread({}, focusStyle) : {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, gender)))), __jsx(PerformerGrid, _extends({}, this.props, query, {\n      setFilter: this.filter.bind(this),\n      onLike: this.onLike.bind(this),\n      isPage: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\nPerformerTagPage.contextType = SocketContext;\n\nconst mapStateToProps = state => _objectSpread({\n  loggedIn: state.auth.loggedIn\n}, state.performer.performers);\n\nconst mapDispatch = {\n  searchPerformer,\n  updatePerformerFavourite\n};\nexport default withRouter(connect(mapStateToProps, mapDispatch)(PerformerTagPage));","map":null,"metadata":{},"sourceType":"module"}