{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/payout-request/form.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { Form, Row, Col, Button, Input, DatePicker, Space, Statistic, message, Select } from 'antd';\nimport { tailFormItemLayout } from 'src/lib';\nimport { paymentAccountTypes, PAYMENT_ACCOUNT } from 'src/interfaces';\nimport { payoutRequestService } from 'src/services';\nimport './index.less';\nimport moment from 'moment';\n\nconst PayoutRequestForm = ({\n  payout,\n  submit,\n  submitting,\n  role\n}) => {\n  const [tokenMustPay, setTokenMustPay] = React.useState(payout.tokenMustPay || 0);\n  const [previousPaidOut, setPreviousPaidOut] = React.useState(payout.previousPaidOut || 0);\n  const [pendingToken, setPendingToken] = React.useState(payout.pendingToken || 0);\n\n  const handleDateChange = async (_, dateStrings) => {\n    try {\n      if (!dateStrings[0] || !dateStrings[1]) return;\n      const query = {\n        fromDate: dateStrings[0],\n        toDate: dateStrings[1]\n      };\n      const resp = await payoutRequestService.calculate(query, role);\n      setTokenMustPay(resp.data.totalPrice);\n      setPreviousPaidOut(resp.data.paidPrice);\n      setPendingToken(resp.data.remainingPrice);\n    } catch {\n      message.error('Something went wrong. Please try to input date againÆ’!');\n    }\n  };\n\n  const [form] = Form.useForm();\n  const {\n    paymentAccountType,\n    requestNote,\n    fromDate,\n    toDate\n  } = payout;\n  return __jsx(Form, {\n    form: form,\n    layout: \"vertical\",\n    className: \"payout-request-form\",\n    name: \"payoutRequestForm\",\n    onFinish: submit,\n    initialValues: {\n      paymentAccountType: paymentAccountType || PAYMENT_ACCOUNT.WIRE,\n      requestNote: requestNote || '',\n      date: fromDate && toDate ? [moment(fromDate), moment(toDate)] : []\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    xs: 24,\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    name: \"date\",\n    label: \"Date\",\n    rules: [{\n      required: true,\n      message: 'Please input the date!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, __jsx(DatePicker.RangePicker, {\n    onChange: handleDateChange,\n    disabled: !!(payout !== null && payout !== void 0 && payout._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }))), __jsx(Col, {\n    xs: 24,\n    sm: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, __jsx(Space, {\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, __jsx(Statistic, {\n    title: \"Earnings For The Selected Date\",\n    value: tokenMustPay,\n    precision: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), __jsx(Statistic, {\n    title: \"Previous Payout\",\n    value: previousPaidOut,\n    precision: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }), __jsx(Statistic, {\n    title: \"Earnings Pending In Your Account\",\n    value: pendingToken,\n    precision: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  })))), __jsx(Form.Item, {\n    label: \"Payment Account Type\",\n    name: \"paymentAccountType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    disabled: !!(payout !== null && payout !== void 0 && payout._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, paymentAccountTypes.map(t => __jsx(Select.Option, {\n    value: t.value,\n    key: t.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, t.title)))), __jsx(Form.Item, {\n    label: \"Comment\",\n    name: \"requestNote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, _extends({}, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    type: \"primary\",\n    loading: submitting,\n    htmlType: \"submit\",\n    disabled: !tokenMustPay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Save Change\")));\n};\n\nPayoutRequestForm.defaultProps = {\n  role: 'performer'\n};\nexport default PayoutRequestForm;","map":null,"metadata":{},"sourceType":"module"}