{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/messages/MessageList.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport '../stream-chat/MessageList.less';\nimport { loadMoreMessages } from '@redux/message/actions';\nimport Compose from './Compose';\nimport Message from './Message';\n\nclass MessageList extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"messagesRef\", void 0);\n\n    _defineProperty(this, \"state\", {\n      offset: 1,\n      onloadmore: false\n    });\n\n    _defineProperty(this, \"renderMessages\", () => {\n      const {\n        message,\n        currentUser,\n        currentPerformer\n      } = this.props;\n      const messages = message.items;\n      let i = 0;\n      const messageCount = messages.length;\n      const tempMessages = [];\n\n      while (i < messageCount) {\n        const previous = messages[i - 1];\n        const current = messages[i];\n        const next = messages[i + 1];\n        const isMine = current.senderId === (currentUser && currentUser._id || currentPerformer && currentPerformer._id);\n        const currentMoment = moment(current.createdAt);\n        let prevBySameAuthor = false;\n        let nextBySameAuthor = false;\n        let startsSequence = true;\n        let endsSequence = true;\n        let showTimestamp = true;\n\n        if (previous) {\n          const previousMoment = moment(previous.createdAt);\n          const previousDuration = moment.duration(currentMoment.diff(previousMoment));\n          prevBySameAuthor = previous.senderId === current.senderId;\n\n          if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n            startsSequence = false;\n          }\n\n          if (previousDuration.as('hours') < 1) {\n            showTimestamp = false;\n          }\n        }\n\n        if (next) {\n          const nextMoment = moment(next.createdAt);\n          const nextDuration = moment.duration(nextMoment.diff(currentMoment));\n          nextBySameAuthor = next.senderId === current.senderId;\n\n          if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n            endsSequence = false;\n          }\n        }\n\n        if (current._id) {\n          tempMessages.push(__jsx(Message, {\n            key: i,\n            isMine: isMine,\n            startsSequence: startsSequence,\n            endsSequence: endsSequence,\n            showTimestamp: showTimestamp,\n            data: current,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 11\n            }\n          }));\n        } // Proceed to the next message.\n\n\n        i += 1;\n      }\n\n      this.scrollToBottom();\n      return tempMessages;\n    });\n  }\n\n  async componentDidMount() {\n    if (!this.messagesRef) this.messagesRef = /*#__PURE__*/createRef();\n  }\n\n  async componentDidUpdate(prevState) {\n    const {\n      conversation\n    } = this.props;\n\n    if (prevState && prevState.conversation && prevState.conversation._id !== conversation._id) {\n      this.setOffset();\n    }\n  }\n\n  async handleScroll(conversation, event) {\n    const {\n      message,\n      loadMoreMessages: dispatchLoadMoreMessages\n    } = this.props;\n    const {\n      fetching,\n      items,\n      total\n    } = message;\n    const {\n      offset\n    } = this.state;\n    const canloadmore = total > items.length;\n    const ele = event.target;\n    if (!canloadmore) return;\n\n    if (ele.scrollTop === 0 && conversation._id && !fetching && canloadmore) {\n      await this.setState({\n        offset: offset + 1,\n        onloadmore: true\n      });\n      dispatchLoadMoreMessages({\n        conversationId: conversation._id,\n        limit: 20,\n        offset: (offset - 1) * 20\n      });\n    }\n  }\n\n  async setOffset() {\n    this.setState({\n      offset: 1\n    });\n  }\n\n  scrollToBottom() {\n    const {\n      onloadmore\n    } = this.state;\n\n    if (onloadmore) {\n      return;\n    }\n\n    if (this.messagesRef && this.messagesRef.current) {\n      const ele = this.messagesRef.current;\n      window.setTimeout(() => {\n        ele.scrollTop = ele.scrollHeight;\n      }, 300);\n    }\n  }\n\n  render() {\n    const {\n      conversation,\n      message\n    } = this.props;\n    const {\n      fetching\n    } = message;\n    if (!this.messagesRef) this.messagesRef = /*#__PURE__*/createRef();\n    return __jsx(\"div\", {\n      className: \"message-list custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, conversation && conversation._id ? __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"message-list-container\",\n      ref: this.messagesRef,\n      onScroll: this.handleScroll.bind(this, conversation),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, fetching && __jsx(\"p\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 28\n      }\n    }, \"fetching...\"), this.renderMessages()), __jsx(Compose, {\n      conversation: conversation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    })) : __jsx(\"div\", {\n      className: \"start-conversation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, \"Click conversation to start\")));\n  }\n\n}\n\nconst mapStates = state => {\n  const {\n    conversationMap\n  } = state.message;\n  const {\n    activeConversation\n  } = state.conversation;\n  const messages = conversationMap[activeConversation._id] ? conversationMap[activeConversation._id].items || [] : [];\n  const totalMessages = conversationMap[activeConversation._id] ? conversationMap[activeConversation._id].total || 0 : 0;\n  const fetching = conversationMap[activeConversation._id] ? conversationMap[activeConversation._id].fetching || false : false;\n  return {\n    message: {\n      items: messages,\n      total: totalMessages,\n      fetching\n    },\n    conversation: activeConversation,\n    currentUser: state.user.current,\n    currentPerformer: state.performer.current\n  };\n};\n\nconst mapDispatch = {\n  loadMoreMessages\n};\nexport default connect(mapStates, mapDispatch)(MessageList);","map":null,"metadata":{},"sourceType":"module"}