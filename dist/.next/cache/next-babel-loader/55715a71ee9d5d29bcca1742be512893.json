{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable camelcase */\nimport React, { PureComponent } from 'react';\nimport withAntmedia from 'src/antmedia';\nimport { Button, message } from 'antd';\nimport Router from 'next/router';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport { SocketContext } from 'src/socket';\nimport { streamService } from 'src/services';\nimport videojs from 'video.js';\nimport classnames from 'classnames';\nimport { isMobile } from 'react-device-detect';\nimport './private-streaming-container.less';\nconst STREAM_JOINED = 'private-stream/streamJoined';\nconst STREAM_LEAVED = 'private-stream/streamLeaved';\nconst JOINED_THE_ROOM = 'JOINED_THE_ROOM';\n\nclass PrivateStreamingContainer extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"activeStreams\", []);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"getLiveStreamOrVodURLInterval\", void 0);\n\n    _defineProperty(this, \"publisher\", void 0);\n\n    _defineProperty(this, \"player\", void 0);\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      this.leaveStream();\n    });\n\n    this.state = {\n      streamId: null,\n      conversationId: null,\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.socket = this.context;\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n    window.addEventListener('beforeunload', this.onbeforeunload);\n  }\n\n  componentDidUpdate(_, prevStates) {\n    const {\n      conversationId\n    } = this.state;\n\n    if (conversationId && conversationId !== prevStates.conversationId) {\n      this.initSocketEvent();\n    }\n  }\n\n  componentWillUnmount() {\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n  }\n\n  async handelWebRTCAdaptorCallback(info, obj) {\n    const {\n      conversationId,\n      streamId\n    } = this.state;\n    const {\n      settings,\n      webRTCAdaptor,\n      configs\n    } = this.props;\n    this.socket = this.context;\n\n    if (info === WEBRTC_ADAPTOR_INFORMATIONS.INITIALIZED) {\n      if (settings.optionForPrivate === 'hls') {\n        const token = await streamService.getPublishToken({\n          streamId,\n          settings\n        });\n        webRTCAdaptor.publish(streamId, token);\n      }\n\n      webRTCAdaptor.joinRoom(conversationId, streamId);\n    } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.NEW_STREAM_AVAILABLE) {\n      const activeStream = this.activeStreams.find(id => id === obj.streamId);\n\n      if (!activeStream) {\n        this.activeStreams.push(obj.streamId);\n        this.createRemoteVideo(obj.stream);\n      }\n    } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.JOINED_THE_ROOM) {\n      if (settings.optionForPrivate === 'webrtc') {\n        const token = await streamService.getPublishToken({\n          streamId,\n          settings\n        });\n        webRTCAdaptor.publish(streamId, token);\n      }\n    } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_STARTED) {\n      if (!isMobile) {\n        const player = videojs(configs.localVideoId, {\n          liveui: true,\n          controls: true,\n          muted: true,\n          bigPlayButton: false,\n          controlBar: {\n            playToggle: false,\n            currentTimeDisplay: false,\n            volumePanel: false\n          }\n        });\n        player.on('error', () => {\n          player.error(null);\n        });\n        player.one('play', () => {\n          this.publisher = player;\n        });\n      }\n\n      this.socket.emit('private-stream/join', {\n        conversationId,\n        streamId: obj.streamId\n      });\n      this.setState({\n        loading: false\n      });\n    } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_FINISHED) {\n      this.socket.emit('private-stream/leave', {\n        conversationId,\n        streamId: obj.streamId\n      });\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  initSocketEvent() {\n    const {\n      initWebRTCAdaptor\n    } = this.props;\n    this.socket = this.context;\n    this.socket.on(JOINED_THE_ROOM, ({\n      streamId,\n      streamList,\n      conversationId: _id\n    }) => {\n      const {\n        conversationId\n      } = this.state;\n      if (_id !== conversationId) return;\n      this.setState({\n        streamId\n      });\n      initWebRTCAdaptor(this.handelWebRTCAdaptorCallback.bind(this));\n\n      if (streamList.length) {\n        this.playHLS(streamList[0]);\n      }\n    });\n    this.socket.on(STREAM_JOINED, data => {\n      const {\n        streamId,\n        conversationId\n      } = this.state;\n      if (conversationId !== data.conversationId) return;\n\n      if (streamId !== data.streamId) {\n        this.playHLS(data.streamId);\n      }\n    });\n    this.socket.on(STREAM_LEAVED, data => {\n      const {\n        conversationId,\n        streamId\n      } = this.state;\n      if (!conversationId || conversationId !== data.conversationId || streamId === data.streamId) return;\n      message.error('Private call has ended.');\n      window.setTimeout(() => {\n        Router.push('/');\n      }, 10 * 1000);\n    });\n  }\n\n  start(sessionId, conversationId) {\n    this.setState({\n      conversationId\n    });\n  }\n\n  leaveStream() {\n    const {\n      publish_started,\n      webRTCAdaptor\n    } = this.props;\n    const {\n      conversationId,\n      streamId\n    } = this.state;\n\n    if (this.publisher) {\n      this.publisher.dispose();\n      this.publisher = undefined;\n    }\n\n    if (this.player) {\n      this.player.dispose();\n      this.player = undefined;\n    }\n\n    this.getLiveStreamOrVodURLInterval && clearInterval(this.getLiveStreamOrVodURLInterval);\n    this.socket.off(JOINED_THE_ROOM);\n    this.socket.off(STREAM_JOINED);\n    this.socket.off(STREAM_LEAVED);\n\n    if (streamId && publish_started) {\n      webRTCAdaptor && webRTCAdaptor.leaveFromRoom(conversationId);\n      this.socket.emit('private-stream/leave', {\n        conversationId,\n        streamId\n      });\n    }\n\n    this.setState({\n      streamId: null,\n      conversationId: null\n    });\n  }\n\n  async ended(streamId) {\n    this.player && this.player.error(null);\n    const {\n      settings\n    } = this.props;\n    const src = await streamService.getLiveStreamOrVodURL({\n      streamId,\n      settings,\n      appName: settings.AntMediaAppname\n    });\n\n    if (src) {\n      this.getLiveStreamOrVodURLInterval = setInterval(() => {\n        fetch(src, {\n          method: 'HEAD'\n        }).then(() => {\n          this.playHLS(streamId);\n          this.getLiveStreamOrVodURLInterval && clearInterval(this.getLiveStreamOrVodURLInterval);\n        });\n      }, 5000);\n    }\n  }\n\n  async playHLS(streamId) {\n    const {\n      settings,\n      configs\n    } = this.props;\n    const appName = configs.appName || settings.AntMediaAppname;\n    this.getLiveStreamOrVodURLInterval && clearInterval(this.getLiveStreamOrVodURLInterval);\n    const src = await streamService.getLiveStreamOrVodURL({\n      appName,\n      settings,\n      streamId\n    });\n\n    if (!src) {\n      return;\n    }\n\n    let video = document.querySelector('#private-subscriber');\n\n    if (!video) {\n      video = document.createElement('video');\n      video.setAttribute('id', 'private-subscriber');\n      video.setAttribute('class', 'video-js broadcaster vjs-waiting');\n      video.setAttribute('autoplay', 'autoplay');\n      video.setAttribute('data-setup', '{\"fluid\": true}');\n      document.querySelector('.private-streaming-container').append(video);\n    }\n\n    if (!this.player) {\n      this.player = videojs('private-subscriber', {\n        liveui: true,\n        controls: true,\n        autoplay: true\n      });\n      this.player.on('ended', () => this.ended(streamId));\n      this.player.on('error', () => this.ended(streamId));\n    }\n\n    setTimeout(() => {\n      if (!this.player) return;\n      this.player.src({\n        type: 'application/x-mpegURL',\n        src\n      });\n    }, 10 * 1000);\n  }\n\n  createRemoteVideo(stream) {\n    const video = document.createElement('video');\n    video.setAttribute('id', 'private-subscriber');\n    video.setAttribute('class', 'video-js broadcaster');\n    video.setAttribute('autoplay', 'autoplay');\n    video.setAttribute('controls', 'controls');\n    video.srcObject = stream;\n    document.querySelector('.private-streaming-container').append(video);\n  }\n\n  leave() {\n    if (false) {\n      this.leaveStream();\n      setTimeout(() => {\n        window.location.href = '/';\n      }, 10 * 1000);\n    }\n  }\n\n  stop() {\n    const {\n      leaveSession\n    } = this.props;\n    leaveSession();\n  }\n\n  async play(streamId) {\n    const {\n      settings,\n      webRTCAdaptor\n    } = this.props;\n    const token = await streamService.getSubscriberToken({\n      streamId,\n      settings\n    });\n    webRTCAdaptor.play(streamId, token);\n  }\n\n  render() {\n    const {\n      onClick,\n      initialized,\n      containerClassName,\n      publish_started,\n      configs\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: classnames('private-streaming-container', containerClassName),\n      hidden: !publish_started\n    }, __jsx(\"video\", {\n      id: configs.localVideoId,\n      controls: true,\n      className: \"video-js broadcaster\",\n      autoPlay: true,\n      muted: true,\n      playsInline: true\n    })), __jsx(\"div\", null, !initialized ? __jsx(Button, {\n      type: \"primary\",\n      onClick: onClick,\n      loading: loading,\n      block: true\n    }, \"Start Streaming\") : __jsx(Button, {\n      type: \"primary\",\n      onClick: this.leave.bind(this),\n      block: true,\n      disabled: loading\n    }, \"Stop Streaming\")));\n  }\n\n}\n\nPrivateStreamingContainer.contextType = SocketContext;\nexport default withAntmedia(PrivateStreamingContainer);","map":null,"metadata":{},"sourceType":"module"}