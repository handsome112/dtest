{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport React, { PureComponent } from 'react';\nimport { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport { orderService } from '@services/index';\nimport { OrderSearchFilter } from '@components/order';\nimport OrderTableList from '@components/order/table-list';\nimport { connect } from 'react-redux';\nimport { getSearchData } from 'src/lib/utils';\n\nclass ModelOrderPage extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      pagination: {},\n      searching: false,\n      list: [],\n      limit: 10,\n      filter: {},\n      sortBy: 'createdAt',\n      sort: 'desc'\n    });\n\n    _defineProperty(this, \"handleTableChange\", async (pagination, filters, sorter) => {\n      const pager = _objectSpread({}, pagination);\n\n      const oldState = _objectSpread({}, this.state);\n\n      pager.current = pagination.current;\n      await this.setState(getSearchData(pagination, filters, sorter, oldState));\n      this.search(pager.current);\n    });\n  }\n\n  static async getInitialProps({\n    ctx\n  }) {\n    return ctx.query;\n  }\n\n  async componentDidMount() {\n    this.search();\n  }\n\n  async handleFilter(filter) {\n    await this.setState({\n      filter\n    });\n    this.search();\n  }\n\n  async search(page = 1) {\n    const {\n      filter,\n      limit,\n      sort,\n      sortBy,\n      pagination\n    } = this.state;\n\n    try {\n      await this.setState({\n        searching: true\n      });\n      const resp = await orderService.search(_objectSpread(_objectSpread({}, filter), {}, {\n        limit,\n        offset: (page - 1) * limit,\n        sort,\n        sortBy\n      }));\n      await this.setState({\n        searching: false,\n        list: resp.data.data,\n        pagination: _objectSpread(_objectSpread({}, pagination), {}, {\n          total: resp.data.total,\n          pageSize: limit\n        })\n      });\n    } catch (e) {\n      message.error('An error occurred, please try again!');\n      await this.setState({\n        searching: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      list,\n      searching,\n      pagination\n    } = this.state;\n    const statuses = [{\n      key: '',\n      text: 'All'\n    }, {\n      key: 'processing',\n      text: 'Processing'\n    }, {\n      key: 'shipping',\n      text: 'Shipping'\n    }, {\n      key: 'delivered',\n      text: 'Delivered'\n    }, {\n      key: 'refunded',\n      text: 'Refunded'\n    }];\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My Orders\")), __jsx(\"div\", {\n      className: \"transaction-history-page\"\n    }, __jsx(PageHeader, {\n      title: \"My Orders\"\n    }), __jsx(\"div\", null, __jsx(OrderSearchFilter, {\n      statuses: statuses,\n      onSubmit: this.handleFilter.bind(this)\n    }), __jsx(OrderTableList, {\n      type: \"performer\",\n      dataSource: list,\n      rowKey: \"_id\",\n      loading: searching,\n      pagination: pagination,\n      onChange: this.handleTableChange.bind(this)\n    }))));\n  }\n\n}\n\n_defineProperty(ModelOrderPage, \"authenticate\", true);\n\n_defineProperty(ModelOrderPage, \"layout\", 'primary');\n\nconst mapStates = state => ({\n  ui: state.ui\n});\n\nexport default connect(mapStates)(ModelOrderPage);","map":null,"metadata":{},"sourceType":"module"}