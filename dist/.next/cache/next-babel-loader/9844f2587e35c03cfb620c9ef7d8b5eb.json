{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { message } from 'antd';\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { settingService } from '@services/setting.service';\nimport { getResponseError } from '@lib/utils';\nimport { authService } from 'src/services';\nimport StudioRegisterForm from '@components/auth/register/studio-register-form';\nimport { connect } from 'react-redux';\nimport { FormRegisterPlaceHolder } from '@components/common/layout';\nimport '../auth/index.less';\n\nclass RegisterStudioPage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false,\n      errorMessage: '',\n      countries: [],\n      registering: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      loggedIn\n    } = this.props;\n\n    if (loggedIn) {\n      Router.push('/');\n    }\n\n    this.getContries();\n  }\n\n  async getContries() {\n    try {\n      const countries = await settingService.getCountries();\n      this.setState({\n        countries: countries.data\n      });\n    } catch (error) {\n      this.setState({\n        error: true,\n        errorMessage: getResponseError(error)\n      });\n    }\n  }\n\n  async submit(data) {\n    try {\n      var _resp$data, _resp$data2;\n\n      this.setState({\n        registering: true\n      });\n      const resp = await authService.studioRegister(data);\n      message.success(resp !== null && resp !== void 0 && (_resp$data = resp.data) !== null && _resp$data !== void 0 && _resp$data.message ? resp === null || resp === void 0 ? void 0 : (_resp$data2 = resp.data) === null || _resp$data2 === void 0 ? void 0 : _resp$data2.message : 'Registered successfully, please wait for our admin approval');\n      Router.push('/studio/login');\n    } catch (error) {\n      this.setState({\n        error: true,\n        errorMessage: getResponseError(error)\n      });\n    } finally {\n      this.setState({\n        registering: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      error,\n      errorMessage,\n      countries,\n      registering\n    } = this.state;\n    const {\n      ui\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \" Studio Register \")), __jsx(\"div\", {\n      className: \"register-page\"\n    }, __jsx(\"div\", {\n      className: \"form-register-container\"\n    }, __jsx(StudioRegisterForm, {\n      error: error,\n      onFinish: this.submit.bind(this),\n      submiting: registering,\n      countries: countries,\n      errorMessage: errorMessage\n    })), __jsx(FormRegisterPlaceHolder, {\n      ui: ui\n    })));\n  }\n\n}\n\n_defineProperty(RegisterStudioPage, \"layout\", 'auth');\n\n_defineProperty(RegisterStudioPage, \"authenticate\", false);\n\nconst mapStateToProps = state => ({\n  ui: state.ui,\n  loggedIn: state.auth.loggedIn\n});\n\nexport default connect(mapStateToProps)(RegisterStudioPage);","map":null,"metadata":{},"sourceType":"module"}