{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/dtest.live/src/components/streaming/webrtc/privatechat/publisher.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable camelcase */\nimport { streamService } from 'src/services';\nimport Router from 'next/router';\nimport React, { PureComponent } from 'react';\nimport withAntmedia from 'src/antmedia';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport { SocketContext } from 'src/socket';\nimport videojs from 'video.js';\nimport './index.less';\nimport { isMobile } from 'react-device-detect';\n\nvar Publisher = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Publisher, _PureComponent);\n\n  var _super = _createSuper(Publisher);\n\n  function Publisher(props) {\n    var _this;\n\n    _classCallCheck(this, Publisher);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"socket\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"publisher\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onbeforeunload\", function () {\n      var _this$props = _this.props,\n          publish_started = _this$props.publish_started,\n          webRTCAdaptor = _this$props.webRTCAdaptor;\n      var _this$state = _this.state,\n          conversationId = _this$state.conversationId,\n          streamId = _this$state.streamId;\n\n      if (streamId && publish_started) {\n        webRTCAdaptor && webRTCAdaptor.leaveFromRoom(conversationId);\n\n        _this.socket.emit('private-stream/leave', {\n          conversationId: conversationId,\n          streamId: streamId\n        });\n      }\n\n      if (_this.publisher) {\n        _this.publisher.dispose();\n\n        _this.publisher = undefined;\n      }\n\n      _this.setState({\n        conversationId: null,\n        streamId: null\n      });\n    });\n\n    _this.state = {\n      conversationId: null,\n      streamId: null\n    };\n    return _this;\n  }\n\n  _createClass(Publisher, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.socket = this.context;\n      Router.events.on('routeChangeStart', this.onbeforeunload);\n      window.addEventListener('beforeunload', this.onbeforeunload);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('beforeunload', this.onbeforeunload);\n      Router.events.off('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"handelWebRTCAdaptorCallback\",\n    value: function () {\n      var _handelWebRTCAdaptorCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(info, obj) {\n        var _this2 = this;\n\n        var _this$props2, webRTCAdaptor, settings, configs, _this$state2, conversationId, streamId, token, player;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props2 = this.props, webRTCAdaptor = _this$props2.webRTCAdaptor, settings = _this$props2.settings, configs = _this$props2.configs;\n                _this$state2 = this.state, conversationId = _this$state2.conversationId, streamId = _this$state2.streamId;\n\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.INITIALIZED)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                webRTCAdaptor.joinRoom(conversationId, streamId);\n                _context.next = 14;\n                break;\n\n              case 6:\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.JOINED_THE_ROOM)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 9;\n                return streamService.getPublishToken({\n                  streamId: streamId,\n                  settings: settings\n                });\n\n              case 9:\n                token = _context.sent;\n                webRTCAdaptor.publish(streamId, token);\n                _context.next = 14;\n                break;\n\n              case 13:\n                if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_STARTED) {\n                  if (!isMobile) {\n                    player = videojs(configs.localVideoId, {\n                      liveui: true,\n                      controls: true,\n                      muted: true,\n                      controlBar: {\n                        playToggle: false,\n                        currentTimeDisplay: false,\n                        fullscreenToggle: false,\n                        pictureInPictureToggle: false,\n                        volumePanel: false\n                      }\n                    });\n                    player.on('error', function () {\n                      player.error(null);\n                    });\n                    player.one('play', function () {\n                      _this2.publisher = player;\n                    });\n                  }\n\n                  this.socket.emit('private-stream/join', {\n                    conversationId: conversationId,\n                    streamId: obj.streamId\n                  });\n                } else if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_FINISHED) {\n                  this.socket.emit('private-stream/leave', {\n                    conversationId: conversationId,\n                    streamId: obj.streamId\n                  });\n                }\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handelWebRTCAdaptorCallback(_x, _x2) {\n        return _handelWebRTCAdaptorCallback.apply(this, arguments);\n      }\n\n      return handelWebRTCAdaptorCallback;\n    }()\n  }, {\n    key: \"start\",\n    value: function start(conversationId) {\n      this.setState({\n        conversationId: conversationId\n      });\n    }\n  }, {\n    key: \"publish\",\n    value: function publish(streamId) {\n      var initWebRTCAdaptor = this.props.initWebRTCAdaptor;\n      this.setState({\n        streamId: streamId\n      });\n      initWebRTCAdaptor(this.handelWebRTCAdaptorCallback.bind(this));\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var leaveSession = this.props.leaveSession;\n      leaveSession && leaveSession();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          publish_started = _this$props3.publish_started,\n          configs = _this$props3.configs;\n      return __jsx(\"video\", {\n        id: configs.localVideoId,\n        className: \"video-js broadcaster\",\n        hidden: !publish_started,\n        autoPlay: true,\n        playsInline: true,\n        muted: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return Publisher;\n}(PureComponent);\n\nPublisher.contextType = SocketContext;\nexport default withAntmedia(Publisher);","map":null,"metadata":{},"sourceType":"module"}