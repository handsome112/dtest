{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/studio/login.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport StudioFormLogin from '@components/studio/studio-login-form';\nimport Head from 'next/head';\nimport '../auth/index.less';\nimport { studioLogin, resetLoginData } from 'src/redux/auth/actions';\nimport { FormRegisterPlaceHolder } from '@components/common/layout';\nimport { connect } from 'react-redux';\nimport { message } from 'antd';\nimport { getResponseError } from 'src/lib';\n\nclass StudioLoginPage extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"rememberMe\", false);\n\n    this.state = {};\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      success,\n      error\n    } = this.props;\n\n    if (success && success !== prevProps.success) {\n      message.success('Logged successfully');\n    }\n\n    if (error && prevProps.error !== error) {\n      message.error(getResponseError(error));\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      resetLoginData: resetLogin\n    } = this.props;\n    resetLogin();\n  }\n\n  submit(data) {\n    const {\n      studioLogin: handleLogin\n    } = this.props;\n    handleLogin(_objectSpread(_objectSpread({}, data), {}, {\n      remember: this.rememberMe\n    }));\n  }\n\n  render() {\n    const {\n      requesting,\n      error,\n      success,\n      ui\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, \"Studio Sign in\")), __jsx(\"div\", {\n      className: \"register-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"form-register-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, __jsx(StudioFormLogin, {\n      requesting: requesting,\n      submit: this.submit.bind(this),\n      onRemember: value => {\n        this.rememberMe = value;\n      },\n      error: error,\n      success: success,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    })), __jsx(FormRegisterPlaceHolder, {\n      ui: ui,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\n_defineProperty(StudioLoginPage, \"layout\", 'auth');\n\n_defineProperty(StudioLoginPage, \"authenticate\", false);\n\nconst mapStates = state => _objectSpread(_objectSpread({}, state.auth.userLogin), {}, {\n  ui: state.ui\n});\n\nconst mapDispatch = {\n  studioLogin,\n  resetLoginData\n};\nexport default connect(mapStates, mapDispatch)(StudioLoginPage);","map":null,"metadata":{},"sourceType":"module"}