{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/account/performer/earning/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { DatePicker, Space, Statistic, Row, Col } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport { connect } from 'react-redux';\nimport { getEarning } from '@redux/performer/actions';\nimport EarningHistoryTable from '@components/performer/earning-history-table';\nimport { getSearchData, defaultColor } from 'src/lib';\nimport NumberFormat from '@components/common/layout/numberformat';\nimport './index.less';\n\nclass PerformerProductsPage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      limit: 10,\n      offset: 0,\n      sortBy: 'createdAt',\n      sort: 'desc'\n    };\n  }\n\n  componentDidMount() {\n    const {\n      getEarning: dispatchGetEarning\n    } = this.props;\n    dispatchGetEarning(this.state);\n  }\n\n  componentDidUpdate(_, prevStates) {\n    const {\n      getEarning: dispatchGetEarning\n    } = this.props;\n\n    if (prevStates !== this.state) {\n      dispatchGetEarning(this.state);\n    }\n  }\n\n  onChange(pagination, filters, sorter) {\n    const oldState = _objectSpread({}, this.state);\n\n    this.setState(getSearchData(pagination, filters, sorter, oldState));\n  }\n\n  setDateRanger(_, dateStrings) {\n    if (!dateStrings[0] && !dateStrings[1]) {\n      this.setState({\n        toDate: null,\n        fromDate: null,\n        sortBy: 'createdAt',\n        sort: 'desc'\n      });\n      return;\n    }\n\n    if (!dateStrings[0] || !dateStrings[1]) return;\n    this.setState({\n      fromDate: dateStrings[0],\n      toDate: dateStrings[1]\n    });\n  }\n\n  render() {\n    const {\n      data,\n      searching,\n      total,\n      performer,\n      stats,\n      success\n    } = this.props;\n    const {\n      limit\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, \"Earnings\")), __jsx(\"div\", {\n      className: \"earning-history-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, __jsx(PageHeader, {\n      title: \"My Earning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }), __jsx(Row, {\n      className: \"ant-page-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      md: 12,\n      xs: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, __jsx(Space, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, \"My Balance:\"), __jsx(\"span\", {\n      style: {\n        color: defaultColor.primaryColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, __jsx(NumberFormat, {\n      value: performer.balance || 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 19\n      }\n    }))), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 15\n      }\n    }, __jsx(DatePicker.RangePicker, {\n      disabledDate: () => searching,\n      onCalendarChange: this.setDateRanger.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }))), __jsx(Col, {\n      md: 12,\n      xs: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, success && stats && __jsx(Space, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, __jsx(Statistic, {\n      title: \"Paid Tokens\",\n      value: stats.data.paidPrice,\n      precision: 2,\n      decimalSeparator: \",\",\n      groupSeparator: \".\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 19\n      }\n    }), __jsx(Statistic, {\n      title: \"Remaining Tokens\",\n      value: stats.data.remainingPrice,\n      precision: 2,\n      decimalSeparator: \",\",\n      groupSeparator: \".\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 19\n      }\n    }), __jsx(Statistic, {\n      title: \"Total Tokens\",\n      value: stats.data.totalPrice,\n      precision: 2,\n      decimalSeparator: \",\",\n      groupSeparator: \".\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 19\n      }\n    })))), __jsx(EarningHistoryTable, {\n      earnings: data,\n      searching: searching,\n      total: total,\n      pageSize: limit,\n      onChange: this.onChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\n_defineProperty(PerformerProductsPage, \"authenticate\", true);\n\n_defineProperty(PerformerProductsPage, \"layout\", 'primary');\n\nconst mapStateToProps = state => _objectSpread(_objectSpread({}, state.performer.earning), {}, {\n  // earning: state.performer.earning.data,\n  performer: state.performer.current\n});\n\nconst mapDispatch = {\n  getEarning\n};\nexport default connect(mapStateToProps, mapDispatch)(PerformerProductsPage);","map":null,"metadata":{},"sourceType":"module"}