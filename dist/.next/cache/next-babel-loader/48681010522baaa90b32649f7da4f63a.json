{"ast":null,"code":"import { TOKEN } from 'src/services/api-request';\nimport { omit } from 'lodash';\nimport { isUrl } from '@lib/string';\nimport cookie from 'js-cookie';\nimport { APIRequest } from './api-request';\nexport class VideoService extends APIRequest {\n  search(params) {\n    return this.get(this.buildUrl('/user/performer-assets/videos/search', params));\n  }\n\n  purchased(params) {\n    return this.get(this.buildUrl('/purchased-items/user/videos', params));\n  }\n\n  details(id, headers) {\n    return this.get(`/performer/performer-assets/videos/${id}/view`, headers);\n  }\n\n  myVideos(query) {\n    return this.get(this.buildUrl('/performer/performer-assets/videos/search', query));\n  }\n\n  removeMyVideo(id) {\n    return this.del(`/performer/performer-assets/videos/${id}`);\n  }\n\n  create(url, data, options = {\n    onProgress() {}\n\n  }) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData(); // formData.append('file', file, file.name);\n\n      if (data.video) {\n        const video = data.video.file.originFileObj;\n        formData.append('video', video, video.name);\n      }\n\n      if (data.trailer) {\n        const trailer = data.trailer.file.originFileObj;\n        formData.append('trailer', trailer, trailer.name);\n      }\n\n      if (data.thumbnail) {\n        const thumbnail = data.thumbnail.file.originFileObj;\n        formData.append('thumbnail', thumbnail, thumbnail.name);\n      }\n\n      Object.keys(omit(data, ['video', 'thumbnail', 'trailer'])).forEach(v => {\n        formData.append(v, data[v]);\n      });\n      req.responseType = 'json';\n      req.open('POST', isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n      const token = cookie.get(TOKEN);\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n  update(url, data, options = {\n    onProgress() {}\n\n  }) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData(); // formData.append('file', file, file.name);\n\n      if (data.video && data.video.file) {\n        const video = data.video.file.originFileObj;\n        formData.append('video', video, video.name);\n      }\n\n      if (data.trailer && data.trailer.file) {\n        const trailer = data.trailer.file.originFileObj;\n        formData.append('trailer', trailer, trailer.name);\n      }\n\n      if (data.thumbnail && data.thumbnail.file) {\n        const thumbnail = data.thumbnail.file.originFileObj;\n        formData.append('thumbnail', thumbnail, thumbnail.name);\n      }\n\n      Object.keys(omit(data, ['video', 'thumbnail', 'trailer'])).forEach(v => {\n        formData.append(v, data[v]);\n      });\n      req.responseType = 'json';\n      req.open('PUT', isUrl(url) ? url : `${process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n      const token = cookie.get(TOKEN);\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n  increaseView(id) {\n    return this.post(`/user/performer-assets/videos/${id}/inc-view`);\n  } // update(videoId, performerId, data) {\n  //   return this.put(`/performer/performer-assets/videos/${videoId}`, {\n  //     ...data,\n  //     performerId\n  //   });\n  // }\n\n\n  userFindVideoById(id, headers = {}) {\n    return this.get(`/user/performer-assets/videos/${id}`, headers);\n  }\n\n}\nexport const videoService = new VideoService();","map":null,"metadata":{},"sourceType":"module"}