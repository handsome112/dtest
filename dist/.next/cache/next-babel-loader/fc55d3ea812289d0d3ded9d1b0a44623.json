{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/dtest.live/pages/live/webrtc/groupchat.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable no-console */\nimport React, { PureComponent } from 'react';\nimport Header from 'next/head';\nimport { Row, Col, message, Button } from 'antd';\nimport Router from 'next/router';\nimport { streamService } from 'src/services';\nimport { connect } from 'react-redux';\nimport { SocketContext, Event } from 'src/socket';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport { getStreamConversationSuccess, resetStreamMessage } from '@redux/stream-chat/actions';\nimport GroupPublisher from 'src/components/streaming/webrtc/groupchat/publisher';\nimport GroupSubscriber from 'src/components/streaming/webrtc/groupchat/subscriber';\nimport { getResponseError } from '@lib/utils';\nimport { Description } from '@components/streaming'; // eslint-disable-next-line no-shadow\n\nvar STREAM_EVENT;\n\n(function (STREAM_EVENT) {\n  STREAM_EVENT[\"JOINED_THE_ROOM\"] = \"JOINED_THE_ROOM\";\n  STREAM_EVENT[\"JOIN_ROOM\"] = \"JOIN_ROOM\";\n  STREAM_EVENT[\"LEAVE_ROOM\"] = \"LEAVE_ROOM\";\n  STREAM_EVENT[\"RECEIVED_PAID_TOKEN\"] = \"RECEIVED_PAID_TOKEN\";\n  STREAM_EVENT[\"STREAM_INFORMATION_CHANGED\"] = \"private-stream/streamInformationChanged\";\n})(STREAM_EVENT || (STREAM_EVENT = {}));\n\nvar STREAM_JOINED = 'private-stream/streamJoined';\nvar STREAM_LEAVED = 'private-stream/streamLeaved';\nvar JOINED_THE_ROOM = 'JOINED_THE_ROOM';\n\nvar ModelPrivateChat = /*#__PURE__*/function (_PureComponent) {\n  _inherits(ModelPrivateChat, _PureComponent);\n\n  var _super = _createSuper(ModelPrivateChat);\n\n  function ModelPrivateChat(props) {\n    var _this;\n\n    _classCallCheck(this, ModelPrivateChat);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"localVideoId\", 'group-publisher');\n\n    _defineProperty(_assertThisInitialized(_this), \"remoteVideoContainerClassname\", 'group-video-container');\n\n    _defineProperty(_assertThisInitialized(_this), \"mainVideoRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"publisherRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"subscriberRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"socket\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"streamId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"streamList\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onbeforeunload\", function () {\n      _this.leaveSession();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"receivedPaidTokenHandler\", function (_ref) {\n      var _activeConversation$d;\n\n      var token = _ref.token,\n          conversationId = _ref.conversationId;\n      var activeConversation = _this.props.activeConversation;\n      var receivedToken = _this.state.receivedToken;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n        _this.setState({\n          receivedToken: receivedToken + token\n        });\n      }\n    });\n\n    _this.state = {\n      // sessionId: '',\n      processing: false,\n      roomJoined: false,\n      total: 0,\n      receivedToken: 0,\n      members: []\n    };\n    return _this;\n  }\n\n  _createClass(ModelPrivateChat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('beforeunload', this.onbeforeunload);\n      Router.events.on('routeChangeStart', this.onbeforeunload);\n      this.socket = this.context;\n      this.publisherRef = /*#__PURE__*/React.createRef();\n      this.subscriberRef = /*#__PURE__*/React.createRef();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _activeConversation$d2;\n\n      var activeConversation = this.props.activeConversation;\n\n      if (activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d2 = activeConversation.data) !== null && _activeConversation$d2 !== void 0 && _activeConversation$d2._id && activeConversation !== prevProps.activeConversation) {\n        this.initSocketEvent();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('beforeunload', this.onbeforeunload);\n      Router.events.off('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"handler\",\n    value: function handler(_ref2) {\n      var _activeConversation$d3;\n\n      var total = _ref2.total,\n          members = _ref2.members,\n          conversationId = _ref2.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d3 = activeConversation.data) === null || _activeConversation$d3 === void 0 ? void 0 : _activeConversation$d3._id) === conversationId) {\n        this.setState({\n          total: total,\n          members: members\n        });\n      }\n    }\n  }, {\n    key: \"handleRemoteVideo\",\n    value: function handleRemoteVideo(event) {\n      var srcObject = event.target.srcObject;\n      this.mainVideoRef.current.srcObject = srcObject;\n      this.mainVideoRef.current.hidden = false;\n      this.mainVideoRef.current.play();\n    }\n  }, {\n    key: \"initSocketEvent\",\n    value: function initSocketEvent() {\n      var _this2 = this;\n\n      this.socket = this.context;\n      this.socket.on(JOINED_THE_ROOM, function (_ref3) {\n        var streamId = _ref3.streamId,\n            streamList = _ref3.streamList,\n            conversationId = _ref3.conversationId;\n        var activeConversation = _this2.props.activeConversation;\n        if (conversationId !== activeConversation.data._id) return;\n        _this2.streamId = streamId;\n        _this2.streamList = streamList;\n        _this2.publisherRef.current && _this2.publisherRef.current.publish(streamId);\n\n        if (streamList.length) {\n          _this2.subscriberRef.current && _this2.subscriberRef.current.play(streamList);\n        }\n      });\n      this.socket.on(STREAM_JOINED, function (data) {\n        if (_this2.streamId !== data.streamId) {\n          _this2.subscriberRef.current && _this2.subscriberRef.current.play([data.streamId]);\n        }\n      });\n      this.socket.on(STREAM_LEAVED, function (data) {\n        _this2.streamList = _this2.streamList.filter(function (id) {\n          return id !== data.streamId;\n        });\n\n        if (_this2.streamId !== data.streamId) {\n          _this2.subscriberRef.current && _this2.subscriberRef.current.close(data.streamId);\n        }\n      });\n    }\n  }, {\n    key: \"leaveSession\",\n    value: function leaveSession() {\n      var _activeConversation$d4;\n\n      var _this$props = this.props,\n          activeConversation = _this$props.activeConversation,\n          dispatchResetStreamMessage = _this$props.resetStreamMessage;\n      dispatchResetStreamMessage();\n\n      if (this.socket && activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d4 = activeConversation.data) !== null && _activeConversation$d4 !== void 0 && _activeConversation$d4._id) {\n        this.socket.off(JOINED_THE_ROOM);\n        this.socket.off(STREAM_JOINED);\n        this.socket.off(STREAM_LEAVED);\n        this.socket.off(STREAM_EVENT.RECEIVED_PAID_TOKEN);\n        this.socket.emit(STREAM_EVENT.LEAVE_ROOM, {\n          conversationId: activeConversation.data._id\n        });\n      }\n\n      this.setState({\n        processing: false,\n        roomJoined: false,\n        total: 0,\n        receivedToken: 0,\n        members: []\n      });\n    }\n  }, {\n    key: \"startConversation\",\n    value: function () {\n      var _startConversation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var dispatchGetStreamConversationSuccess, resp, _resp$data, sessionId, conversation, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatchGetStreamConversationSuccess = this.props.getStreamConversationSuccess;\n                _context.prev = 1;\n                this.setState({\n                  processing: true\n                });\n                _context.next = 5;\n                return streamService.startGroupChat();\n\n              case 5:\n                resp = _context.sent;\n\n                if (resp && resp.data) {\n                  _resp$data = resp.data, sessionId = _resp$data.sessionId, conversation = _resp$data.conversation;\n                  this.socket = this.context;\n                  this.publisherRef.current && this.publisherRef.current.start(conversation._id, sessionId);\n                  dispatchGetStreamConversationSuccess({\n                    data: conversation\n                  });\n                  this.socket && this.socket.emit(STREAM_EVENT.JOIN_ROOM, {\n                    conversationId: resp.data.conversation._id\n                  });\n                }\n\n                _context.next = 15;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](1);\n                _context.next = 13;\n                return Promise.resolve(_context.t0);\n\n              case 13:\n                error = _context.sent;\n                message.error(getResponseError(error));\n\n              case 15:\n                _context.prev = 15;\n                this.setState({\n                  processing: false\n                });\n                return _context.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 9, 15, 18]]);\n      }));\n\n      function startConversation() {\n        return _startConversation.apply(this, arguments);\n      }\n\n      return startConversation;\n    }()\n  }, {\n    key: \"roomJoinedHandler\",\n    value: function roomJoinedHandler(_ref4) {\n      var _activeConversation$d5;\n\n      var total = _ref4.total,\n          members = _ref4.members,\n          conversationId = _ref4.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d5 = activeConversation.data) === null || _activeConversation$d5 === void 0 ? void 0 : _activeConversation$d5._id) === conversationId) {\n        this.setState({\n          roomJoined: true,\n          total: total,\n          members: members\n        });\n      }\n    }\n  }, {\n    key: \"leave\",\n    value: function leave() {\n      this.publisherRef.current && this.publisherRef.current.stop();\n      this.subscriberRef.current && this.subscriberRef.current.stop();\n      setTimeout(function () {\n        window.location.href = '/';\n      }, 10 * 1000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // const { user } = this.props;\n      var _this$state = this.state,\n          processing = _this$state.processing,\n          total = _this$state.total,\n          members = _this$state.members,\n          roomJoined = _this$state.roomJoined,\n          receivedToken = _this$state.receivedToken;\n      return __jsx(React.Fragment, null, __jsx(Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 9\n        }\n      }, __jsx(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }\n      }, \"Group Chat\")), __jsx(Event, {\n        event: STREAM_EVENT.STREAM_INFORMATION_CHANGED,\n        handler: this.handler.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 9\n        }\n      }), __jsx(Event, {\n        event: STREAM_EVENT.JOINED_THE_ROOM,\n        handler: this.roomJoinedHandler.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 9\n        }\n      }), __jsx(Event, {\n        event: STREAM_EVENT.RECEIVED_PAID_TOKEN,\n        handler: this.receivedPaidTokenHandler.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 9\n        }\n      }), __jsx(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 9\n        }\n      }, __jsx(Col, {\n        md: 12,\n        xs: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }\n      }, !roomJoined ? __jsx(Button, {\n        type: \"primary\",\n        onClick: this.startConversation.bind(this),\n        loading: processing,\n        block: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 17\n        }\n      }, \"Start Conversation\") : __jsx(Button, {\n        type: \"primary\",\n        onClick: this.leave.bind(this),\n        block: true,\n        disabled: processing,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 17\n        }\n      }, \"Stop Streaming\"), __jsx(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }\n      }, __jsx(\"video\", {\n        id: \"subscriber\",\n        ref: this.mainVideoRef,\n        hidden: true,\n        controls: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 15\n        }\n      })), __jsx(Row, {\n        className: this.remoteVideoContainerClassname,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }\n      }, __jsx(GroupPublisher, _extends({}, this.props, {\n        containerClassName: this.remoteVideoContainerClassname,\n        ref: this.publisherRef,\n        configs: {\n          localVideoId: this.localVideoId\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 15\n        }\n      })), __jsx(GroupSubscriber, _extends({}, this.props, {\n        ref: this.subscriberRef,\n        containerClassName: this.remoteVideoContainerClassname,\n        configs: {\n          isPlayMode: true\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 15\n        }\n      }))), __jsx(Description, {\n        roomJoined: roomJoined,\n        receivedToken: receivedToken,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }\n      })), __jsx(Col, {\n        xs: 24,\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }\n      }, __jsx(ChatBox, _extends({}, this.props, {\n        totalParticipant: total,\n        members: members,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 13\n        }\n      })))));\n    }\n  }]);\n\n  return ModelPrivateChat;\n}(PureComponent);\n\n_defineProperty(ModelPrivateChat, \"authenticate\", true);\n\n_defineProperty(ModelPrivateChat, \"onlyPerformer\", true);\n\nModelPrivateChat.contextType = SocketContext;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread({\n    user: state.user.current,\n    loggedIn: state.auth.loggedIn,\n    activeConversation: state.streamMessage.activeConversation\n  }, state.streaming);\n};\n\nvar mapDispatchs = {\n  getStreamConversationSuccess: getStreamConversationSuccess,\n  resetStreamMessage: resetStreamMessage\n};\nexport default connect(mapStateToProps, mapDispatchs)(ModelPrivateChat);","map":null,"metadata":{},"sourceType":"module"}