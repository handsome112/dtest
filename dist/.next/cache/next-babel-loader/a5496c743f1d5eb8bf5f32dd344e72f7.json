{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { Card, Space, Row, Col, Pagination } from 'antd';\nimport { MaleSignIcon, FemaleSignIcon, TransgenderIcon } from '@components/common/base/icons';\nimport { createSelector, generateUuid } from 'src/lib';\nimport { HeartFilled, HeartOutlined, EyeOutlined, LockOutlined } from '@ant-design/icons';\nimport './index.less';\nimport { chunk } from 'lodash';\nimport Banner from '@components/common/layout/banner';\nimport Loader from '@components/common/base/loader';\nimport { connect } from 'react-redux';\n\nconst renderTitle = (gender, name) => __jsx(\"div\", {\n  className: \"p-title\"\n}, __jsx(\"span\", {\n  style: {\n    marginRight: 5\n  }\n}, name), gender === 'male' ? __jsx(\"span\", {\n  className: \"anticon\"\n}, __jsx(MaleSignIcon, null)) : gender === 'female' ? __jsx(\"span\", {\n  className: \"anticon\"\n}, __jsx(FemaleSignIcon, null)) : __jsx(\"span\", {\n  className: \"anticon\"\n}, __jsx(TransgenderIcon, null)));\n\nconst renderTags = tags => __jsx(Space, {\n  className: \"tags\",\n  wrap: true,\n  size: [5, 2]\n}, tags.map(tag => __jsx(Link, {\n  href: {\n    pathname: '/tag',\n    query: {\n      tags: tag\n    }\n  },\n  key: tag,\n  as: `/tag/${tag}`\n}, __jsx(\"a\", null, \"#\", tag))));\n\nexport const GridCard = ({\n  performer,\n  loggedIn,\n  onLike,\n  className,\n  placeholderAvatarUrl\n}) => {\n  var _performer$stats;\n\n  const {\n    isOnline,\n    streamingStatus\n  } = performer;\n  const statusClassNames = ['p-status'];\n  let status = 'offline';\n\n  if (isOnline) {\n    switch (streamingStatus) {\n      case 'private':\n        statusClassNames.push('private');\n        status = 'private chat';\n        break;\n\n      case 'group':\n        statusClassNames.push('group');\n        status = 'group chat';\n        break;\n\n      case 'public':\n        status = 'live';\n        statusClassNames.push('online');\n        break;\n\n      default:\n        status = 'online';\n        statusClassNames.push('online');\n        break;\n    }\n  } else {\n    statusClassNames.push('offline');\n  }\n\n  const defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n  return __jsx(Card.Grid, {\n    className: className,\n    key: performer._id,\n    hoverable: false\n  }, performer.isBlocked && __jsx(\"div\", {\n    className: \"blocked-thumb\"\n  }, __jsx(LockOutlined, null)), __jsx(Link, {\n    href: {\n      pathname: '/stream',\n      query: {\n        performer: JSON.stringify(performer)\n      }\n    },\n    as: `/profile/${performer.username}`\n  }, __jsx(\"a\", null, __jsx(\"div\", {\n    className: \"performer-avatar\"\n  }, __jsx(\"img\", {\n    className: \"image-performer\",\n    src: typeof performer.avatar === 'string' && performer.avatar.length > 0 ? performer.avatar : defaultPlaceholderAvatarUrl,\n    alt: \"\"\n  }), __jsx(\"span\", {\n    className: statusClassNames.join(' ')\n  }, status), renderTitle(performer.gender, performer.username), (performer === null || performer === void 0 ? void 0 : (_performer$stats = performer.stats) === null || _performer$stats === void 0 ? void 0 : _performer$stats.views) > 0 && __jsx(\"div\", {\n    className: \"p-viewer\"\n  }, __jsx(EyeOutlined, {\n    style: {\n      marginRight: 5\n    }\n  }), __jsx(\"span\", null, performer.stats.views))))), __jsx(\"div\", {\n    className: \"performer-bottom\"\n  }, __jsx(Row, {\n    justify: \"space-between\"\n  }, __jsx(Col, null, __jsx(\"div\", null, performer.tags && renderTags(performer.tags))), __jsx(Col, null, __jsx(\"div\", {\n    \"aria-hidden\": true,\n    hidden: !loggedIn,\n    className: \"p-favorite\",\n    onClick: () => onLike(performer)\n  }, performer.isFavorite ? __jsx(HeartFilled, {\n    className: \"icon\"\n  }) : __jsx(HeartOutlined, {\n    className: \"icon\"\n  })))), __jsx(\"div\", {\n    className: \"about-me\"\n  }, performer === null || performer === void 0 ? void 0 : performer.aboutMe)));\n};\n\nconst PerformerGrid = ({\n  data,\n  searching,\n  success,\n  title,\n  onLike,\n  loggedIn,\n  isPage,\n  offset,\n  limit,\n  total,\n  setFilter,\n  placeholderAvatarUrl,\n  banners,\n  render\n}) => {\n  const {\n    topBanners,\n    rightBanners,\n    bottomBanners\n  } = banners;\n\n  const RowGrid = ({\n    dataSource\n  }) => __jsx(Row, {\n    style: {\n      width: '100%'\n    }\n  }, dataSource && dataSource.length > 0 && dataSource.map(performer => __jsx(GridCard, {\n    placeholderAvatarUrl: placeholderAvatarUrl,\n    className: \"performer-box\",\n    key: performer._id,\n    performer: performer,\n    loggedIn: loggedIn,\n    onLike: onLike\n  })));\n\n  const renderGrid = () => {\n    const {\n      length\n    } = data;\n\n    if (length <= 12) {\n      return __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, rightBanners && rightBanners.length > 0 ? __jsx(React.Fragment, null, __jsx(Col, {\n        lg: 16,\n        md: 16,\n        xs: 24\n      }, __jsx(Row, null, data && data.length > 0 && data.map(performer => __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: () => onLike(performer)\n      })))), __jsx(Col, {\n        lg: 8,\n        md: 8,\n        xs: 24\n      }, __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))) : data && data.length > 0 && data.map(performer => __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: () => onLike(performer)\n      })));\n    }\n\n    if (length > 12 && length <= 24) {\n      const dataChunk = chunk(data, 12);\n      return __jsx(React.Fragment, null, rightBanners && rightBanners.length > 0 ? __jsx(React.Fragment, null, __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Col, {\n        lg: 16,\n        md: 16,\n        xs: 24\n      }, __jsx(Row, null, dataChunk[0] && dataChunk[0].length > 0 && dataChunk[0].map(performer => __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: () => onLike(performer)\n      })))), __jsx(Col, {\n        lg: 8,\n        md: 8,\n        xs: 24\n      }, rightBanners && rightBanners.length > 0 && __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))), __jsx(RowGrid, {\n        dataSource: dataChunk[1]\n      })) : __jsx(RowGrid, {\n        dataSource: data\n      }));\n    }\n\n    if (length > 24 && length <= 36) {\n      const dataChunk = chunk(data, 12);\n      return __jsx(React.Fragment, null, __jsx(RowGrid, {\n        dataSource: dataChunk[0]\n      }), rightBanners && rightBanners.length > 0 ? __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Col, {\n        xl: 16,\n        lg: 18,\n        md: 18,\n        xs: 24\n      }, __jsx(Row, null, dataChunk[1] && dataChunk[1].length > 0 && dataChunk[1].map(performer => __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: () => onLike(performer)\n      })))), __jsx(Col, {\n        xl: 8,\n        lg: 6,\n        md: 6,\n        xs: 24\n      }, __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))) : __jsx(RowGrid, {\n        dataSource: dataChunk[1]\n      }), __jsx(RowGrid, {\n        dataSource: dataChunk[2]\n      }));\n    }\n\n    if (length > 36) {\n      const dataChunk = chunk(data, 12);\n      const lastDataChunk = dataChunk.slice(3);\n      return __jsx(React.Fragment, null, __jsx(RowGrid, {\n        dataSource: dataChunk[0]\n      }), rightBanners && rightBanners.length > 0 ? __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Col, {\n        xl: 16,\n        lg: 18,\n        md: 18,\n        xs: 24\n      }, __jsx(Row, null, dataChunk[1] && dataChunk[1].length > 0 && dataChunk[1].map(performer => __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: () => onLike(performer)\n      })))), __jsx(Col, {\n        xl: 8,\n        lg: 6,\n        md: 6,\n        xs: 24\n      }, __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))) : __jsx(RowGrid, {\n        dataSource: dataChunk[1]\n      }), __jsx(RowGrid, {\n        dataSource: dataChunk[2]\n      }), lastDataChunk.length > 0 && lastDataChunk.map(v => __jsx(RowGrid, {\n        key: generateUuid(),\n        dataSource: v\n      })));\n    }\n\n    return __jsx(React.Fragment, null);\n  };\n\n  const actions = setFilter && total > 0 ? [total > limit && __jsx(Pagination, {\n    disabled: searching,\n    current: Math.round(offset / limit) + 1,\n    pageSize: limit,\n    total: total,\n    size: \"small\",\n    onChange: page => setFilter('offset', (page - 1) * limit),\n    showSizeChanger: false\n  })] : [];\n\n  if (render) {\n    /**\n     * placeholderAvatarUrl props\n     */\n    return __jsx(Card, {\n      className: \"performer-grid\",\n      title: title,\n      bordered: false,\n      hoverable: false,\n      bodyStyle: {\n        padding: '0'\n      },\n      actions: actions\n    }, __jsx(Loader, {\n      spinning: searching\n    }), data.length > 0 && data.map(performer => render(performer)));\n  }\n\n  return __jsx(React.Fragment, null, isPage && (topBanners === null || topBanners === void 0 ? void 0 : topBanners.length) > 0 && __jsx(Banner, {\n    banners: topBanners,\n    styleImage: {\n      padding: '10px',\n      width: '100%'\n    }\n  }), __jsx(Card, {\n    className: \"performer-grid\",\n    title: title,\n    bordered: false,\n    hoverable: false,\n    bodyStyle: {\n      padding: '0'\n    },\n    actions: actions\n  }, __jsx(Loader, {\n    spinning: searching\n  }), success // eslint-disable-next-line no-nested-ternary\n  && (total > 0 ? isPage ? renderGrid() : data.map(performer => __jsx(GridCard, {\n    key: performer === null || performer === void 0 ? void 0 : performer._id,\n    placeholderAvatarUrl: placeholderAvatarUrl,\n    className: \"performer-box\",\n    performer: performer,\n    loggedIn: loggedIn,\n    onLike: p => onLike(p)\n  })) : __jsx(\"div\", {\n    className: \"ant-card-head\"\n  }, \"No model found.\"))), isPage && (bottomBanners === null || bottomBanners === void 0 ? void 0 : bottomBanners.length) > 0 && __jsx(Banner, {\n    banners: bottomBanners,\n    styleImage: {\n      padding: '10px',\n      width: '100%'\n    }\n  }));\n};\n\nPerformerGrid.defaultProps = {\n  loggedIn: false,\n  setFilter: null,\n  limit: 0,\n  offset: 0,\n  total: 0,\n  success: false,\n  searching: false,\n  title: '',\n  onLike: null,\n  render: null,\n  isPage: false,\n  banners: {},\n  placeholderAvatarUrl: '/no-avatar.png'\n};\n\nconst bannerSelecter = state => state.banner.listBanners.data;\n\nconst filterBanner = createSelector(bannerSelecter, banners => {\n  if (!banners.length) return {};\n  return {\n    topBanners: banners.filter(b => b.position === 'top'),\n    rightBanners: banners.filter(b => b.position === 'right'),\n    bottomBanners: banners.filter(b => b.position === 'bottom')\n  };\n});\n\nconst mapStates = state => ({\n  placeholderAvatarUrl: state.ui.placeholderAvatarUrl,\n  banners: filterBanner(state)\n});\n\nexport default connect(mapStates)(PerformerGrid);","map":null,"metadata":{},"sourceType":"module"}