{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-nested-ternary */\nimport React, { PureComponent, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport Link from 'next/link';\nimport './MessageList.less';\nimport { loadMoreStreamMessages, receiveStreamMessageSuccess, resetStreamMessage, deleteMessage, deleteMessageSuccess } from '@redux/stream-chat/actions';\nimport { SocketContext } from 'src/socket';\nimport Router from 'next/router';\nimport Compose from './Compose';\nimport Message from './Message';\n\nclass MessageList extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"messagesRef\", void 0);\n\n    _defineProperty(this, \"state\", {\n      page: 1,\n      onloadmore: false\n    });\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      const {\n        conversation,\n        resetStreamMessage: dispatchResetStreamMessage\n      } = this.props;\n\n      if (conversation && conversation._id) {\n        dispatchResetStreamMessage();\n      }\n    });\n\n    _defineProperty(this, \"onMessage\", (message, type) => {\n      const {\n        receiveStreamMessageSuccess: dispatchReceiveStreamMessageSuccess,\n        deleteMessageSuccess: dispatchDeleteMessageSuccess\n      } = this.props;\n\n      if (!message) {\n        return;\n      }\n\n      type === 'created' && dispatchReceiveStreamMessageSuccess(message);\n      type === 'deleted' && dispatchDeleteMessageSuccess(message);\n    });\n\n    _defineProperty(this, \"onDelete\", messageId => {\n      const {\n        deleteMessage: dispatchDeleteMessage\n      } = this.props;\n      if (!messageId) return;\n      dispatchDeleteMessage({\n        messageId\n      });\n    });\n\n    _defineProperty(this, \"renderMessages\", () => {\n      const {\n        message,\n        currentUser,\n        currentPerformer,\n        conversation,\n        loggedIn\n      } = this.props;\n      const messages = message.items;\n      const {\n        fetching\n      } = message;\n      let i = 0;\n      const messageCount = messages && messages.length;\n\n      if (!messages.length && !fetching) {\n        const text = loggedIn ? 'There are no chat!' : __jsx(React.Fragment, null, \"There are no chat, please\", __jsx(Link, {\n          href: \"/auth/register\"\n        }, __jsx(\"a\", null, \" register \")), \"or\", __jsx(Link, {\n          href: \"/auth/login\"\n        }, __jsx(\"a\", null, \" login \")), \"to send message!\");\n        return __jsx(Message, {\n          data: {\n            isSystem: true,\n            text\n          }\n        });\n      }\n\n      const tempMessages = [];\n\n      while (i < messageCount) {\n        const previous = messages[i - 1];\n        const current = messages[i];\n        const next = messages[i + 1];\n        const userId = currentUser && currentUser._id ? currentUser._id : currentPerformer && currentPerformer._id ? currentPerformer._id : null;\n        const isMine = current.senderId === userId;\n        const currentMoment = moment(current.createdAt);\n        let prevBySameAuthor = false;\n        let nextBySameAuthor = false;\n        let startsSequence = true;\n        let endsSequence = true;\n        let showTimestamp = true;\n        const isOwner = conversation && conversation.performerId === current.senderId;\n        const canDelete = !current.isDeleted && currentPerformer && currentPerformer._id === conversation.performerId || !current.isDeleted && currentUser._id === current.senderId || !current.isDeleted && currentUser.roles && currentUser.roles.includes('admin');\n\n        if (previous) {\n          const previousMoment = moment(previous.createdAt);\n          const previousDuration = moment.duration(currentMoment.diff(previousMoment));\n          prevBySameAuthor = previous.senderId === current.senderId;\n\n          if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n            startsSequence = false;\n          }\n\n          if (previousDuration.as('hours') < 1) {\n            showTimestamp = false;\n          }\n        }\n\n        if (next) {\n          const nextMoment = moment(next.createdAt);\n          const nextDuration = moment.duration(nextMoment.diff(currentMoment));\n          nextBySameAuthor = next.senderId === current.senderId;\n\n          if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n            endsSequence = false;\n          }\n        }\n\n        if (current._id) {\n          tempMessages.push(__jsx(Message, {\n            onDelete: this.onDelete.bind(this, current._id),\n            canDelete: canDelete,\n            isOwner: isOwner,\n            key: i,\n            isMine: isMine,\n            startsSequence: startsSequence,\n            endsSequence: endsSequence,\n            showTimestamp: showTimestamp,\n            data: current\n          }));\n        } // Proceed to the next message.\n\n\n        i += 1;\n      }\n\n      this.scrollToBottom();\n      return tempMessages;\n    });\n\n    _defineProperty(this, \"rejoin\", () => {\n      const {\n        conversation\n      } = this.props;\n\n      if (conversation && conversation._id) {\n        const socket = this.context;\n        conversation.type === 'stream_public' && socket.emit('public-stream/rejoin', {\n          conversationId: conversation._id\n        });\n        (conversation.type === 'stream_group' || conversation.type === 'stream_private') && socket.emit('REJOIN_ROOM', {\n          conversationId: conversation._id\n        });\n      }\n    });\n  }\n\n  async componentDidMount() {\n    if (!this.messagesRef) this.messagesRef = /*#__PURE__*/createRef();\n    const {\n      conversation\n    } = this.props;\n    const socket = this.context;\n\n    if (conversation && conversation._id) {\n      socket && socket.on && socket.on(`message_created_conversation_${conversation._id}`, data => {\n        this.onMessage(data, 'created');\n      });\n      socket && socket.on && socket.on(`message_deleted_conversation_${conversation._id}`, data => {\n        this.onMessage(data, 'deleted');\n      });\n    }\n\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n    window.addEventListener('beforeunload', this.onbeforeunload);\n    this.reconnect();\n  }\n\n  componentWillUnmount() {\n    const {\n      conversation\n    } = this.props;\n    const socket = this.context;\n    socket && socket.off(`message_created_conversation_${conversation._id}`);\n    socket && socket.off(`message_deleted_conversation_${conversation._id}`);\n    socket && socket.off('reconnect', this.rejoin);\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n    window.addEventListener('beforeunload', this.onbeforeunload);\n  }\n\n  async handleScroll(conversation, event) {\n    const {\n      message,\n      isPublic,\n      loadMoreStreamMessages: dispatchLoadMoreStreamMessages\n    } = this.props;\n    const {\n      page\n    } = this.state;\n    const {\n      fetching,\n      items,\n      total\n    } = message;\n    const canloadmore = total > items.length;\n    const ele = event.target;\n    if (!canloadmore) return;\n\n    if (ele.scrollTop === 0 && conversation._id && !fetching && canloadmore) {\n      await this.setState({\n        page: page + 1,\n        onloadmore: true\n      });\n      dispatchLoadMoreStreamMessages({\n        conversationId: conversation._id,\n        type: conversation.type,\n        limit: 25,\n        offset: page * 25,\n        isPublic\n      });\n    }\n  }\n\n  scrollToBottom() {\n    const {\n      onloadmore\n    } = this.state;\n\n    if (onloadmore) {\n      return;\n    }\n\n    if (this.messagesRef && this.messagesRef.current) {\n      const ele = this.messagesRef.current;\n      window.setTimeout(() => {\n        ele.scroll({\n          top: ele.scrollHeight,\n          behavior: 'smooth'\n        });\n      }, 200);\n    }\n  }\n\n  reconnect() {\n    const socket = this.context;\n\n    if (socket) {\n      socket.on('reconnect', this.rejoin);\n    }\n  }\n\n  render() {\n    const {\n      conversation,\n      isPublic,\n      message\n    } = this.props;\n    const {\n      fetching\n    } = message;\n    if (!this.messagesRef) this.messagesRef = /*#__PURE__*/createRef();\n    return __jsx(\"div\", {\n      className: \"message-list\",\n      onScroll: this.handleScroll.bind(this, conversation)\n    }, conversation && conversation._id && __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"message-list-container\",\n      ref: this.messagesRef\n    }, fetching && __jsx(\"p\", {\n      className: \"text-center\"\n    }, \"fetching...\"), this.renderMessages()), __jsx(Compose, {\n      conversation: conversation,\n      isPublic: isPublic\n    })));\n  }\n\n}\n\nMessageList.contextType = SocketContext;\n\nconst mapStates = state => {\n  const {\n    conversationMap,\n    activeConversation\n  } = state.streamMessage;\n  const messages = activeConversation.data && conversationMap[activeConversation.data._id] ? conversationMap[activeConversation.data._id].items || [] : [];\n  const totalMessages = activeConversation.data && conversationMap[activeConversation.data._id] ? conversationMap[activeConversation.data._id].total || 0 : 0;\n  const fetching = activeConversation.data && conversationMap[activeConversation.data._id] ? conversationMap[activeConversation.data._id].fetching || false : false;\n  return {\n    message: {\n      items: messages,\n      total: totalMessages,\n      fetching\n    },\n    conversation: activeConversation.data,\n    currentUser: state.user.current,\n    currentPerformer: state.performer.current,\n    loggedIn: state.auth.loggedIn\n  };\n};\n\nconst mapDispatch = {\n  loadMoreStreamMessages,\n  receiveStreamMessageSuccess,\n  deleteMessage,\n  deleteMessageSuccess,\n  resetStreamMessage\n};\nexport default connect(mapStates, mapDispatch)(MessageList);","map":null,"metadata":{},"sourceType":"module"}