{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport { Card, Space, Tag, Alert, Button } from 'antd';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { EditOutlined } from '@ant-design/icons';\nimport { capitalizeFirstLetter } from 'src/lib/string';\nimport { formatDate } from 'src/lib';\nimport TrashButton from '@components/common/base/trash';\nimport './index.less';\nimport NumberFormat from '@components/common/layout/numberformat';\nimport Router from 'next/router';\n\nvar renderActiveTag = function renderActiveTag(status) {\n  switch (status) {\n    case 'active':\n      return __jsx(Tag, {\n        color: \"success\",\n        className: \"photo-status\"\n      }, \"Active\");\n\n    case 'inactive':\n      return __jsx(Tag, {\n        color: \"warning\",\n        className: \"photo-status\"\n      }, \"Inactive\");\n\n    case 'draft':\n      return __jsx(Tag, {\n        color: \"default\",\n        className: \"photo-status\"\n      }, \"Inactive\");\n\n    default:\n      return __jsx(React.Fragment, null);\n  }\n};\n\nvar renderSale = function renderSale(isSale, token) {\n  switch (isSale) {\n    case true:\n      return __jsx(Tag, {\n        color: \"#87d068\",\n        className: \"sale-tag\"\n      }, __jsx(NumberFormat, {\n        value: token,\n        suffix: \" Tokens\"\n      }));\n\n    case false:\n      return __jsx(Tag, {\n        color: \"#f50\",\n        className: \"sale-tag\"\n      }, \"Free\");\n\n    default:\n      return __jsx(React.Fragment, null);\n  }\n};\n\nvar Dashboard = function Dashboard(_ref) {\n  var data = _ref.data,\n      searching = _ref.searching,\n      title = _ref.title,\n      hasMore = _ref.hasMore,\n      addGalleries = _ref.addGalleries,\n      success = _ref.success,\n      remove = _ref.remove,\n      error = _ref.error;\n  return __jsx(InfiniteScroll, {\n    pageStart: 0,\n    loadMore: addGalleries,\n    hasMore: hasMore,\n    loader: __jsx(\"p\", null, \"Loading...\")\n  }, __jsx(Card, {\n    className: \"photo-grid\",\n    title: title,\n    bordered: false\n  }, !searching ? success && (data.length > 0 ? data.map(function (gallery) {\n    return __jsx(Card.Grid, {\n      className: \"photo-box\",\n      key: gallery._id\n    }, __jsx(\"div\", {\n      className: \"photo-thumbnail\"\n    }, __jsx(\"img\", {\n      src: gallery.coverPhotoId && gallery.coverPhoto && gallery.coverPhoto.thumbnails[0] || '/gallery.png',\n      alt: \"\"\n    }), __jsx(Space, {\n      className: \"actions\"\n    }, __jsx(Button, {\n      type: \"link\",\n      onClick: function onClick() {\n        return Router.push({\n          pathname: '/account/performer/galleries/update',\n          query: {\n            data: JSON.stringify(gallery)\n          }\n        }, \"/account/performer/galleries/\".concat(gallery._id, \"/update\"));\n      }\n    }, __jsx(EditOutlined, null)), __jsx(TrashButton, {\n      confirm: function confirm() {\n        return remove(gallery._id);\n      }\n    })), renderActiveTag(gallery.status), renderSale(gallery.isSale, gallery.token)), __jsx(\"div\", {\n      className: \"photo-info\"\n    }, __jsx(\"span\", null, capitalizeFirstLetter(gallery.name)), __jsx(\"span\", null, gallery.numOfItems, ' ', \"Items\")), __jsx(\"div\", {\n      className: \"photo-description\"\n    }, \"Created On\", ' ', formatDate(gallery.createdAt, 'DD MMMM YYYY')), __jsx(\"div\", {\n      className: \"photo-description\"\n    }, gallery.description));\n  }) : __jsx(\"p\", null, \"No items\")) : __jsx(\"p\", null, \"Loading...\")), error && __jsx(Alert, {\n    type: \"error\",\n    message: \"Error request\",\n    banner: true\n  }));\n};\n\nDashboard.defaultProps = {\n  success: false,\n  error: false,\n  searching: false,\n  title: '',\n  addGalleries: null,\n  hasMore: false,\n  remove: null\n};\nexport default Dashboard;","map":null,"metadata":{},"sourceType":"module"}