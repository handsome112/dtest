{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { getFavoritePerformers, removeFavorite } from 'src/redux/user/actions';\nimport FavouritePerformerGrid from 'src/components/user/favourite-performer-grid';\nimport { favouriteService } from 'src/services';\nimport './index.less';\nimport { getResponseError } from '@lib/utils';\nimport Loader from '@components/common/base/loader';\n\nclass MyFavoutitePage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: {\n        offset: 0,\n        limit: 100\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentDidUpdate(_, prevStates) {\n    const {\n      query\n    } = this.state;\n\n    if (query !== prevStates.query) {\n      this.getData();\n    }\n  }\n\n  setFilter(name, value) {\n    const {\n      query\n    } = this.state;\n    this.setState({\n      query: _objectSpread(_objectSpread({}, query), {}, {\n        [name]: value\n      })\n    });\n  }\n\n  async getData() {\n    const {\n      getFavoritePerformers: dispatchGetFavoritePerformers\n    } = this.props;\n    const {\n      query\n    } = this.state;\n\n    try {\n      dispatchGetFavoritePerformers(_objectSpread({}, query));\n    } catch (error) {\n      const err = Promise.resolve(error);\n      message.error(getResponseError(err));\n    }\n  }\n\n  async dislike(performer) {\n    const {\n      _id\n    } = performer;\n    const {\n      removeFavorite: dispatchRemoveFavorite\n    } = this.props;\n\n    try {\n      await favouriteService.unlike(_id);\n      dispatchRemoveFavorite(_id);\n    } catch (error) {\n      const e = Promise.resolve(error);\n      message.error(getResponseError(e));\n    }\n  }\n\n  render() {\n    const {\n      searching\n    } = this.props;\n    const {\n      query\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My Favorite \")), __jsx(\"div\", {\n      className: \"favorite-page\"\n    }, __jsx(PageHeader, {\n      title: \"My Favorites\"\n    }), __jsx(Loader, {\n      spinning: searching\n    }), __jsx(FavouritePerformerGrid, _extends({}, this.props, {\n      query: query,\n      dislike: this.dislike.bind(this),\n      setFilter: this.setFilter.bind(this)\n    }))));\n  }\n\n}\n\n_defineProperty(MyFavoutitePage, \"authenticate\", true);\n\n_defineProperty(MyFavoutitePage, \"layout\", 'primary');\n\nconst mapStateToProps = state => _objectSpread(_objectSpread({}, state.user.favourites), {}, {\n  countries: state.settings.countries\n});\n\nconst mapDispatchs = {\n  getFavoritePerformers,\n  removeFavorite\n};\nexport default connect(mapStateToProps, mapDispatchs)(MyFavoutitePage);","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/pages/account/user/favorites/index.tsx"],"names":["message","PageHeader","Head","React","PureComponent","connect","getFavoritePerformers","removeFavorite","FavouritePerformerGrid","favouriteService","getResponseError","Loader","MyFavoutitePage","constructor","props","state","query","offset","limit","componentDidMount","getData","componentDidUpdate","_","prevStates","setFilter","name","value","setState","dispatchGetFavoritePerformers","error","err","Promise","resolve","dislike","performer","_id","dispatchRemoveFavorite","unlike","e","render","searching","bind","mapStateToProps","user","favourites","countries","settings","mapDispatchs"],"mappings":"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","sourcesContent":["import { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { getFavoritePerformers, removeFavorite } from 'src/redux/user/actions';\nimport FavouritePerformerGrid from 'src/components/user/favourite-performer-grid';\nimport { favouriteService } from 'src/services';\nimport './index.less';\nimport { ICountry, IFavourite, IPerformer } from 'src/interfaces';\nimport { getResponseError } from '@lib/utils';\nimport Loader from '@components/common/base/loader';\n\ninterface P {\n  getFavoritePerformers: Function;\n  removeFavorite: Function;\n  searching: boolean;\n  data: IFavourite[];\n  total: number;\n  error: any;\n  success: boolean;\n  loading: boolean;\n  countries: ICountry[]\n}\ninterface S {\n  query: {\n    offset: number;\n    limit: number;\n  };\n}\n\nclass MyFavoutitePage extends PureComponent<P, S> {\n  static authenticate = true;\n\n  static layout = 'primary';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: {\n        offset: 0,\n        limit: 100\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentDidUpdate(_, prevStates: S) {\n    const { query } = this.state;\n    if (query !== prevStates.query) {\n      this.getData();\n    }\n  }\n\n  setFilter(name: string, value: any) {\n    const { query } = this.state;\n    this.setState({\n      query: {\n        ...query,\n        [name]: value\n      }\n    });\n  }\n\n  async getData() {\n    const { getFavoritePerformers: dispatchGetFavoritePerformers } = this.props;\n    const { query } = this.state;\n    try {\n      dispatchGetFavoritePerformers({ ...query });\n    } catch (error) {\n      const err = Promise.resolve(error);\n      message.error(getResponseError(err));\n    }\n  }\n\n  async dislike(performer: IPerformer) {\n    const { _id } = performer;\n    const { removeFavorite: dispatchRemoveFavorite } = this.props;\n    try {\n      await favouriteService.unlike(_id);\n      dispatchRemoveFavorite(_id);\n    } catch (error) {\n      const e = Promise.resolve(error);\n      message.error(getResponseError(e));\n    }\n  }\n\n  render() {\n    const { searching } = this.props;\n    const { query } = this.state;\n    return (\n      <>\n        <Head>\n          <title>My Favorite </title>\n        </Head>\n        <div className=\"favorite-page\">\n          <PageHeader title=\"My Favorites\" />\n          <Loader spinning={searching} />\n          <FavouritePerformerGrid\n            {...this.props}\n            query={query}\n            dislike={this.dislike.bind(this)}\n            setFilter={this.setFilter.bind(this)}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ...state.user.favourites,\n  countries: state.settings.countries\n});\nconst mapDispatchs = { getFavoritePerformers, removeFavorite };\nexport default connect(mapStateToProps, mapDispatchs)(MyFavoutitePage);\n"]},"metadata":{},"sourceType":"module"}