{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/src/components/schedules/form.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport { Form, Checkbox, TimePicker, Button, Space } from 'antd';\nimport moment from 'moment';\nimport { formatDate } from 'src/lib';\nimport Router from 'next/router';\nconst {\n  Item\n} = Form;\nconst {\n  RangePicker\n} = TimePicker;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst checkboxLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16,\n      offset: 4\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 0\n    }\n  }\n};\n\nconst PerformerScheduleForm = ({\n  schedule,\n  onFinish,\n  updating\n}) => {\n  const [formInput, setFormInput] = React.useState(schedule);\n  const [form] = Form.useForm();\n\n  const submit = () => {\n    onFinish({\n      schedule: formInput\n    });\n  };\n\n  return __jsx(Form, _extends({\n    onFinish: submit,\n    className: \"performerEditForm\",\n    form: form\n  }, formItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }), Object.keys(schedule).map(key => __jsx(\"div\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, __jsx(Item, {\n    label: formatDate(moment().day(key).toDate(), 'dddd'),\n    name: key,\n    initialValue: [moment(schedule[key].start || '00:00', 'HH:mm'), moment(schedule[key].end || '00:00', 'HH:mm')],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, __jsx(RangePicker, {\n    format: \"HH:mm\",\n    onChange: values => setFormInput(_objectSpread(_objectSpread({}, formInput), {}, {\n      [key]: _objectSpread(_objectSpread({}, formInput[key]), {}, {\n        start: values[0].format('HH:mm'),\n        end: values[1].format('HH:mm')\n      })\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  })), __jsx(Item, _extends({}, checkboxLayout, {\n    name: `${key}closed`,\n    valuePropName: \"checked\",\n    initialValue: !schedule[key].closed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }), __jsx(Checkbox, {\n    value: true,\n    onChange: event => setFormInput(_objectSpread(_objectSpread({}, formInput), {}, {\n      [key]: _objectSpread(_objectSpread({}, formInput[key]), {}, {\n        closed: !event.target.checked\n      })\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"Available\")))), __jsx(Item, _extends({}, tailFormItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), __jsx(Space, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: updating,\n    loading: updating,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, \"Save Changes\"), __jsx(Button, {\n    type: \"primary\",\n    onClick: () => Router.back(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, \"Back\"))));\n};\n\nexport default PerformerScheduleForm;","map":null,"metadata":{},"sourceType":"module"}