{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/videos/detail.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport { Button, message, Alert } from 'antd';\nimport { HourglassOutlined, ClockCircleOutlined, DownloadOutlined } from '@ant-design/icons';\nimport Head from 'next/head';\nimport React, { PureComponent } from 'react';\nimport './index.less';\nimport { updateCurrentUserBalance } from '@redux/user/actions';\nimport { videoService, purchaseItemService } from 'src/services';\nimport { connect } from 'react-redux';\nimport Popup from 'src/components/common/base/popup';\nimport { capitalizeFirstLetter, getResponseError, formatDate, formatDuration } from 'src/lib';\nimport nextCookie from 'next-cookies';\nimport Error from 'pages/_error';\nimport Loader from '@components/common/base/loader';\nimport NumberFormat from '@components/common/layout/numberformat';\nimport Router from 'next/router';\nimport ProfileCard from '@components/performer/profile-card';\n\nclass VideoDetailPage extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    try {\n      const {\n        query\n      } = ctx;\n      if (query.data) return {\n        data: JSON.parse(query.data),\n        isBrowser: false\n      };\n\n      if (query.id) {\n        const {\n          token\n        } = nextCookie(ctx);\n        const headers = {\n          Authorization: token\n        };\n        const resp = await videoService.userFindVideoById(query.id, headers);\n        return {\n          data: resp.data,\n          isBrowser: false\n        };\n      }\n    } catch {\n      return {};\n    }\n\n    return {};\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"popupRef\", void 0);\n\n    this.state = {\n      video: null,\n      loading: true,\n      success: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      data,\n      isBrowser\n    } = this.props;\n    isBrowser ? this.getVideoDetail() : this.setState({\n      video: data,\n      success: true,\n      loading: false\n    });\n  }\n\n  async onOk() {\n    const {\n      currentUser,\n      data,\n      updateCurrentUserBalance: dispatchUpdateCurrentUserBalance\n    } = this.props;\n\n    try {\n      if (!currentUser || !currentUser._id) {\n        message.error('Please login to buy this video!');\n        return Router.push('/auth/login');\n      }\n\n      await purchaseItemService.purchaseVideo(data._id);\n      this.popupRef && this.popupRef.setVisible(false);\n      this.getVideoDetail();\n      const value = -1 * data.token;\n      dispatchUpdateCurrentUserBalance(value);\n    } catch (error) {\n      this.responseError(error);\n    }\n\n    return undefined;\n  }\n\n  async getVideoDetail() {\n    const {\n      data\n    } = this.props;\n    this.setState({\n      success: false,\n      loading: true\n    });\n\n    try {\n      const resp = await videoService.userFindVideoById(data._id);\n      this.setState({\n        video: resp.data,\n        success: true\n      });\n    } catch (error) {\n      this.responseError(error);\n    } finally {\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  purchase() {\n    const {\n      loggedIn\n    } = this.props;\n    if (!loggedIn) return message.error('Please login to buy this video!');\n    this.popupRef && this.popupRef.setVisible(true);\n    return undefined;\n  }\n\n  download() {\n    const {\n      video\n    } = this.state;\n    if (!video) return;\n\n    if (video.isBought || !video.isSaleVideo) {\n      const e = document.createElement('a');\n      e.href = video.video.url;\n      e.target = '_blank';\n      document.body.appendChild(e);\n      e.click();\n    }\n  }\n\n  async responseError(e) {\n    const err = await Promise.resolve(e);\n    message.error(getResponseError(err));\n  }\n\n  render() {\n    var _data$performer, _data$video, _video$video, _video$video2;\n\n    const {\n      video,\n      success,\n      loading\n    } = this.state;\n    const {\n      data,\n      ui,\n      loggedIn\n    } = this.props;\n    if (!data) return __jsx(Error, {\n      statusCode: 404,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 23\n      }\n    });\n    const dataSource = [{\n      title: 'Posted by:',\n      description: data === null || data === void 0 ? void 0 : (_data$performer = data.performer) === null || _data$performer === void 0 ? void 0 : _data$performer.username\n    }, {\n      title: 'Added on:',\n      description: formatDate(data.createdAt)\n    }, {\n      title: 'Duration:',\n      description: formatDuration((_data$video = data.video) === null || _data$video === void 0 ? void 0 : _data$video.duration)\n    }];\n    data.isSaleVideo && dataSource.push({\n      title: 'Price: ',\n      description: __jsx(NumberFormat, {\n        value: data.token,\n        suffix: \" Tokens\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 22\n        }\n      })\n    });\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }\n    }, video && video.title ? video.title : 'Video'), __jsx(\"meta\", {\n      name: \"keywords\",\n      content: video && video.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    }), __jsx(\"meta\", {\n      name: \"description\",\n      content: video && video.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }), __jsx(\"meta\", {\n      property: \"og:title\",\n      content: `${ui === null || ui === void 0 ? void 0 : ui.siteName} | ${(video === null || video === void 0 ? void 0 : video.title) || 'Video'}`,\n      key: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }), __jsx(\"meta\", {\n      property: \"og:image\",\n      content: video && video.thumbnail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }), __jsx(\"meta\", {\n      property: \"og:keywords\",\n      content: video && video.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    }), __jsx(\"meta\", {\n      property: \"og:description\",\n      content: video && video.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }\n    })), __jsx(React.Fragment, null, __jsx(Popup, {\n      ref: ref => this.popupRef = ref,\n      title: `Buy Video ${data === null || data === void 0 ? void 0 : data.title}`,\n      content: __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }\n      }, __jsx(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }\n      }, \"Available high quality Video\"), __jsx(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }\n      }, __jsx(NumberFormat, {\n        value: data.token,\n        prefix: `Buy ${capitalizeFirstLetter((data === null || data === void 0 ? void 0 : data.title) || '')} For `,\n        suffix: \" Tokens\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 19\n        }\n      }))),\n      onOk: this.onOk.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    }), __jsx(\"div\", {\n      className: \"video-detail-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }\n    }, !loading && success ? __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"video-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"vid-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 19\n      }\n    }, video === null || video === void 0 ? void 0 : video.title), __jsx(\"div\", {\n      className: \"vid-duration\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 19\n      }\n    }, __jsx(HourglassOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }\n    }), \"\\xA0\", formatDuration((video === null || video === void 0 ? void 0 : (_video$video = video.video) === null || _video$video === void 0 ? void 0 : _video$video.duration) || 0)), __jsx(\"div\", {\n      className: \"vid-duration\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 19\n      }\n    }, __jsx(ClockCircleOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }\n    }), \"\\xA0\", formatDate(video === null || video === void 0 ? void 0 : video.createdAt))), __jsx(\"div\", {\n      className: \"video-player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }, (!video.isSaleVideo || video.isBought) && __jsx(\"video\", {\n      src: video === null || video === void 0 ? void 0 : (_video$video2 = video.video) === null || _video$video2 === void 0 ? void 0 : _video$video2.url,\n      controls: true,\n      poster: video === null || video === void 0 ? void 0 : video.thumbnail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }\n    }), video.isSaleVideo && !video.isBought && video.trailer && __jsx(React.Fragment, null, __jsx(\"video\", {\n      src: video === null || video === void 0 ? void 0 : video.trailer.url,\n      controls: true,\n      poster: video === null || video === void 0 ? void 0 : video.thumbnail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 23\n      }\n    }), __jsx(\"p\", {\n      style: {\n        margin: '10px',\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 23\n      }\n    }, \"You're watching teaser video\")), video.isSaleVideo && !video.isBought && !video.trailer && __jsx(\"img\", {\n      src: video === null || video === void 0 ? void 0 : video.thumbnail,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      className: \"video-stats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }\n    }, (video === null || video === void 0 ? void 0 : video.isSaleVideo) && !video.isBought && __jsx(Button, {\n      type: \"primary\",\n      htmlType: \"button\",\n      onClick: this.purchase.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 21\n      }\n    }, \"Buy Video\"), (loggedIn && (video === null || video === void 0 ? void 0 : video.isBought) || loggedIn && !(video !== null && video !== void 0 && video.isSaleVideo)) && __jsx(Button, {\n      type: \"dashed\",\n      htmlType: \"button\",\n      onClick: this.download.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }\n    }, __jsx(DownloadOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 23\n      }\n    }), ' ', \"Download\")), (video === null || video === void 0 ? void 0 : video.isSaleVideo) && !(video !== null && video !== void 0 && video.isBought) && __jsx(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 19\n      }\n    }, __jsx(Alert, {\n      message: \"To view full content, please buy this video!\",\n      type: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      className: \"video-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"video-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 19\n      }\n    }, (video === null || video === void 0 ? void 0 : video.description) || 'No video description')), (data === null || data === void 0 ? void 0 : data.performer) && __jsx(ProfileCard, {\n      placeholderAvatarUrl: ui === null || ui === void 0 ? void 0 : ui.placeholderAvatarUrl,\n      performer: data.performer,\n      searching: loading,\n      success: success,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 19\n      }\n    })) : __jsx(React.Fragment, null, __jsx(Loader, {\n      spinning: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }\n    })))));\n  }\n\n}\n\n_defineProperty(VideoDetailPage, \"authenticate\", false);\n\n_defineProperty(VideoDetailPage, \"layout\", 'public');\n\nconst mapStates = state => ({\n  ui: state.ui,\n  loggedIn: state.auth.loggedIn,\n  currentUser: state.user.current,\n  currentPerformer: state.performer.current\n});\n\nconst mapDispatchs = {\n  updateCurrentUserBalance\n};\nexport default connect(mapStates, mapDispatchs)(VideoDetailPage);","map":null,"metadata":{},"sourceType":"module"}