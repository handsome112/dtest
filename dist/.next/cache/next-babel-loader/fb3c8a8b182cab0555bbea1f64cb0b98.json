{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { getFavoritePerformers, removeFavorite } from 'src/redux/user/actions';\nimport FavouritePerformerGrid from 'src/components/user/favourite-performer-grid';\nimport { favouriteService } from 'src/services';\nimport './index.less';\nimport { getResponseError } from '@lib/utils';\nimport Loader from '@components/common/base/loader';\n\nvar MyFavoutitePage = /*#__PURE__*/function (_PureComponent) {\n  _inherits(MyFavoutitePage, _PureComponent);\n\n  var _super = _createSuper(MyFavoutitePage);\n\n  function MyFavoutitePage(props) {\n    var _this;\n\n    _classCallCheck(this, MyFavoutitePage);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      query: {\n        offset: 0,\n        limit: 100\n      }\n    };\n    return _this;\n  }\n\n  _createClass(MyFavoutitePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_, prevStates) {\n      var query = this.state.query;\n\n      if (query !== prevStates.query) {\n        this.getData();\n      }\n    }\n  }, {\n    key: \"setFilter\",\n    value: function setFilter(name, value) {\n      var query = this.state.query;\n      this.setState({\n        query: _objectSpread(_objectSpread({}, query), {}, _defineProperty({}, name, value))\n      });\n    }\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var dispatchGetFavoritePerformers, query, err;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatchGetFavoritePerformers = this.props.getFavoritePerformers;\n                query = this.state.query;\n\n                try {\n                  dispatchGetFavoritePerformers(_objectSpread({}, query));\n                } catch (error) {\n                  err = Promise.resolve(error);\n                  message.error(getResponseError(err));\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }, {\n    key: \"dislike\",\n    value: function () {\n      var _dislike = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(performer) {\n        var _id, dispatchRemoveFavorite, e;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _id = performer._id;\n                dispatchRemoveFavorite = this.props.removeFavorite;\n                _context2.prev = 2;\n                _context2.next = 5;\n                return favouriteService.unlike(_id);\n\n              case 5:\n                dispatchRemoveFavorite(_id);\n                _context2.next = 12;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](2);\n                e = Promise.resolve(_context2.t0);\n                message.error(getResponseError(e));\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 8]]);\n      }));\n\n      function dislike(_x) {\n        return _dislike.apply(this, arguments);\n      }\n\n      return dislike;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var searching = this.props.searching;\n      var query = this.state.query;\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My Favorite \")), __jsx(\"div\", {\n        className: \"favorite-page\"\n      }, __jsx(PageHeader, {\n        title: \"My Favorites\"\n      }), __jsx(Loader, {\n        spinning: searching\n      }), __jsx(FavouritePerformerGrid, _extends({}, this.props, {\n        query: query,\n        dislike: this.dislike.bind(this),\n        setFilter: this.setFilter.bind(this)\n      }))));\n    }\n  }]);\n\n  return MyFavoutitePage;\n}(PureComponent);\n\n_defineProperty(MyFavoutitePage, \"authenticate\", true);\n\n_defineProperty(MyFavoutitePage, \"layout\", 'primary');\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread(_objectSpread({}, state.user.favourites), {}, {\n    countries: state.settings.countries\n  });\n};\n\nvar mapDispatchs = {\n  getFavoritePerformers: getFavoritePerformers,\n  removeFavorite: removeFavorite\n};\nexport default connect(mapStateToProps, mapDispatchs)(MyFavoutitePage);","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/pages/account/user/favorites/index.tsx"],"names":["message","PageHeader","Head","React","PureComponent","connect","getFavoritePerformers","removeFavorite","FavouritePerformerGrid","favouriteService","getResponseError","Loader","MyFavoutitePage","props","state","query","offset","limit","getData","_","prevStates","name","value","setState","dispatchGetFavoritePerformers","error","err","Promise","resolve","performer","_id","dispatchRemoveFavorite","unlike","e","searching","dislike","bind","setFilter","mapStateToProps","user","favourites","countries","settings","mapDispatchs"],"mappings":"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","sourcesContent":["import { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { getFavoritePerformers, removeFavorite } from 'src/redux/user/actions';\nimport FavouritePerformerGrid from 'src/components/user/favourite-performer-grid';\nimport { favouriteService } from 'src/services';\nimport './index.less';\nimport { ICountry, IFavourite, IPerformer } from 'src/interfaces';\nimport { getResponseError } from '@lib/utils';\nimport Loader from '@components/common/base/loader';\n\ninterface P {\n  getFavoritePerformers: Function;\n  removeFavorite: Function;\n  searching: boolean;\n  data: IFavourite[];\n  total: number;\n  error: any;\n  success: boolean;\n  loading: boolean;\n  countries: ICountry[]\n}\ninterface S {\n  query: {\n    offset: number;\n    limit: number;\n  };\n}\n\nclass MyFavoutitePage extends PureComponent<P, S> {\n  static authenticate = true;\n\n  static layout = 'primary';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: {\n        offset: 0,\n        limit: 100\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentDidUpdate(_, prevStates: S) {\n    const { query } = this.state;\n    if (query !== prevStates.query) {\n      this.getData();\n    }\n  }\n\n  setFilter(name: string, value: any) {\n    const { query } = this.state;\n    this.setState({\n      query: {\n        ...query,\n        [name]: value\n      }\n    });\n  }\n\n  async getData() {\n    const { getFavoritePerformers: dispatchGetFavoritePerformers } = this.props;\n    const { query } = this.state;\n    try {\n      dispatchGetFavoritePerformers({ ...query });\n    } catch (error) {\n      const err = Promise.resolve(error);\n      message.error(getResponseError(err));\n    }\n  }\n\n  async dislike(performer: IPerformer) {\n    const { _id } = performer;\n    const { removeFavorite: dispatchRemoveFavorite } = this.props;\n    try {\n      await favouriteService.unlike(_id);\n      dispatchRemoveFavorite(_id);\n    } catch (error) {\n      const e = Promise.resolve(error);\n      message.error(getResponseError(e));\n    }\n  }\n\n  render() {\n    const { searching } = this.props;\n    const { query } = this.state;\n    return (\n      <>\n        <Head>\n          <title>My Favorite </title>\n        </Head>\n        <div className=\"favorite-page\">\n          <PageHeader title=\"My Favorites\" />\n          <Loader spinning={searching} />\n          <FavouritePerformerGrid\n            {...this.props}\n            query={query}\n            dislike={this.dislike.bind(this)}\n            setFilter={this.setFilter.bind(this)}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ...state.user.favourites,\n  countries: state.settings.countries\n});\nconst mapDispatchs = { getFavoritePerformers, removeFavorite };\nexport default connect(mapStateToProps, mapDispatchs)(MyFavoutitePage);\n"]},"metadata":{},"sourceType":"module"}