{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-nested-ternary */\nimport { useEffect } from 'react';\nimport { Form, Input, Col, Row, Select, Button } from 'antd';\nimport FormItem from 'antd/lib/form/FormItem';\nconst PAYMENT_INFO_CURRENCY = {\n  eurEuro: 'EUR (Euro)',\n  usdUnitedStatesDollars: 'USD (U.S Dollar)'\n};\nconst {\n  Item\n} = Form;\nconst {\n  Option\n} = Select;\nconst initFormValue = {\n  type: 'wireTransfer',\n  withdrawCurrency: 'eurEuro',\n  taxPayer: ''\n};\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 24\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 20\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 0\n    }\n  }\n};\nexport const IssueCheckUSSetingForm = ({\n  onFinish,\n  paymentInformation,\n  loading\n}) => {\n  const [form] = Form.useForm();\n  useEffect(() => {\n    form.setFieldsValue(paymentInformation);\n  }, [paymentInformation]);\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: onFinish,\n    name: \"paymentInfoSettingForm\",\n    className: \"performerEditForm\",\n    validateMessages: {\n      required: 'This field is required!'\n    },\n    initialValues: _objectSpread({}, initFormValue)\n  }), __jsx(Row, null, __jsx(Col, {\n    xs: 24,\n    sm: 12\n  }, __jsx(Item, {\n    name: \"withdrawCurrency\",\n    key: \"withdrawCurrency\",\n    rules: [{\n      required: true\n    }],\n    label: \"Withdraw Currency\"\n  }, __jsx(Select, null, Object.keys(PAYMENT_INFO_CURRENCY).map(key => __jsx(Option, {\n    value: key,\n    key: key\n  }, PAYMENT_INFO_CURRENCY[key])))), __jsx(Item, {\n    name: \"taxPayer\",\n    key: \"taxPayer\",\n    label: \"Taxpayer ID/SSN\"\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"checkPayable\",\n    key: \"checkPayable\",\n    label: \"Check Payable To\",\n    dependencies: ['type'],\n    rules: [{\n      required: true\n    }]\n  }, __jsx(Input, null)))), __jsx(FormItem, tailFormItemLayout, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading\n  }, \"Save Change\")));\n};","map":null,"metadata":{},"sourceType":"module"}