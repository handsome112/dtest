{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport { createSagas } from '@lib/redux';\nimport { flatten, omit } from 'lodash';\nimport { put, all, select } from 'redux-saga/effects';\nimport { performerCategories, performerService, videoService, productService, galleryService, earningService, payoutRequestService } from 'src/services';\nimport { photoService } from '@services/photo.service';\nimport { getPerformerCategoriesSuccess, getPerformerCategoriesFail, getPerformerCategories, searchPerformer, searchPerformerFail, searchPerformerSuccess, setPerformerSearching, updatePerformerProfile, updatePerformerProfileFail, updatePerformerProfileSuccess, setupdatingPerformerProfile, getPerformerDetails, getPerformerDetailsSuccess, getPerformerDetailsFail, setGettingPerformerDetails, getMyVideos, getMyVideosFail, getMyVideosSuccess, setgettingMyVideos, getMyProducts, getMyProductsSuccess, getMyProductsFail, setGettingMyProducts, getEarning, getEarningFail, getEarningSuccess, setGettingEarning, getMyPhotos, getMyPhotosSuccess, getMyPhotosFail, setgettingMyPhotos, getMyGalleries, getMyGalleriesSuccess, getMyGalleriesFail, setgettingMyGalleries, updatePaymentInfo, updateDirectDeposit, updateBitpay, updatePaxum, updateStreamingStatus, updateDefaultPrice, getPayoutRequest, setGettingPayoutRequest, getPayoutRequestSuccess, getPayoutRequestFail } from './actions';\nconst performerSaga = [{\n  on: getPerformerCategories,\n\n  *worker(data) {\n    try {\n      const resp = yield performerCategories.getList(data.payload);\n      yield put(getPerformerCategoriesSuccess(resp.data));\n    } catch (err) {\n      const error = yield Promise.resolve(err);\n      yield put(getPerformerCategoriesFail(error));\n    }\n  }\n\n}, {\n  on: searchPerformer,\n\n  *worker(action) {\n    try {\n      yield put(setPerformerSearching());\n      const resp = yield performerService.search(action.payload);\n      const currentPerformer = yield select(state => state.performer.current);\n      const data = resp.data.data.filter(p => p._id !== currentPerformer._id);\n      const total = currentPerformer !== null && currentPerformer !== void 0 && currentPerformer._id ? resp.data.total - 1 : resp.data.total;\n      yield put(searchPerformerSuccess({\n        data,\n        total\n      }));\n    } catch (err) {\n      const error = yield Promise.resolve(err);\n      yield put(searchPerformerFail(error));\n    }\n  }\n\n}, {\n  on: updatePerformerProfile,\n\n  *worker(data) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updateMe(data.payload);\n      yield put(updatePerformerProfileSuccess(resp.data)); // if this is current user, reload user info?\n    } catch (e) {\n      // TODO - alert error\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}, {\n  on: getPerformerDetails,\n\n  *worker(data) {\n    try {\n      yield put(setGettingPerformerDetails());\n      const [performerResponse, performerProductReponse, performerVideoResponse, performerGalleryResponse, relatedPerformerResponse] = yield all([performerService.details(data.payload.username), productService.search({\n        performerId: data.payload._id,\n        status: 'active'\n      }), videoService.search({\n        performerId: data.payload._id,\n        status: 'active'\n      }), galleryService.search({\n        performerId: data.payload._id,\n        status: 'active'\n      }, false), performerService.search({\n        status: 'active',\n        excludedId: data.payload._id,\n        limit: 12\n      })]);\n      const products = {};\n      const videos = {};\n      const galleries = {};\n      performerProductReponse.data.data.forEach(p => products[p._id] = p);\n      performerVideoResponse.data.data.forEach(v => videos[v._id] = v);\n      performerGalleryResponse.data.data.forEach(g => galleries[g._id] = g);\n      yield put(getPerformerDetailsSuccess({\n        performer: _objectSpread(_objectSpread({}, performerResponse.data), {}, {\n          products: performerProductReponse.data.data.map(p => p._id),\n          videos: performerVideoResponse.data.data.map(v => v._id),\n          galleries: performerGalleryResponse.data.data.map(g => g._id),\n          relatedPerformers: relatedPerformerResponse.data.data\n        }),\n        // photos,\n        videos,\n        products,\n        galleries\n      }));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getPerformerDetailsFail(err));\n    }\n  }\n\n}, {\n  on: getMyProducts,\n\n  *worker(action) {\n    try {\n      yield put(setGettingMyProducts());\n      const resp = yield performerService.myProduct(action.payload);\n      yield put(getMyProductsSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getMyProductsFail(err));\n    }\n  }\n\n}, {\n  on: getEarning,\n\n  *worker(action) {\n    try {\n      yield put(setGettingEarning());\n      let difDateQuery = false;\n      const earning = yield select(state => state.performer.earning);\n      const {\n        fromDate,\n        toDate\n      } = action.payload;\n      const query = omit(action.payload, ['fromDate', 'toDate']);\n\n      if (fromDate && toDate) {\n        query.fromDate = fromDate;\n        query.toDate = toDate;\n      }\n\n      if (earning.toDate !== toDate || earning.fromDate !== fromDate) difDateQuery = true;\n      const [resp, stats] = yield all([earningService.search(query), earning.stats && !difDateQuery ? earning.stats : earningService.stats(query)]);\n      yield put(getEarningSuccess(_objectSpread(_objectSpread({}, query), {}, {\n        stats,\n        data: resp.data\n      })));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getEarningFail(err));\n    }\n  }\n\n}, {\n  on: getPayoutRequest,\n\n  *worker(action) {\n    try {\n      yield put(setGettingPayoutRequest());\n      const [resp] = yield all([payoutRequestService.search(action.payload)]);\n      yield put(getPayoutRequestSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getPayoutRequestFail(err));\n    }\n  }\n\n}, {\n  on: getMyVideos,\n\n  *worker(action) {\n    try {\n      yield put(setgettingMyVideos());\n      const resp = yield videoService.myVideos(action.payload);\n      yield put(getMyVideosSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getMyVideosFail(err));\n    }\n  }\n\n}, {\n  on: getMyPhotos,\n\n  *worker(action) {\n    try {\n      yield put(setgettingMyPhotos());\n      const resp = yield photoService.myPhotos(action.payload);\n      yield put(getMyPhotosSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getMyPhotosFail(err));\n    }\n  }\n\n}, {\n  on: getMyGalleries,\n\n  *worker(action) {\n    try {\n      yield put(setgettingMyGalleries());\n      const resp = yield galleryService.search(action.payload);\n      yield put(getMyGalleriesSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getMyGalleriesFail(err));\n    }\n  }\n\n}, {\n  on: updatePaymentInfo,\n\n  *worker(action) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updatePaymentInfo(action.payload);\n      yield put(updatePerformerProfileSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}, {\n  on: updateDirectDeposit,\n\n  *worker(action) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updateDirectDepost(action.payload);\n      yield put(updatePerformerProfileSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}, {\n  on: updateBitpay,\n\n  *worker(action) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updateBitpay(action.payload);\n      yield put(updatePerformerProfileSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}, {\n  on: updatePaxum,\n\n  *worker(action) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updatePaxum(action.payload);\n      yield put(updatePerformerProfileSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}, {\n  on: updateStreamingStatus,\n\n  *worker(action) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updateStreamingStatus({\n        status: action.payload\n      });\n      yield put(updatePerformerProfileSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}, {\n  on: updateDefaultPrice,\n\n  *worker(action) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updateDefaultPrice(action.payload);\n      yield put(updatePerformerProfileSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}];\nexport default flatten([createSagas(performerSaga)]);","map":null,"metadata":{},"sourceType":"module"}