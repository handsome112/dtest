{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/var/www/dtest.live/src/components/performer/documents-setting-form.tsx\";\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { Form, Upload, Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { performerService } from 'src/services';\nimport { TOKEN } from 'src/services/api-request';\nimport cookie from 'js-cookie';\nimport './index.less';\nvar formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  }\n};\nvar tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 0\n    }\n  }\n};\n\nvar DocumentsSettingForm = function DocumentsSettingForm(_ref) {\n  var onFinish = _ref.onFinish,\n      loading = _ref.loading,\n      performer = _ref.performer;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      idVerification = _React$useState2[0],\n      setIdVerification = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      documentVerification = _React$useState4[0],\n      setDocumentVerification = _React$useState4[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      releaseForm = _React$useState6[0],\n      setRelaseForm = _React$useState6[1];\n\n  var _React$useState7 = React.useState(performer.idVerificationId),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      idVerificationId = _React$useState8[0],\n      setIdVerificationId = _React$useState8[1];\n\n  var _React$useState9 = React.useState(performer.documentVerificationId),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      documentVerificationId = _React$useState10[0],\n      setDocumentVerificationId = _React$useState10[1];\n\n  var _React$useState11 = React.useState(performer.releaseFormId),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      releaseFormId = _React$useState12[0],\n      setReleaseFormId = _React$useState12[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  React.useEffect(function () {\n    var idVerificationFile = performer.idVerification,\n        documentVerificationFile = performer.documentVerification,\n        releaseFormFile = performer.releaseForm;\n\n    if (idVerificationFile) {\n      setIdVerification([{\n        uid: idVerificationFile._id,\n        name: idVerificationFile.name,\n        status: 'done',\n        url: idVerificationFile.url\n      }]);\n    }\n\n    if (documentVerificationFile) {\n      setDocumentVerification([{\n        uid: documentVerificationFile._id,\n        name: documentVerificationFile.name,\n        status: 'done',\n        url: documentVerificationFile.url\n      }]);\n    }\n\n    if (releaseFormFile) {\n      setRelaseForm([{\n        uid: releaseFormFile._id,\n        name: releaseFormFile.name,\n        status: 'done',\n        url: releaseFormFile.url\n      }]);\n    }\n  }, []);\n\n  var onDocumentVerificationChange = function onDocumentVerificationChange(_ref2) {\n    var file = _ref2.file,\n        fileList = _ref2.fileList;\n\n    if (file.status === 'done' && file.response) {\n      var _data = file.response.data;\n      setDocumentVerificationId(_data._id);\n      setDocumentVerification([{\n        uid: _data._id,\n        name: _data.name,\n        status: 'done',\n        url: _data.url\n      }]);\n    } else {\n      setDocumentVerification(fileList);\n    }\n  };\n\n  var onIdVerificationChange = function onIdVerificationChange(_ref3) {\n    var file = _ref3.file,\n        fileList = _ref3.fileList;\n\n    if (file.status === 'done' && file.response) {\n      var _data2 = file.response.data;\n      setIdVerificationId(_data2._id);\n      setIdVerification([{\n        uid: _data2._id,\n        name: _data2.name,\n        status: 'done',\n        url: _data2.url\n      }]);\n    } else {\n      setIdVerification(fileList);\n    }\n  };\n\n  var onReleaseFormChange = function onReleaseFormChange(_ref4) {\n    var file = _ref4.file,\n        fileList = _ref4.fileList;\n\n    if (file.status === 'done' && file.response) {\n      var _data3 = file.response.data;\n      setReleaseFormId(_data3._id);\n      setRelaseForm([{\n        uid: _data3._id,\n        name: _data3.name,\n        status: 'done',\n        url: _data3.url\n      }]);\n    } else {\n      setRelaseForm(fileList);\n    }\n  };\n\n  var submit = function submit() {\n    onFinish({\n      idVerificationId: idVerificationId,\n      documentVerificationId: documentVerificationId,\n      releaseFormId: releaseFormId\n    });\n  };\n\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    onFinish: submit,\n    name: \"documentSettingForm\",\n    className: \"performerEditForm\",\n    initialValues: {\n      documentVerificationId: performer.documentVerificationId,\n      idVerificationId: performer.idVerificationId\n    },\n    layout: \"vertical\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }), __jsx(Form.Item, {\n    name: \"documentVerification\",\n    rules: [{\n      validator: function validator() {\n        if (idVerificationId) return Promise.resolve();\n        return Promise.reject(new Error('Verification document is required!'));\n      }\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, __jsx(Upload, {\n    showUploadList: {\n      showPreviewIcon: true,\n      showRemoveIcon: false,\n      showDownloadIcon: true\n    },\n    name: \"file\",\n    headers: {\n      Authorization: true ? cookie.get(TOKEN) : ''\n    },\n    disabled: loading,\n    fileList: documentVerification,\n    listType: \"picture\",\n    action: performerService.getDocumentsUploadUrl(),\n    onChange: onDocumentVerificationChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, __jsx(UploadOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }), ' ', \"Upload Document For Verification\"))), __jsx(Form.Item, {\n    name: \"idVerification\",\n    rules: [{\n      validator: function validator() {\n        if (idVerificationId) return Promise.resolve();\n        return Promise.reject(new Error('Id Verification is required'));\n      }\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }, __jsx(Upload, {\n    showUploadList: {\n      showPreviewIcon: true,\n      showRemoveIcon: false,\n      showDownloadIcon: true\n    },\n    name: \"file\",\n    headers: {\n      Authorization: true ? cookie.get(TOKEN) : ''\n    },\n    fileList: idVerification,\n    listType: \"picture\",\n    disabled: loading,\n    action: performerService.getDocumentsUploadUrl(),\n    onChange: onIdVerificationChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }, __jsx(UploadOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }\n  }), \"Upload Id Verification\"))), __jsx(Form.Item, {\n    name: \"releaseForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }\n  }, __jsx(Upload, {\n    showUploadList: {\n      showPreviewIcon: true,\n      showRemoveIcon: false,\n      showDownloadIcon: true\n    },\n    name: \"file\",\n    headers: {\n      Authorization: true ? cookie.get(TOKEN) : ''\n    },\n    fileList: releaseForm,\n    listType: \"text\",\n    action: performerService.getReleaseFormUrl(),\n    onChange: onReleaseFormChange,\n    disabled: loading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }, __jsx(UploadOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }), \"Upload Release Form\"))), __jsx(Form.Item, _extends({}, tailFormItemLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    loading: loading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  }, \"Save Changes\")));\n};\n\nexport default DocumentsSettingForm;","map":null,"metadata":{},"sourceType":"module"}