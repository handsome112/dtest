{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from 'react';\nimport { Form, Button, Row, Col, InputNumber } from 'antd';\nimport './index.less';\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 24\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 0\n    }\n  }\n};\n\nconst BroadcastSetting = ({\n  onFinish,\n  maxParticipantsAllowed,\n  loading\n}) => {\n  const [form] = Form.useForm();\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    onFinish: onFinish,\n    name: \"broadcastSettingForm\",\n    className: \"performerEditForm\",\n    initialValues: {\n      maxParticipantsAllowed: typeof maxParticipantsAllowed === 'number' ? maxParticipantsAllowed : 0\n    },\n    layout: \"vertical\"\n  }), __jsx(Row, {\n    gutter: 25\n  }, __jsx(Col, {\n    sm: 12,\n    xs: 24\n  }, __jsx(Form.Item, {\n    name: \"maxParticipantsAllowed\",\n    label: \"Max Participants Allowed\",\n    extra: \"Set 0 to unlimit participants allowed\"\n  }, __jsx(InputNumber, {\n    type: \"number\",\n    min: 0,\n    style: {\n      width: '100%'\n    },\n    placeholder: \"Input max participants allowed\"\n  })))), __jsx(Form.Item, tailFormItemLayout, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    loading: loading\n  }, \"Save Changes\")));\n};\n\nexport default BroadcastSetting;","map":null,"metadata":{},"sourceType":"module"}