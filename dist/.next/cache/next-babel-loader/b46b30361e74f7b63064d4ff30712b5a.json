{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/var/www/dtest.live/src/components/stream-chat/Messenger.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport './Messenger.less';\nimport { connect } from 'react-redux';\nimport { getStreamConversation } from '@redux/stream-chat/actions';\nimport MessageList from './MessageList';\n\nvar StreamMessenger = /*#__PURE__*/function (_PureComponent) {\n  _inherits(StreamMessenger, _PureComponent);\n\n  var _super = _createSuper(StreamMessenger);\n\n  function StreamMessenger() {\n    _classCallCheck(this, StreamMessenger);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(StreamMessenger, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          streamId = _this$props.streamId,\n          activeConversation = _this$props.activeConversation,\n          dispatchGetStreamConversation = _this$props.getStreamConversation;\n\n      if (!activeConversation && streamId) {\n        dispatchGetStreamConversation({\n          conversation: activeConversation.data,\n          isPublic: true\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          activeConversation = _this$props2.activeConversation,\n          isPublic = _this$props2.isPublic,\n          loggedIn = _this$props2.loggedIn;\n      return __jsx(\"div\", {\n        className: classnames('message-stream', loggedIn ? 'user-logged-in' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 7\n        }\n      }, activeConversation && activeConversation.data && activeConversation.data.streamId ? __jsx(MessageList, {\n        isPublic: isPublic,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 94\n        }\n      }) : __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 132\n        }\n      }, \"No conversation found.\"));\n    }\n  }]);\n\n  return StreamMessenger;\n}(PureComponent);\n\nvar mapStates = function mapStates(state) {\n  return {\n    activeConversation: state.streamMessage.activeConversation,\n    loggedIn: state.auth.loggedIn\n  };\n};\n\nvar mapDispatchs = {\n  getStreamConversation: getStreamConversation\n};\nexport default connect(mapStates, mapDispatchs)(StreamMessenger);","map":null,"metadata":{},"sourceType":"module"}