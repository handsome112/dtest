{"ast":null,"code":"var _jsxFileName = \"/var/www/dtest.live/pages/auth/register/model.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport '../index.less';\nimport { PureComponent } from 'react';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { message, Alert } from 'antd';\nimport { connect } from 'react-redux';\nimport { performerRegister } from '@redux/auth/actions';\nimport RegisterForm from '@components/auth/register/model-register-form';\nimport { updateUIValue } from 'src/redux/ui/actions';\nimport { settingService } from '@services/setting.service';\nimport { getResponseError } from '@lib/utils';\nimport moment from 'moment';\nimport { FormRegisterPlaceHolder } from '@components/common/layout';\n\nclass PerformerRegisterPage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false,\n      errorMessage: '',\n      countries: []\n    };\n  }\n\n  componentDidMount() {\n    this.getContries();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      success,\n      data,\n      error\n    } = this.props;\n\n    if (prevProps.success !== success && success) {\n      message.success(data && data.message || 'Your register has been successfully, please wait for our admin approval');\n      Router.push('/auth/login/performer');\n    }\n\n    if (prevProps.error !== error && error) {\n      message.error(getResponseError(error));\n    }\n  }\n\n  onFinish(data) {\n    const {\n      performerRegister: dispatchPerformerRegister\n    } = this.props;\n\n    let newData = _objectSpread({}, data);\n\n    if (data.dateOfBirth) {\n      newData = _objectSpread(_objectSpread({}, data), {}, {\n        dateOfBirth: moment(data.dateOfBirth).toISOString()\n      });\n    } // if (data.dateOfBirth) {\n    //   data.dateOfBirth = moment(data.dateOfBirth).toISOString();\n    // }\n\n\n    dispatchPerformerRegister(newData);\n  }\n\n  async getContries() {\n    try {\n      const countries = await settingService.getCountries();\n      this.setState({\n        countries: countries.data\n      });\n    } catch (error) {\n      this.setState({\n        error: true,\n        errorMessage: getResponseError(error)\n      });\n    }\n  }\n\n  render() {\n    const {\n      submiting,\n      ui\n    } = this.props;\n    const {\n      error,\n      errorMessage,\n      countries\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, (ui === null || ui === void 0 ? void 0 : ui.singularTextModel) || 'Performer', ' ', \"Register\")), __jsx(\"div\", {\n      className: \"register-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"form-register-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, errorMessage && __jsx(Alert, {\n      type: \"error\",\n      message: \"Error request\",\n      banner: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 31\n      }\n    }), __jsx(RegisterForm, {\n      singularTextModel: (ui === null || ui === void 0 ? void 0 : ui.singularTextModel) || 'Performer',\n      onFinish: this.onFinish.bind(this),\n      submiting: submiting,\n      countries: countries,\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    })), __jsx(FormRegisterPlaceHolder, {\n      ui: ui,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\n_defineProperty(PerformerRegisterPage, \"authenticate\", false);\n\n_defineProperty(PerformerRegisterPage, \"layout\", 'auth');\n\nconst mapStateToProps = state => _objectSpread({\n  ui: state.ui,\n  loggedIn: state.auth.loggedIn\n}, state.auth.performerRegister);\n\nconst mapDispatchs = {\n  performerRegister,\n  updateUIValue\n};\nexport default connect(mapStateToProps, mapDispatchs)(PerformerRegisterPage);","map":null,"metadata":{},"sourceType":"module"}