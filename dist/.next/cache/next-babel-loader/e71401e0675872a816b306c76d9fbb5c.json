{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/dtest.live/pages/account/user/favorites/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { getFavoritePerformers, removeFavorite } from 'src/redux/user/actions';\nimport FavouritePerformerGrid from 'src/components/user/favourite-performer-grid';\nimport { favouriteService } from 'src/services';\nimport './index.less';\nimport { getResponseError } from '@lib/utils';\nimport Loader from '@components/common/base/loader';\n\nvar MyFavoutitePage = /*#__PURE__*/function (_PureComponent) {\n  _inherits(MyFavoutitePage, _PureComponent);\n\n  var _super = _createSuper(MyFavoutitePage);\n\n  function MyFavoutitePage(props) {\n    var _this;\n\n    _classCallCheck(this, MyFavoutitePage);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      query: {\n        offset: 0,\n        limit: 100\n      }\n    };\n    return _this;\n  }\n\n  _createClass(MyFavoutitePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_, prevStates) {\n      var query = this.state.query;\n\n      if (query !== prevStates.query) {\n        this.getData();\n      }\n    }\n  }, {\n    key: \"setFilter\",\n    value: function setFilter(name, value) {\n      var query = this.state.query;\n      this.setState({\n        query: _objectSpread(_objectSpread({}, query), {}, _defineProperty({}, name, value))\n      });\n    }\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var dispatchGetFavoritePerformers, query, err;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatchGetFavoritePerformers = this.props.getFavoritePerformers;\n                query = this.state.query;\n\n                try {\n                  dispatchGetFavoritePerformers(_objectSpread({}, query));\n                } catch (error) {\n                  err = Promise.resolve(error);\n                  message.error(getResponseError(err));\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }, {\n    key: \"dislike\",\n    value: function () {\n      var _dislike = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(performer) {\n        var _id, dispatchRemoveFavorite, e;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _id = performer._id;\n                dispatchRemoveFavorite = this.props.removeFavorite;\n                _context2.prev = 2;\n                _context2.next = 5;\n                return favouriteService.unlike(_id);\n\n              case 5:\n                dispatchRemoveFavorite(_id);\n                _context2.next = 12;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](2);\n                e = Promise.resolve(_context2.t0);\n                message.error(getResponseError(e));\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 8]]);\n      }));\n\n      function dislike(_x) {\n        return _dislike.apply(this, arguments);\n      }\n\n      return dislike;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var searching = this.props.searching;\n      var query = this.state.query;\n      return __jsx(React.Fragment, null, __jsx(Head, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }, __jsx(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, \"My Favorite \")), __jsx(\"div\", {\n        className: \"favorite-page\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, __jsx(PageHeader, {\n        title: \"My Favorites\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }), __jsx(Loader, {\n        spinning: searching,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }\n      }), __jsx(FavouritePerformerGrid, _extends({}, this.props, {\n        query: query,\n        dislike: this.dislike.bind(this),\n        setFilter: this.setFilter.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }\n      }))));\n    }\n  }]);\n\n  return MyFavoutitePage;\n}(PureComponent);\n\n_defineProperty(MyFavoutitePage, \"authenticate\", true);\n\n_defineProperty(MyFavoutitePage, \"layout\", 'primary');\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread(_objectSpread({}, state.user.favourites), {}, {\n    countries: state.settings.countries\n  });\n};\n\nvar mapDispatchs = {\n  getFavoritePerformers: getFavoritePerformers,\n  removeFavorite: removeFavorite\n};\nexport default connect(mapStateToProps, mapDispatchs)(MyFavoutitePage);","map":null,"metadata":{},"sourceType":"module"}