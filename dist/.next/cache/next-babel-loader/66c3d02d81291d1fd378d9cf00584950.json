{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport React from 'react';\nimport { Form, Input, InputNumber, message } from 'antd';\nimport Popup from '@components/common/base/popup';\nimport './modal-buy-assets.less';\nimport { capitalizeFirstLetter, getResponseError, isPhysicalProduct } from 'src/lib';\nimport { purchaseItemService } from 'src/services';\nimport NumberFormat from '@components/common/layout/numberformat';\nconst initialValues = {\n  postalCode: '',\n  deliveryAddress: '',\n  quantity: 1\n};\n\nclass ModalBuyAssets extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"form\", void 0);\n\n    _defineProperty(this, \"popup\", void 0);\n\n    this.state = _objectSpread(_objectSpread({}, initialValues), {}, {\n      type: 'product',\n      purchasing: false,\n      item: undefined\n    });\n  }\n\n  async onOk() {\n    const {\n      loggedIn\n    } = this.props;\n    const {\n      item\n    } = this.state;\n\n    if (!loggedIn) {\n      message.error('Please login to buy this item!');\n      return;\n    }\n\n    this.setState({\n      purchasing: true\n    });\n    isPhysicalProduct(item) ? this.form.submit() : this.submit();\n  }\n\n  async submit() {\n    const formError = this.form.getFieldsError().find(f => f.errors.length);\n    const {\n      onSucess,\n      onError,\n      updateCurrentUserBalance\n    } = this.props;\n    if (formError) return;\n    const {\n      quantity\n    } = this.form.getFieldsValue();\n\n    try {\n      const {\n        type,\n        item\n      } = this.state;\n      await purchaseItemService.purchaseItem(item._id, type, this.form.getFieldsValue());\n\n      if (type === 'product' && item.type === 'digital') {\n        message.success('Please check your email to view the digital product');\n      } else {\n        message.success('Purchased Success');\n      }\n\n      updateCurrentUserBalance && updateCurrentUserBalance(parseInt(item.token, 10) * quantity * -1);\n      onSucess && onSucess(type, item._id, {\n        isBought: true\n      });\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n      onError && onError(error);\n    } finally {\n      this.popup && this.popup.setVisible(false);\n      this.setState({\n        purchasing: false\n      });\n    }\n  }\n\n  showModalBuyAssets(item, type) {\n    this.setState({\n      item,\n      type\n    });\n    this.popup && this.popup.setVisible(true);\n  }\n\n  render() {\n    const {\n      type,\n      item,\n      quantity,\n      purchasing\n    } = this.state;\n    const footer = []; // if (type === 'gallery') {\n    //   footer.push();\n    // }\n\n    return __jsx(Popup, {\n      footer: footer,\n      title: `Buy ${capitalizeFirstLetter(type)}`,\n      okText: \"Purchase\",\n      ref: ref => this.popup = ref,\n      onOk: this.onOk.bind(this),\n      loading: purchasing,\n      content: item && __jsx(React.Fragment, null, __jsx(Form, {\n        initialValues: initialValues,\n        layout: \"vertical\",\n        ref: ref => this.form = ref,\n        onValuesChange: (_, values) => this.setState(values),\n        hidden: !isPhysicalProduct(item),\n        onFinish: this.submit.bind(this),\n        onFinishFailed: () => this.setState({\n          purchasing: false\n        })\n      }, __jsx(Form.Item, {\n        name: \"deliveryAddress\",\n        rules: [{\n          required: true,\n          message: 'Please provide delivery address!'\n        }],\n        label: \"Delivery Address\"\n      }, __jsx(Input, {\n        placeholder: \"Enter your address\"\n      })), __jsx(Form.Item, {\n        name: \"postalCode\",\n        label: \"Postal Code\"\n      }, __jsx(Input, {\n        placeholder: \"Enter your postal code\"\n      })), __jsx(Form.Item, {\n        name: \"quantity\",\n        label: \"Quantity\",\n        rules: [{\n          validator(_, value) {\n            if (parseInt(value, 10) < 1) {\n              return Promise.reject(new Error('Quantity must be positive!'));\n            }\n\n            return Promise.resolve();\n          }\n\n        }]\n      }, __jsx(InputNumber, {\n        placeholder: \"Enter quantity\",\n        style: {\n          width: '100%'\n        }\n      })), __jsx(Form.Item, null, __jsx(\"div\", null, type === 'video' && __jsx(\"strong\", null, \"Available high-res Video\"), type === 'gallery' && __jsx(\"strong\", null, \"Available high-res Image\"), quantity === 1 && __jsx(\"h3\", null, \"Buy this\", __jsx(\"span\", {\n        className: \"color\"\n      }, ' ', item.name || item.title, ' '), \"For\", __jsx(\"span\", {\n        className: \"color\"\n      }, ' ', __jsx(NumberFormat, {\n        value: item.token\n      }), ' '), \"Tokens\"), quantity > 1 && __jsx(\"h3\", null, __jsx(NumberFormat, {\n        value: parseInt(item.token, 10) * quantity,\n        prefix: `Buy x${quantity} ${item.name || item.title} For `,\n        suffix: \" Tokens\"\n      }))))), __jsx(NumberFormat, {\n        hidden: isPhysicalProduct(item),\n        value: parseInt(item.token, 10) * quantity,\n        prefix: `Buy ${item.name || item.title} For `,\n        suffix: \" Tokens\"\n      }))\n    });\n  }\n\n}\n\nexport default ModalBuyAssets;","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/components/performer-assets/common/modal-buy-assets.tsx"],"names":["React","Form","Input","InputNumber","message","Popup","capitalizeFirstLetter","getResponseError","isPhysicalProduct","purchaseItemService","NumberFormat","initialValues","postalCode","deliveryAddress","quantity","ModalBuyAssets","PureComponent","constructor","props","state","type","purchasing","item","undefined","onOk","loggedIn","error","setState","form","submit","formError","getFieldsError","find","f","errors","length","onSucess","onError","updateCurrentUserBalance","getFieldsValue","purchaseItem","_id","success","parseInt","token","isBought","e","Promise","resolve","popup","setVisible","showModalBuyAssets","render","footer","ref","bind","_","values","required","validator","value","reject","Error","width","name","title"],"mappings":"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","sourcesContent":["/* eslint-disable no-return-assign */\nimport React from 'react';\nimport {\n  Form, Input, InputNumber, message\n} from 'antd';\nimport Popup from '@components/common/base/popup';\nimport { FormInstance } from 'antd/lib/form';\nimport './modal-buy-assets.less';\nimport {\n  capitalizeFirstLetter,\n  getResponseError,\n  isPhysicalProduct\n} from 'src/lib';\nimport { purchaseItemService } from 'src/services';\nimport NumberFormat from '@components/common/layout/numberformat';\n\nconst initialValues = {\n  postalCode: '',\n  deliveryAddress: '',\n  quantity: 1\n};\n\ninterface IProps {\n  onSucess?: Function;\n  onError?: Function;\n  loggedIn?: boolean;\n  updateCurrentUserBalance?: Function;\n}\n\ninterface IStates {\n  purchasing: boolean;\n  type?: 'product' | 'video' | 'gallery';\n  deliveryAddress?: string;\n  postalCode?: string;\n  item: any;\n  quantity: number;\n}\n\nclass ModalBuyAssets extends React.PureComponent<React.PropsWithRef<IProps>, IStates> {\n  form: FormInstance;\n\n  popup: any;\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      ...initialValues,\n      type: 'product',\n      purchasing: false,\n      item: undefined\n    };\n  }\n\n  async onOk() {\n    const { loggedIn } = this.props;\n    const { item } = this.state;\n    if (!loggedIn) {\n      message.error('Please login to buy this item!');\n      return;\n    }\n\n    this.setState({ purchasing: true });\n    isPhysicalProduct(item) ? this.form.submit() : this.submit();\n  }\n\n  async submit() {\n    const formError = this.form.getFieldsError().find((f) => f.errors.length);\n    const { onSucess, onError, updateCurrentUserBalance } = this.props;\n    if (formError) return;\n\n    const { quantity } = this.form.getFieldsValue();\n    try {\n      const { type, item } = this.state;\n      await purchaseItemService.purchaseItem(\n        item._id,\n        type,\n        this.form.getFieldsValue()\n      );\n      if (type === 'product' && item.type === 'digital') {\n        message.success('Please check your email to view the digital product');\n      } else {\n        message.success('Purchased Success');\n      }\n      updateCurrentUserBalance\n        && updateCurrentUserBalance(parseInt(item.token, 10) * quantity * -1);\n      onSucess && onSucess(type, item._id, { isBought: true });\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n      onError && onError(error);\n    } finally {\n      this.popup && this.popup.setVisible(false);\n      this.setState({ purchasing: false });\n    }\n  }\n\n  showModalBuyAssets(item, type) {\n    this.setState({ item, type });\n    this.popup && this.popup.setVisible(true);\n  }\n\n  render() {\n    const {\n      type, item, quantity, purchasing\n    } = this.state;\n    const footer = [];\n    // if (type === 'gallery') {\n    //   footer.push();\n    // }\n\n    return (\n      <Popup\n        footer={footer}\n        title={`Buy ${capitalizeFirstLetter(type)}`}\n        okText=\"Purchase\"\n        ref={(ref) => (this.popup = ref)}\n        onOk={this.onOk.bind(this)}\n        loading={purchasing}\n        content={\n          item && (\n            <>\n              <Form\n                initialValues={initialValues}\n                layout=\"vertical\"\n                ref={(ref) => (this.form = ref)}\n                onValuesChange={(_, values: IStates) => this.setState(values)}\n                hidden={!isPhysicalProduct(item)}\n                onFinish={this.submit.bind(this)}\n                onFinishFailed={() => this.setState({ purchasing: false })}\n              >\n                <Form.Item\n                  name=\"deliveryAddress\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please provide delivery address!'\n                    }\n                  ]}\n                  label=\"Delivery Address\"\n                >\n                  <Input placeholder=\"Enter your address\" />\n                </Form.Item>\n                <Form.Item name=\"postalCode\" label=\"Postal Code\">\n                  <Input placeholder=\"Enter your postal code\" />\n                </Form.Item>\n                <Form.Item\n                  name=\"quantity\"\n                  label=\"Quantity\"\n                  rules={[\n                    {\n                      validator(_, value) {\n                        if (parseInt(value, 10) < 1) {\n                          return Promise.reject(\n                            new Error('Quantity must be positive!')\n                          );\n                        }\n                        return Promise.resolve();\n                      }\n                    }\n                  ]}\n                >\n                  <InputNumber\n                    placeholder=\"Enter quantity\"\n                    style={{ width: '100%' }}\n                  />\n                </Form.Item>\n                <Form.Item>\n                  <div>\n                    {type === 'video' && (\n                      <strong>Available high-res Video</strong>\n                    )}\n                    {type === 'gallery' && (\n                      <strong>Available high-res Image</strong>\n                    )}\n                    {quantity === 1 && (\n                      <h3>\n                        {/* <NumberFormat value={item.token} prefix={`Buy this ${item.name || item.title} For `} suffix=\" Tokens\" /> */}\n                        Buy this\n                        <span className=\"color\">\n                          {' '}\n                          {item.name || item.title}\n                          {' '}\n                        </span>\n                        For\n                        <span className=\"color\">\n                          {' '}\n                          <NumberFormat value={item.token} />\n                          {' '}\n                        </span>\n                        Tokens\n                      </h3>\n                    )}\n                    {quantity > 1 && (\n                      <h3>\n                        <NumberFormat\n                          value={parseInt(item.token, 10) * quantity}\n                          prefix={`Buy x${quantity} ${\n                            item.name || item.title\n                          } For `}\n                          suffix=\" Tokens\"\n                        />\n                      </h3>\n                    )}\n                  </div>\n                </Form.Item>\n              </Form>\n              <NumberFormat\n                hidden={isPhysicalProduct(item)}\n                value={parseInt(item.token, 10) * quantity}\n                prefix={`Buy ${item.name || item.title} For `}\n                suffix=\" Tokens\"\n              />\n            </>\n          )\n        }\n      />\n    );\n  }\n}\n\nexport default ModalBuyAssets;\n"]},"metadata":{},"sourceType":"module"}