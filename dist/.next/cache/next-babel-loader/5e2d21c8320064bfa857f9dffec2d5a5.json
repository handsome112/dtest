{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport React, { PureComponent } from 'react';\nimport { orderService } from 'src/services';\nimport { connect } from 'react-redux';\nimport { getResponseError } from '@lib/utils';\nimport Router from 'next/router';\nimport { FormOrder } from 'src/components/order/form-order';\n\nclass ModelOrderDetailPage extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    return ctx.query;\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      order: null,\n      loading: false,\n      isUpdating: false\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  async getData() {\n    const {\n      id\n    } = this.props;\n\n    try {\n      this.setState({\n        loading: true\n      });\n      const order = await orderService.details(id);\n      this.setState({\n        order: order.data\n      });\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(error);\n    } finally {\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  async submit({\n    shippingCode,\n    deliveryStatus\n  }) {\n    const {\n      id\n    } = this.props;\n\n    if (!shippingCode) {\n      message.error('Missing shipping code');\n      return;\n    }\n\n    try {\n      this.setState({\n        isUpdating: true\n      });\n      await orderService.update(id, {\n        deliveryStatus,\n        shippingCode\n      });\n      message.success('Changes saved.');\n      Router.back();\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    } finally {\n      this.setState({\n        isUpdating: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      order,\n      isUpdating,\n      loading\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My Order -\", order && order.orderNumber)), __jsx(PageHeader, {\n      title: \"Order detail\"\n    }), __jsx(FormOrder, {\n      order: order,\n      loading: loading,\n      isUpdating: isUpdating,\n      onFinish: this.submit.bind(this),\n      disableUpdate: (order === null || order === void 0 ? void 0 : order.productType) === 'digital'\n    }));\n  }\n\n}\n\n_defineProperty(ModelOrderDetailPage, \"authenticate\", true);\n\n_defineProperty(ModelOrderDetailPage, \"layout\", 'primary');\n\nconst mapStates = state => ({\n  ui: state.ui\n});\n\nexport default connect(mapStates)(ModelOrderDetailPage);","map":null,"metadata":{},"sourceType":"module"}