{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { message, Tabs, Form, Button, Collapse } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport { connect } from 'react-redux';\nimport { PAYMENT_ACCOUNT } from 'src/interfaces';\nimport Head from 'next/head';\nimport ContactSettingForm from '@components/performer/contact-setting-form';\nimport { WireTransferSettingForm, PaypalSettingFrom, IssueCheckUSSetingForm, DirectDepositSettingForm, BitpaySettigForm, PaxumSettingForm } from '@components/payment';\nimport CommissionCard from '@components/commission/commission-card';\nimport DisableAccountForm from '@components/performer/settings/disable-account-form';\nimport DefaultPriceForm from '@components/performer/settings/default-price-form';\nimport { updatePerformerProfile, updatePaymentInfo, updateDirectDeposit, updateBitpay, updatePaxum, updateDefaultPrice } from 'src/redux/performer/actions';\nimport { updatePassword, logout } from 'src/redux/auth/actions';\nimport { getResponseError } from '@lib/utils';\nimport { performerService, paymentInformationService } from 'src/services';\nimport Router from 'next/router';\nimport PasswordChange from '@components/auth/password-change';\nimport DocumentsSettingForm from '@components/performer/documents-setting-form';\nimport Timezones from '@components/common/base/select/timezones';\nimport { formItemLayout } from '@lib/layout';\nimport BroadcastSetting from '@components/performer/broadcast-setting-form';\nimport './index.less';\nimport { SocketContext } from 'src/socket';\nconst {\n  Panel\n} = Collapse;\n\nclass UserProfilePage extends PureComponent {\n  static getInitialProps({\n    ctx\n  }) {\n    const {\n      query\n    } = ctx;\n    return {\n      action: query.action\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      updatingMaxPearticipantsAllowed: false,\n      paymentInformationKey: '',\n      paymentInformation: {}\n    };\n  }\n\n  componentDidUpdate(prevProps, prevStates) {\n    const {\n      updateSuccess,\n      updateError,\n      auth\n    } = this.props;\n    const {\n      paymentInformationKey\n    } = this.state;\n\n    if (prevProps.updateSuccess !== updateSuccess && updateSuccess) {\n      message.success('Update Profile Success.');\n    }\n\n    if (prevProps.updateError !== updateError && updateError) {\n      message.error(getResponseError(updateError));\n    }\n\n    if (prevProps.auth.updatePassword.success !== auth.updatePassword.success && auth.updatePassword.success) {\n      message.success('Update Password Success.');\n    }\n\n    if (prevProps.auth.updatePassword.error !== auth.updatePassword.error && auth.updatePassword.error) {\n      message.error(getResponseError(auth.updatePassword.error));\n    }\n\n    if (paymentInformationKey && paymentInformationKey !== prevStates.paymentInformationKey) {\n      this.getPaymentInformation();\n    }\n  }\n\n  onFinish(data) {\n    const {\n      performer,\n      updatePerformerProfile: dispatchupdatePerformerProfile\n    } = this.props;\n    dispatchupdatePerformerProfile(_objectSpread(_objectSpread({}, performer), data));\n  }\n\n  onTabsChange(key) {\n    Router.push({\n      pathname: '/account/performer/account-settings',\n      query: {\n        action: key\n      }\n    }, `/account/performer/account-settings?action=${key}`, {\n      shallow: false\n    });\n  }\n\n  async onUpdateBroadcastSetting(data) {\n    const {\n      maxParticipantsAllowed\n    } = data;\n\n    try {\n      this.setState({\n        updatingMaxPearticipantsAllowed: true\n      });\n      await performerService.updateBroadcastSetting({\n        maxParticipantsAllowed\n      });\n      message.success('Update Broadcast Setting Success.');\n    } catch (error) {\n      const err = await Promise.resolve(error);\n      message.error(getResponseError(err));\n    } finally {\n      this.setState({\n        updatingMaxPearticipantsAllowed: false\n      });\n    }\n  }\n\n  onPasswordChange(data) {\n    const {\n      updatePassword: dispatchUpdatePassword\n    } = this.props;\n    dispatchUpdatePassword(_objectSpread(_objectSpread({}, data), {}, {\n      source: 'performer'\n    }));\n  }\n\n  onUpdateDefaultPrice(data) {\n    const {\n      updateDefaultPrice: dispatchUpdateDefaultPrice\n    } = this.props;\n    dispatchUpdateDefaultPrice(data);\n  }\n\n  async onSuspendAccount(data) {\n    try {\n      const {\n        logout: dispatchLogout\n      } = this.props;\n      const {\n        password\n      } = data;\n      await performerService.suspendAccount(password);\n      const socket = this.context;\n\n      if (socket) {\n        socket.disconnect();\n      }\n\n      dispatchLogout();\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    }\n\n    return undefined;\n  }\n\n  onPaymentInformationChange(key) {\n    this.setState({\n      paymentInformationKey: key\n    });\n  }\n\n  async getPaymentInformation() {\n    const {\n      paymentInformationKey\n    } = this.state;\n    paymentInformationService.findOne({\n      type: paymentInformationKey\n    }).then(resp => this.setState({\n      paymentInformation: {\n        [paymentInformationKey]: resp.data\n      }\n    }));\n  }\n\n  async submitPaymentInfoForm(data) {\n    try {\n      const {\n        paymentInformationKey\n      } = this.state;\n      const resp = await paymentInformationService.create(_objectSpread({\n        type: paymentInformationKey\n      }, data));\n      this.setState({\n        paymentInformation: {\n          [paymentInformationKey]: resp.data\n        }\n      });\n      message.success('Update Payment Information Success');\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    }\n  }\n\n  render() {\n    const {\n      performer,\n      action,\n      auth,\n      updating,\n      countries\n    } = this.props;\n    const {\n      updatingMaxPearticipantsAllowed,\n      paymentInformation\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Account Settings\")), __jsx(\"div\", {\n      className: \"account-setting-page\"\n    }, __jsx(PageHeader, {\n      title: \"Account Settings\"\n    }), __jsx(Tabs, {\n      defaultActiveKey: action || 'commission',\n      style: {\n        padding: '0 24px'\n      },\n      size: \"large\",\n      onChange: this.onTabsChange.bind(this)\n    }, __jsx(Tabs.TabPane, {\n      tab: \"Commission\",\n      key: \"commission\"\n    }, __jsx(CommissionCard, null)), __jsx(Tabs.TabPane, {\n      tab: \"Default Price\",\n      key: \"default-price\"\n    }, __jsx(DefaultPriceForm, _extends({}, performer, {\n      loading: updating,\n      onFinish: this.onUpdateDefaultPrice.bind(this)\n    }))), __jsx(Tabs.TabPane, {\n      tab: \"Documents\",\n      key: \"documents\"\n    }, __jsx(DocumentsSettingForm, {\n      loading: updating,\n      onFinish: this.onFinish.bind(this),\n      performer: performer\n    })), __jsx(Tabs.TabPane, {\n      tab: \"Contact Setting\",\n      key: \"contact-settings\"\n    }, __jsx(ContactSettingForm, _extends({}, performer, {\n      onFinish: this.onFinish.bind(this),\n      loading: updating,\n      countries: countries\n    }))), __jsx(Tabs.TabPane, {\n      tab: \"Broadcast Setting\",\n      key: \"broadcast-settings\"\n    }, __jsx(BroadcastSetting, {\n      maxParticipantsAllowed: performer.maxParticipantsAllowed,\n      onFinish: this.onUpdateBroadcastSetting.bind(this),\n      loading: updatingMaxPearticipantsAllowed\n    })), __jsx(Tabs.TabPane, {\n      tab: \"Payment Information\",\n      key: \"paymentInfo\"\n    }, __jsx(Collapse, {\n      accordion: true,\n      onChange: this.onPaymentInformationChange.bind(this)\n    }, __jsx(Panel, {\n      header: \"Wire Transfer (Free)\",\n      key: \"wire\",\n      forceRender: true\n    }, __jsx(WireTransferSettingForm, {\n      paymentInformation: paymentInformation.wire,\n      loading: updating,\n      onFinish: this.submitPaymentInfoForm.bind(this)\n    })), __jsx(Panel, {\n      header: \"Paypal\",\n      key: \"paypal\",\n      forceRender: true\n    }, __jsx(PaypalSettingFrom, {\n      paymentInformation: paymentInformation.paypal,\n      loading: updating,\n      onFinish: this.submitPaymentInfoForm.bind(this)\n    })), __jsx(Panel, {\n      header: \"Issue Check (U.S only)\",\n      key: \"issue_check_us\",\n      forceRender: true\n    }, __jsx(IssueCheckUSSetingForm, {\n      paymentInformation: paymentInformation.issue_check_us,\n      loading: updating,\n      onFinish: this.submitPaymentInfoForm.bind(this)\n    })), __jsx(Panel, {\n      header: \"Direct Deposit\",\n      key: \"deposit\",\n      forceRender: true\n    }, __jsx(DirectDepositSettingForm, {\n      paymentInformation: paymentInformation.deposit,\n      loading: updating,\n      onFinish: this.submitPaymentInfoForm.bind(this)\n    })), __jsx(Panel, {\n      header: \"Paxum\",\n      key: PAYMENT_ACCOUNT.PAXUM,\n      forceRender: true\n    }, __jsx(PaxumSettingForm, {\n      paymentInformation: paymentInformation[PAYMENT_ACCOUNT.PAXUM],\n      loading: updating,\n      onFinish: this.submitPaymentInfoForm.bind(this)\n    })), __jsx(Panel, {\n      header: \"Bitpay\",\n      key: PAYMENT_ACCOUNT.BITPAY,\n      forceRender: true\n    }, __jsx(BitpaySettigForm, {\n      paymentInformation: paymentInformation[PAYMENT_ACCOUNT.BITPAY],\n      loading: updating,\n      onFinish: this.submitPaymentInfoForm.bind(this)\n    })))), __jsx(Tabs.TabPane, {\n      key: \"timezone\",\n      tab: \"Timezone\"\n    }, __jsx(\"h3\", null, \"Sometimes the timezone is very important so make sure you alway set up it correctly. We will contact you taking into consideration the time zone and so may the performer do!\"), __jsx(Form, _extends({\n      onFinish: this.onFinish.bind(this),\n      layout: \"vertical\",\n      initialValues: {\n        timezone: performer.timezone\n      }\n    }, formItemLayout), __jsx(Form.Item, {\n      name: \"timezone\",\n      key: \"timezone\",\n      label: \"Timezone\",\n      rules: [{\n        required: true,\n        message: 'Please input your timezone!'\n      }]\n    }, __jsx(Timezones, null)), __jsx(Form.Item, null, __jsx(Button, {\n      type: \"primary\",\n      disabled: updating,\n      loading: updating,\n      htmlType: \"submit\"\n    }, \"Save Changes\")))), __jsx(Tabs.TabPane, {\n      tab: \"Disable Account\",\n      key: \"disable-account\"\n    }, __jsx(DisableAccountForm, {\n      loading: updating,\n      onFinish: this.onSuspendAccount.bind(this)\n    })), __jsx(Tabs.TabPane, {\n      key: \"change-password\",\n      tab: \"Change Password\"\n    }, __jsx(PasswordChange, _extends({\n      onFinish: this.onPasswordChange.bind(this)\n    }, auth.updatePassword))))));\n  }\n\n}\n\n_defineProperty(UserProfilePage, \"authenticate\", true);\n\n_defineProperty(UserProfilePage, \"layout\", 'primary');\n\nUserProfilePage.contextType = SocketContext;\n\nconst mapStateToProps = state => ({\n  performer: state.performer.current,\n  updating: state.performer.updating,\n  updateSuccess: state.performer.updateSuccess,\n  updateError: state.performer.updateError,\n  countries: state.settings.countries,\n  auth: state.auth\n});\n\nconst mapDispatch = {\n  updatePerformerProfile,\n  logout,\n  updatePaymentInfo,\n  updatePassword,\n  updateDirectDeposit,\n  updateBitpay,\n  updatePaxum,\n  updateDefaultPrice\n};\nexport default connect(mapStateToProps, mapDispatch)(UserProfilePage);","map":null,"metadata":{},"sourceType":"module"}