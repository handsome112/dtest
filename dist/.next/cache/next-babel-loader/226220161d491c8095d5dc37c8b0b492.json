{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport React, { PureComponent } from 'react';\nimport { transactionService } from 'src/services';\nimport { getResponseError, getSearchData } from '@lib/utils';\nimport Loader from 'src/components/common/base/loader';\nimport { TransactionHistoryTable } from 'src/components/transaction/table-list';\nimport './index.less';\n\nclass TransactionHistoryPage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      transaction: [],\n      limit: 10,\n      total: 0,\n      offset: 0,\n      sortBy: 'createdAt',\n      sort: 'desc',\n      filter: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  async onChange(pagination, filters, sorter) {\n    const oldState = this.state;\n    await this.setState(getSearchData(pagination, filters, sorter, oldState));\n    this.getData();\n  }\n\n  async getData() {\n    const {\n      filter,\n      limit,\n      offset,\n      sortBy,\n      sort\n    } = this.state;\n\n    try {\n      const resp = await transactionService.search(_objectSpread(_objectSpread({}, filter), {}, {\n        limit,\n        offset,\n        sortBy,\n        sort\n      }));\n      await this.setState({\n        transaction: resp.data.data,\n        total: resp.data.total\n      });\n    } catch (e) {\n      const err = Promise.resolve(e);\n      message.error(getResponseError(err));\n    } finally {\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      loading,\n      transaction,\n      total,\n      limit\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Transaction History\")), __jsx(\"div\", {\n      className: \"transaction-history-page\"\n    }, __jsx(PageHeader, {\n      title: \"Transaction History\"\n    }), __jsx(\"div\", null, loading ? __jsx(Loader, null) : __jsx(TransactionHistoryTable, {\n      rowKey: \"_id\",\n      transactions: transaction,\n      pageSize: limit,\n      total: total,\n      onChange: this.onChange.bind(this)\n    }))));\n  }\n\n}\n\n_defineProperty(TransactionHistoryPage, \"authenticate\", true);\n\n_defineProperty(TransactionHistoryPage, \"layout\", 'primary');\n\nexport default TransactionHistoryPage;","map":null,"metadata":{},"sourceType":"module"}