{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Row, Col, message, List } from 'antd';\nimport Router from 'next/router';\nimport PrivateChatContainer from '@components/streaming/private-streaming-container';\nimport Header from '@components/streaming/header';\nimport Footer from '@components/streaming/footer';\nimport { performerService, streamService, transactionService } from 'src/services';\nimport { connect } from 'react-redux';\nimport { getStreamConversationSuccess, resetStreamMessage } from '@redux/stream-chat/actions';\nimport { updateCurrentUserBalance } from '@redux/user/actions';\nimport { SocketContext, Event } from 'src/socket';\nimport nextCookie from 'next-cookies';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport { getResponseError } from '@lib/utils';\nimport './index.less';\nimport { StatusCodes } from 'http-status-codes'; // eslint-disable-next-line no-shadow\n\nvar EVENT;\n\n(function (EVENT) {\n  EVENT[\"JOINED_THE_ROOM\"] = \"JOINED_THE_ROOM\";\n  EVENT[\"JOIN_ROOM\"] = \"JOIN_ROOM\";\n  EVENT[\"LEAVE_ROOM\"] = \"LEAVE_ROOM\";\n  EVENT[\"STREAM_INFORMATION_CHANGED\"] = \"private-stream/streamInformationChanged\";\n  EVENT[\"MODEL_JOIN_ROOM\"] = \"MODEL_JOIN_ROOM\";\n  EVENT[\"SEND_PAID_TOKEN\"] = \"SEND_PAID_TOKEN\";\n})(EVENT || (EVENT = {}));\n\nconst ListItem = ({\n  description,\n  title\n}) => __jsx(List.Item, null, __jsx(Row, {\n  style: {\n    width: '100%'\n  }\n}, __jsx(Col, {\n  className: \"light-text\",\n  sm: {\n    span: 6\n  },\n  xs: {\n    span: 12\n  }\n}, title), __jsx(Col, {\n  style: {\n    fontWeight: 'bold'\n  },\n  sm: {\n    span: 18\n  },\n  xs: {\n    span: 12\n  }\n}, description)));\n\nclass UserPrivateChat extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    try {\n      const {\n        query\n      } = ctx;\n\n      if (false && query.performer) {\n        return {\n          performer: JSON.parse(query.performer)\n        };\n      }\n\n      const {\n        token\n      } = nextCookie(ctx);\n      const headers = {\n        Authorization: token\n      };\n      const resp = await performerService.details(query.username, headers);\n      const performer = resp.data;\n\n      if (performer.isBlocked) {\n        throw StatusCodes.FORBIDDEN;\n      }\n\n      return {\n        performer\n      };\n    } catch (e) {\n      // const err = await Promise.resolve(e);\n      if (false) {\n        return Router.push('/');\n      }\n\n      ctx.res.writeHead && ctx.res.writeHead(302, {\n        Location: '/'\n      });\n      ctx.res.end && ctx.res.end();\n      return {};\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"streamRef\", void 0);\n\n    _defineProperty(this, \"interval\", void 0);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      this.leaveSession();\n    });\n\n    this.state = {\n      roomJoined: false,\n      total: 0,\n      callTime: 0,\n      paidToken: 0,\n      members: []\n    };\n  }\n\n  componentDidMount() {\n    this.socket = this.context;\n    window.addEventListener('beforeunload', this.onbeforeunload);\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n  }\n\n  handler({\n    total,\n    members,\n    conversationId\n  }) {\n    var _activeConversation$d;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n      this.setState({\n        total,\n        members\n      });\n    }\n  }\n\n  async handleModelJoinRoom({\n    conversationId\n  }) {\n    var _activeConversation$d2;\n\n    const {\n      activeConversation,\n      performer,\n      user\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d2 = activeConversation.data) === null || _activeConversation$d2 === void 0 ? void 0 : _activeConversation$d2._id) === conversationId) {\n      message.success('Model joined the room!');\n\n      if (user.balance < performer.privateCallPrice) {\n        message.warn('Your balance is not enough token.');\n        setTimeout(() => window.location.reload(), 5 * 1000);\n      } else {\n        this.interval = setInterval(() => {\n          const {\n            callTime\n          } = this.state;\n          this.setState({\n            callTime: callTime + 1\n          });\n          this.sendPaidToken(conversationId);\n        }, 60 * 1000);\n      }\n    }\n  }\n\n  leaveSession() {\n    const {\n      activeConversation,\n      resetStreamMessage: dispatchResetStreamMessage\n    } = this.props;\n    dispatchResetStreamMessage();\n\n    if (this.socket && activeConversation && activeConversation.data) {\n      this.socket.emit(EVENT.LEAVE_ROOM, {\n        conversationId: activeConversation.data._id\n      });\n    }\n\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n\n    this.setState({\n      roomJoined: false,\n      total: 0,\n      members: []\n    });\n  }\n\n  async sendRequest() {\n    const {\n      performer,\n      getStreamConversationSuccess: dispatchGetStreamConversationSuccess\n    } = this.props;\n\n    try {\n      const resp = await streamService.requestPrivateChat(performer._id);\n      const {\n        sessionId,\n        conversation\n      } = resp.data;\n      this.socket = this.context;\n      message.success('Private request has been sent!');\n      this.streamRef && this.streamRef.start(sessionId, conversation._id);\n      this.socket.emit(EVENT.JOIN_ROOM, {\n        conversationId: conversation._id\n      });\n      dispatchGetStreamConversationSuccess({\n        data: conversation\n      });\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    }\n  }\n\n  roomJoinedHandler({\n    total,\n    members,\n    conversationId\n  }) {\n    var _activeConversation$d3;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d3 = activeConversation.data) === null || _activeConversation$d3 === void 0 ? void 0 : _activeConversation$d3._id) === conversationId) {\n      this.setState({\n        total,\n        members,\n        roomJoined: true,\n        callTime: 0\n      });\n    }\n  }\n\n  stopBroadcast() {\n    this.streamRef && this.streamRef.stop();\n    setTimeout(() => {\n      window.location.href = '/';\n    }, 5 * 1000);\n  }\n\n  async sendPaidToken(conversationId) {\n    try {\n      const {\n        performer,\n        updateCurrentUserBalance: dispatchUpdateBalance\n      } = this.props;\n      const {\n        paidToken\n      } = this.state;\n      await transactionService.sendPaidToken(conversationId);\n      const newState = {\n        paidToken: paidToken + performer.privateCallPrice\n      };\n      this.setState(newState);\n      dispatchUpdateBalance(performer.privateCallPrice * -1);\n    } catch (err) {\n      const error = await Promise.resolve(err);\n\n      if (error.statusCode === 400) {\n        message.error('Your tokens do not enough, please buy more.');\n        clearInterval(this.interval);\n        this.stopBroadcast();\n      }\n    }\n  }\n\n  render() {\n    const {\n      performer\n    } = this.props;\n    const {\n      total,\n      members,\n      roomJoined,\n      callTime,\n      paidToken\n    } = this.state;\n    const dataSource = [{\n      title: 'Call time',\n      description: `${callTime} minute(s)`\n    }, {\n      title: 'Status',\n      description: roomJoined ? 'Live' : ''\n    }, {\n      title: 'Paid Token',\n      description: `${paidToken} token(s)`\n    }, {\n      title: 'Token per minute',\n      description: `${performer.privateCallPrice} token(s)` || 'N/A'\n    }];\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Private Chat\")), __jsx(Event, {\n      event: EVENT.STREAM_INFORMATION_CHANGED,\n      handler: this.handler.bind(this)\n    }), __jsx(Event, {\n      event: EVENT.JOINED_THE_ROOM,\n      handler: this.roomJoinedHandler.bind(this)\n    }), __jsx(Event, {\n      event: EVENT.MODEL_JOIN_ROOM,\n      handler: this.handleModelJoinRoom.bind(this)\n    }), __jsx(React.Fragment, null, __jsx(Header, this.props), __jsx(Row, null, __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(PrivateChatContainer, {\n      ref: ref => {\n        this.streamRef = ref;\n      },\n      configs: {\n        localVideoId: 'private-publisher'\n      },\n      onClick: this.sendRequest.bind(this)\n    }), __jsx(Footer, _extends({}, this.props, {\n      inPrivateChat: true\n    })), __jsx(List, {\n      dataSource: dataSource,\n      renderItem: item => __jsx(ListItem, {\n        description: item.description,\n        title: item.title\n      })\n    })), __jsx(Col, {\n      lg: 12,\n      xs: 24,\n      md: 12\n    }, __jsx(ChatBox, _extends({}, this.props, {\n      totalParticipant: total,\n      members: members\n    }))))));\n  }\n\n}\n\n_defineProperty(UserPrivateChat, \"authenticate\", true);\n\nUserPrivateChat.contextType = SocketContext;\n\nconst mapStateToProps = state => _objectSpread(_objectSpread({}, state.streaming), {}, {\n  ui: state.ui,\n  user: state.user.current,\n  loggedIn: state.auth.loggedIn,\n  activeConversation: state.streamMessage.activeConversation\n});\n\nconst mapDispatchs = {\n  getStreamConversationSuccess,\n  resetStreamMessage,\n  updateCurrentUserBalance\n};\nexport default connect(mapStateToProps, mapDispatchs)(UserPrivateChat);","map":null,"metadata":{},"sourceType":"module"}