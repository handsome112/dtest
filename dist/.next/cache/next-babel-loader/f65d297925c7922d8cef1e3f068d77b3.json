{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/dtest.live/pages/account/user/account-settings/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport { message, Tabs } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport { connect } from 'react-redux';\nimport UserProfile from '@components/user/profile';\nimport Head from 'next/head';\nimport { settingService } from 'src/services/setting.service';\nimport { userService } from 'src/services/user.service';\nimport { updateUser } from 'src/redux/user/actions';\nimport { updatePassword } from 'src/redux/auth/actions';\nimport { getResponseError } from '@lib/utils';\nimport Router from 'next/router';\nimport PasswordChange from '@components/auth/password-change';\nimport './index.less';\n\nvar UserProfilePage = /*#__PURE__*/function (_PureComponent) {\n  _inherits(UserProfilePage, _PureComponent);\n\n  var _super = _createSuper(UserProfilePage);\n\n  function UserProfilePage(props) {\n    var _this;\n\n    _classCallCheck(this, UserProfilePage);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      countries: [],\n      uploadedAvatar: '',\n      avatarUploading: false\n    };\n    return _this;\n  }\n\n  _createClass(UserProfilePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var action = this.props.action;\n      if (!action || action === 'account-information') this.getCountries();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          success = _this$props.success,\n          updateUserError = _this$props.updateUserError,\n          auth = _this$props.auth,\n          action = _this$props.action;\n      var countries = this.state.countries;\n\n      if (prevProps.success !== success && success) {\n        message.success('Update Profile Success.');\n      }\n\n      if (prevProps.updateUserError !== updateUserError && updateUserError) {\n        message.error(getResponseError(updateUserError));\n      }\n\n      if (prevProps.auth.updatePassword.success !== auth.updatePassword.success && auth.updatePassword.success) {\n        message.success('Update Password Success.');\n      }\n\n      if (prevProps.auth.updatePassword.error !== auth.updatePassword.error && auth.updatePassword.error) {\n        message.error(getResponseError(auth.updatePassword.error));\n      }\n\n      if (!countries.length && action === 'account-information') {\n        this.getCountries();\n      }\n    }\n  }, {\n    key: \"onFinish\",\n    value: function onFinish(data) {\n      var _this$props2 = this.props,\n          user = _this$props2.user,\n          dispatchUpdateUser = _this$props2.updateUser;\n      dispatchUpdateUser(_objectSpread(_objectSpread({}, user), data));\n    }\n  }, {\n    key: \"onChangeAvatar\",\n    value: function onChangeAvatar(_ref) {\n      var file = _ref.file;\n\n      if (file.status === 'uploading') {\n        this.setState({\n          avatarUploading: true\n        });\n        return;\n      }\n\n      if (file.status === 'done') {\n        this.setState({\n          avatarUploading: false\n        });\n\n        if (file.response) {\n          this.setState({\n            uploadedAvatar: file.response.data.url\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onTabsChange\",\n    value: function onTabsChange(key) {\n      Router.push({\n        pathname: '/account/user/account-settings',\n        query: {\n          action: key\n        }\n      }, \"/account/user/account-settings?action=\".concat(key), {\n        shallow: false\n      });\n    }\n  }, {\n    key: \"onPasswordChange\",\n    value: function onPasswordChange(data) {\n      var dispatchUpdatePassword = this.props.updatePassword;\n      dispatchUpdatePassword(data);\n    }\n  }, {\n    key: \"getCountries\",\n    value: function () {\n      var _getCountries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var countries;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return settingService.getCountries();\n\n              case 3:\n                countries = _context.sent;\n                this.setState({\n                  countries: countries.data\n                });\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                message.error(getResponseError(_context.t0));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      function getCountries() {\n        return _getCountries.apply(this, arguments);\n      }\n\n      return getCountries;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          user = _this$props3.user,\n          action = _this$props3.action,\n          auth = _this$props3.auth,\n          userUpdating = _this$props3.userUpdating;\n      var _this$state = this.state,\n          countries = _this$state.countries,\n          uploadedAvatar = _this$state.uploadedAvatar,\n          avatarUploading = _this$state.avatarUploading;\n      return __jsx(React.Fragment, null, __jsx(Head, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }\n      }, __jsx(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      }, \"\".concat(user.username, \" Profile\"))), __jsx(\"div\", {\n        className: \"account-setting-page\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }\n      }, __jsx(PageHeader, {\n        title: \"Account Settings\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }\n      }), __jsx(Tabs, {\n        activeKey: action || 'account-information',\n        style: {\n          padding: '0 24px'\n        },\n        size: \"large\",\n        onChange: this.onTabsChange.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }\n      }, __jsx(Tabs.TabPane, {\n        tab: \"Account Information\",\n        key: \"account-information\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, __jsx(UserProfile, _extends({}, user, {\n        onFinish: this.onFinish.bind(this),\n        countries: countries,\n        onChangeAvatar: this.onChangeAvatar.bind(this),\n        uploadAvatarUrl: userService.getAvatarUploadUrl(),\n        uploadedAvatar: uploadedAvatar,\n        avatarUploading: avatarUploading,\n        loading: userUpdating,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }\n      }))), __jsx(Tabs.TabPane, {\n        key: \"change-password\",\n        tab: \"Change Password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }\n      }, __jsx(PasswordChange, _extends({\n        onFinish: this.onPasswordChange.bind(this)\n      }, auth.updatePassword, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }\n      }))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref2) {\n      var ctx = _ref2.ctx;\n      var query = ctx.query;\n      return {\n        action: query.action\n      };\n    }\n  }]);\n\n  return UserProfilePage;\n}(PureComponent);\n\n_defineProperty(UserProfilePage, \"authenticate\", true);\n\n_defineProperty(UserProfilePage, \"layout\", 'primary');\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user.current,\n    userUpdating: state.user.userUpdating,\n    success: state.user.updateUserSuccess,\n    updateUserError: state.user.updateUserError,\n    auth: state.auth\n  };\n};\n\nvar mapDispatch = {\n  updateUser: updateUser,\n  updatePassword: updatePassword\n};\nexport default connect(mapStateToProps, mapDispatch)(UserProfilePage);","map":null,"metadata":{},"sourceType":"module"}