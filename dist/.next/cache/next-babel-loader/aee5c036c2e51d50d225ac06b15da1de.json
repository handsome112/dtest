{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { Row, Col, Drawer, Button, Menu, Space } from 'antd';\nimport { FilterOutlined } from '@ant-design/icons';\nimport classnames from 'classnames';\nimport './performer-filter.less';\n\nvar PerformerFilter = function PerformerFilter(_ref) {\n  var countries = _ref.countries,\n      categories = _ref.categories,\n      setFilter = _ref.setFilter,\n      category = _ref.category,\n      country = _ref.country,\n      gender = _ref.gender,\n      clearFilter = _ref.clearFilter;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedMenuKeys = _React$useState4[0],\n      setSelectedMenuKeys = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      lastSelectedMenuKey = _React$useState6[0],\n      setLastSelectedMenuKey = _React$useState6[1];\n\n  var onOpenChange = function onOpenChange(keys) {\n    var menuKeys = keys.filter(function (key) {\n      return key !== lastSelectedMenuKey;\n    });\n    setSelectedMenuKeys(menuKeys);\n    setLastSelectedMenuKey(menuKeys[0]);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Row, {\n    align: \"middle\",\n    className: \"performer-filter\",\n    justify: \"space-between\"\n  }, __jsx(Col, null, __jsx(Button, {\n    icon: __jsx(FilterOutlined, null),\n    type: \"primary\",\n    onClick: function onClick() {\n      return setVisible(true);\n    },\n    className: \"mr-8\"\n  }, \"Filter\"), __jsx(Space, {\n    className: \"ant-space-wrap\"\n  }, __jsx(\"span\", {\n    style: {\n      fontWeight: 'bold'\n    }\n  }, \"Popular Filter:\"), __jsx(Button, {\n    onClick: clearFilter,\n    className: classnames(gender === '' ? 'active' : ''),\n    type: \"dashed\"\n  }, \"All\"), __jsx(Button, {\n    onClick: function onClick() {\n      return setFilter('gender', gender === 'female' ? '' : 'female');\n    },\n    className: classnames(gender === 'female' ? 'active' : ''),\n    type: \"dashed\"\n  }, \"Female\"), __jsx(Button, {\n    onClick: function onClick() {\n      return setFilter('gender', gender === 'transgender' ? '' : 'transgender');\n    },\n    className: classnames(gender === 'transgender' ? 'active' : ''),\n    type: \"dashed\"\n  }, \"Transgender\"), __jsx(Button, {\n    onClick: function onClick() {\n      return setFilter('gender', gender === 'male' ? '' : 'male');\n    },\n    className: classnames(gender === 'male' ? 'active' : ''),\n    type: \"dashed\"\n  }, \"Male\")))), __jsx(Drawer, {\n    visible: visible,\n    placement: \"left\",\n    onClose: function onClose() {\n      return setVisible(false);\n    },\n    title: __jsx(Row, {\n      justify: \"space-between\",\n      align: \"middle\"\n    }, __jsx(Col, null, \"Filter by:\"), __jsx(Col, null, __jsx(Button, {\n      type: \"link\",\n      onClick: function onClick() {\n        return clearFilter();\n      },\n      size: \"small\",\n      style: {\n        marginRight: 10\n      }\n    }, \"Clear Filter\")))\n  }, __jsx(Menu, {\n    mode: \"inline\",\n    style: {\n      borderRight: 0\n    },\n    multiple: false,\n    onSelect: function onSelect(_ref2) {\n      var key = _ref2.key;\n      return setFilter('category', key);\n    },\n    onDeselect: function onDeselect() {\n      return setFilter('category', '');\n    },\n    selectedKeys: [category],\n    openKeys: selectedMenuKeys,\n    onOpenChange: onOpenChange\n  }, __jsx(Menu.SubMenu, {\n    title: \"Category\",\n    key: \"category\"\n  }, categories.length > 0 && categories.map(function (c) {\n    return __jsx(Menu.Item, {\n      key: c._id\n    }, c.name);\n  }))), __jsx(Menu, {\n    mode: \"inline\",\n    style: {\n      borderRight: 0\n    },\n    onSelect: function onSelect(_ref3) {\n      var key = _ref3.key;\n      return setFilter('gender', key);\n    },\n    onDeselect: function onDeselect() {\n      return setFilter('gender', '');\n    },\n    selectedKeys: [gender],\n    openKeys: selectedMenuKeys,\n    onOpenChange: onOpenChange\n  }, __jsx(Menu.SubMenu, {\n    title: \"Gender\",\n    key: \"gender\"\n  }, __jsx(Menu.Item, {\n    key: \"female\"\n  }, \"Female\"), __jsx(Menu.Item, {\n    key: \"transgender\"\n  }, \"Transgender\"), __jsx(Menu.Item, {\n    key: \"male\"\n  }, \"Male\"))), __jsx(Menu, {\n    mode: \"inline\",\n    style: {\n      borderRight: 0\n    },\n    multiple: false,\n    onSelect: function onSelect(_ref4) {\n      var key = _ref4.key;\n      return setFilter('country', key);\n    },\n    onDeselect: function onDeselect() {\n      return setFilter('country', '');\n    },\n    selectedKeys: [country],\n    openKeys: selectedMenuKeys,\n    onOpenChange: onOpenChange\n  }, __jsx(Menu.SubMenu, {\n    title: \"Country\",\n    key: \"country\"\n  }, countries.length > 0 && countries.map(function (c) {\n    return __jsx(Menu.Item, {\n      key: c.name\n    }, c.name);\n  })))));\n};\n\nPerformerFilter.defaultProps = {\n  countries: [],\n  categories: [],\n  // offset: 0,\n  // limit: 0,\n  gender: '',\n  category: '',\n  country: ''\n};\nexport default PerformerFilter;","map":null,"metadata":{},"sourceType":"module"}