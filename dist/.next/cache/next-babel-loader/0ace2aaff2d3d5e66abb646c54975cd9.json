{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { Card, Space, Row, Col, Pagination } from 'antd';\nimport { MaleSignIcon, FemaleSignIcon, TransgenderIcon } from '@components/common/base/icons';\nimport { createSelector, generateUuid } from 'src/lib';\nimport { HeartFilled, HeartOutlined, EyeOutlined, LockOutlined } from '@ant-design/icons';\nimport './index.less';\nimport { chunk } from 'lodash';\nimport Banner from '@components/common/layout/banner';\nimport Loader from '@components/common/base/loader';\nimport { connect } from 'react-redux';\n\nconst renderTitle = (gender, name) => __jsx(\"div\", {\n  className: \"p-title\"\n}, __jsx(\"span\", {\n  style: {\n    marginRight: 5\n  }\n}, name), gender === 'male' ? __jsx(\"span\", {\n  className: \"anticon\"\n}, __jsx(MaleSignIcon, null)) : gender === 'female' ? __jsx(\"span\", {\n  className: \"anticon\"\n}, __jsx(FemaleSignIcon, null)) : __jsx(\"span\", {\n  className: \"anticon\"\n}, __jsx(TransgenderIcon, null)));\n\nconst renderTags = tags => __jsx(Space, {\n  className: \"tags\",\n  wrap: true,\n  size: [5, 2]\n}, tags.map(tag => __jsx(Link, {\n  href: {\n    pathname: '/tag',\n    query: {\n      tags: tag\n    }\n  },\n  key: tag,\n  as: `/tag/${tag}`\n}, __jsx(\"a\", null, \"#\", tag))));\n\nexport const GridCard = ({\n  performer,\n  loggedIn,\n  onLike,\n  className,\n  placeholderAvatarUrl\n}) => {\n  var _performer$stats;\n\n  const {\n    isOnline,\n    streamingStatus\n  } = performer;\n  const statusClassNames = ['p-status'];\n  let status = 'offline';\n\n  if (isOnline) {\n    switch (streamingStatus) {\n      case 'private':\n        statusClassNames.push('private');\n        status = 'private chat';\n        break;\n\n      case 'group':\n        statusClassNames.push('group');\n        status = 'group chat';\n        break;\n\n      case 'public':\n        status = 'live';\n        statusClassNames.push('online');\n        break;\n\n      default:\n        status = 'online';\n        statusClassNames.push('online');\n        break;\n    }\n  } else {\n    statusClassNames.push('offline');\n  }\n\n  const defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n  return __jsx(Card.Grid, {\n    className: className,\n    key: performer._id,\n    hoverable: false\n  }, performer.isBlocked && __jsx(\"div\", {\n    className: \"blocked-thumb\"\n  }, __jsx(LockOutlined, null)), __jsx(Link, {\n    href: {\n      pathname: '/stream',\n      query: {\n        performer: JSON.stringify(performer)\n      }\n    },\n    as: `/profile/${performer.username}`\n  }, __jsx(\"a\", null, __jsx(\"div\", {\n    className: \"performer-avatar\"\n  }, __jsx(\"img\", {\n    className: \"image-performer\",\n    src: typeof performer.avatar === 'string' && performer.avatar.length > 0 ? performer.avatar : defaultPlaceholderAvatarUrl,\n    alt: \"\"\n  }), __jsx(\"span\", {\n    className: statusClassNames.join(' ')\n  }, status), renderTitle(performer.gender, performer.username), (performer === null || performer === void 0 ? void 0 : (_performer$stats = performer.stats) === null || _performer$stats === void 0 ? void 0 : _performer$stats.views) > 0 && __jsx(\"div\", {\n    className: \"p-viewer\"\n  }, __jsx(EyeOutlined, {\n    style: {\n      marginRight: 5\n    }\n  }), __jsx(\"span\", null, performer.stats.views))))), __jsx(\"div\", {\n    className: \"performer-bottom\"\n  }, __jsx(Row, {\n    justify: \"space-between\"\n  }, __jsx(Col, null, __jsx(\"div\", null, performer.tags && renderTags(performer.tags))), __jsx(Col, null, __jsx(\"div\", {\n    \"aria-hidden\": true,\n    hidden: !loggedIn,\n    className: \"p-favorite\",\n    onClick: () => onLike(performer)\n  }, performer.isFavorite ? __jsx(HeartFilled, {\n    className: \"icon\"\n  }) : __jsx(HeartOutlined, {\n    className: \"icon\"\n  })))), __jsx(\"div\", {\n    className: \"about-me\"\n  }, performer === null || performer === void 0 ? void 0 : performer.aboutMe)));\n};\n\nconst PerformerGrid = ({\n  data,\n  searching,\n  success,\n  title,\n  onLike,\n  loggedIn,\n  isPage,\n  offset,\n  limit,\n  total,\n  setFilter,\n  placeholderAvatarUrl,\n  banners,\n  render\n}) => {\n  const {\n    topBanners,\n    rightBanners,\n    bottomBanners\n  } = banners;\n\n  const RowGrid = ({\n    dataSource\n  }) => __jsx(Row, {\n    style: {\n      width: '100%'\n    }\n  }, dataSource && dataSource.length > 0 && dataSource.map(performer => __jsx(GridCard, {\n    placeholderAvatarUrl: placeholderAvatarUrl,\n    className: \"performer-box\",\n    key: performer._id,\n    performer: performer,\n    loggedIn: loggedIn,\n    onLike: onLike\n  })));\n\n  const renderGrid = () => {\n    const {\n      length\n    } = data;\n\n    if (length <= 12) {\n      return __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, rightBanners && rightBanners.length > 0 ? __jsx(React.Fragment, null, __jsx(Col, {\n        lg: 16,\n        md: 16,\n        xs: 24\n      }, __jsx(Row, null, data && data.length > 0 && data.map(performer => __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: () => onLike(performer)\n      })))), __jsx(Col, {\n        lg: 8,\n        md: 8,\n        xs: 24\n      }, __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))) : data && data.length > 0 && data.map(performer => __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: () => onLike(performer)\n      })));\n    }\n\n    if (length > 12 && length <= 24) {\n      const dataChunk = chunk(data, 12);\n      return __jsx(React.Fragment, null, rightBanners && rightBanners.length > 0 ? __jsx(React.Fragment, null, __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Col, {\n        lg: 16,\n        md: 16,\n        xs: 24\n      }, __jsx(Row, null, dataChunk[0] && dataChunk[0].length > 0 && dataChunk[0].map(performer => __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: () => onLike(performer)\n      })))), __jsx(Col, {\n        lg: 8,\n        md: 8,\n        xs: 24\n      }, rightBanners && rightBanners.length > 0 && __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))), __jsx(RowGrid, {\n        dataSource: dataChunk[1]\n      })) : __jsx(RowGrid, {\n        dataSource: data\n      }));\n    }\n\n    if (length > 24 && length <= 36) {\n      const dataChunk = chunk(data, 12);\n      return __jsx(React.Fragment, null, __jsx(RowGrid, {\n        dataSource: dataChunk[0]\n      }), rightBanners && rightBanners.length > 0 ? __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Col, {\n        xl: 16,\n        lg: 18,\n        md: 18,\n        xs: 24\n      }, __jsx(Row, null, dataChunk[1] && dataChunk[1].length > 0 && dataChunk[1].map(performer => __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: () => onLike(performer)\n      })))), __jsx(Col, {\n        xl: 8,\n        lg: 6,\n        md: 6,\n        xs: 24\n      }, __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))) : __jsx(RowGrid, {\n        dataSource: dataChunk[1]\n      }), __jsx(RowGrid, {\n        dataSource: dataChunk[2]\n      }));\n    }\n\n    if (length > 36) {\n      const dataChunk = chunk(data, 12);\n      const lastDataChunk = dataChunk.slice(3);\n      return __jsx(React.Fragment, null, __jsx(RowGrid, {\n        dataSource: dataChunk[0]\n      }), rightBanners && rightBanners.length > 0 ? __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Col, {\n        xl: 16,\n        lg: 18,\n        md: 18,\n        xs: 24\n      }, __jsx(Row, null, dataChunk[1] && dataChunk[1].length > 0 && dataChunk[1].map(performer => __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: () => onLike(performer)\n      })))), __jsx(Col, {\n        xl: 8,\n        lg: 6,\n        md: 6,\n        xs: 24\n      }, __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))) : __jsx(RowGrid, {\n        dataSource: dataChunk[1]\n      }), __jsx(RowGrid, {\n        dataSource: dataChunk[2]\n      }), lastDataChunk.length > 0 && lastDataChunk.map(v => __jsx(RowGrid, {\n        key: generateUuid(),\n        dataSource: v\n      })));\n    }\n\n    return __jsx(React.Fragment, null);\n  };\n\n  const actions = setFilter && total > 0 ? [total > limit && __jsx(Pagination, {\n    disabled: searching,\n    current: Math.round(offset / limit) + 1,\n    pageSize: limit,\n    total: total,\n    size: \"small\",\n    onChange: page => setFilter('offset', (page - 1) * limit),\n    showSizeChanger: false\n  })] : [];\n\n  if (render) {\n    /**\n     * placeholderAvatarUrl props\n     */\n    return __jsx(Card, {\n      className: \"performer-grid\",\n      title: title,\n      bordered: false,\n      hoverable: false,\n      bodyStyle: {\n        padding: '0'\n      },\n      actions: actions\n    }, __jsx(Loader, {\n      spinning: searching\n    }), data.length > 0 && data.map(performer => render(performer)));\n  }\n\n  return __jsx(React.Fragment, null, isPage && (topBanners === null || topBanners === void 0 ? void 0 : topBanners.length) > 0 && __jsx(Banner, {\n    banners: topBanners,\n    styleImage: {\n      padding: '10px',\n      width: '100%'\n    }\n  }), __jsx(Card, {\n    className: \"performer-grid\",\n    title: title,\n    bordered: false,\n    hoverable: false,\n    bodyStyle: {\n      padding: '0'\n    },\n    actions: actions\n  }, __jsx(Loader, {\n    spinning: searching\n  }), success // eslint-disable-next-line no-nested-ternary\n  && (total > 0 ? isPage ? renderGrid() : data.map(performer => __jsx(GridCard, {\n    key: performer === null || performer === void 0 ? void 0 : performer._id,\n    placeholderAvatarUrl: placeholderAvatarUrl,\n    className: \"performer-box\",\n    performer: performer,\n    loggedIn: loggedIn,\n    onLike: p => onLike(p)\n  })) : __jsx(\"div\", {\n    className: \"ant-card-head\"\n  }, \"No model found.\"))), isPage && (bottomBanners === null || bottomBanners === void 0 ? void 0 : bottomBanners.length) > 0 && __jsx(Banner, {\n    banners: bottomBanners,\n    styleImage: {\n      padding: '10px',\n      width: '100%'\n    }\n  }));\n};\n\nPerformerGrid.defaultProps = {\n  loggedIn: false,\n  setFilter: null,\n  limit: 0,\n  offset: 0,\n  total: 0,\n  success: false,\n  searching: false,\n  title: '',\n  onLike: null,\n  render: null,\n  isPage: false,\n  banners: {},\n  placeholderAvatarUrl: '/no-avatar.png'\n};\n\nconst bannerSelecter = state => state.banner.listBanners.data;\n\nconst filterBanner = createSelector(bannerSelecter, banners => {\n  if (!banners.length) return {};\n  return {\n    topBanners: banners.filter(b => b.position === 'top'),\n    rightBanners: banners.filter(b => b.position === 'right'),\n    bottomBanners: banners.filter(b => b.position === 'bottom')\n  };\n});\n\nconst mapStates = state => ({\n  placeholderAvatarUrl: state.ui.placeholderAvatarUrl,\n  banners: filterBanner(state)\n});\n\nexport default connect(mapStates)(PerformerGrid);","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/components/performer/performer-grid.tsx"],"names":["React","Link","Card","Space","Row","Col","Pagination","MaleSignIcon","FemaleSignIcon","TransgenderIcon","createSelector","generateUuid","HeartFilled","HeartOutlined","EyeOutlined","LockOutlined","chunk","Banner","Loader","connect","renderTitle","gender","name","marginRight","renderTags","tags","map","tag","pathname","query","GridCard","performer","loggedIn","onLike","className","placeholderAvatarUrl","isOnline","streamingStatus","statusClassNames","status","push","defaultPlaceholderAvatarUrl","_id","isBlocked","JSON","stringify","username","avatar","length","join","stats","views","isFavorite","aboutMe","PerformerGrid","data","searching","success","title","isPage","offset","limit","total","setFilter","banners","render","topBanners","rightBanners","bottomBanners","RowGrid","dataSource","width","renderGrid","padding","dataChunk","lastDataChunk","slice","v","actions","Math","round","page","p","defaultProps","bannerSelecter","state","banner","listBanners","filterBanner","filter","b","position","mapStates","ui"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IPerformer, GENDER, IBanner } from 'src/interfaces';\nimport Link from 'next/link';\nimport {\n  Card, Space, Row, Col, Pagination\n} from 'antd';\nimport {\n  MaleSignIcon,\n  FemaleSignIcon,\n  TransgenderIcon\n} from '@components/common/base/icons';\nimport { createSelector, generateUuid } from 'src/lib';\nimport {\n  HeartFilled,\n  HeartOutlined,\n  EyeOutlined,\n  LockOutlined\n} from '@ant-design/icons';\nimport './index.less';\nimport { chunk } from 'lodash';\nimport Banner from '@components/common/layout/banner';\nimport Loader from '@components/common/base/loader';\nimport { connect } from 'react-redux';\n\ninterface IProps {\n  loggedIn?: boolean;\n  setFilter?: Function;\n  limit?: number;\n  offset?: number;\n  data: IPerformer[];\n  total?: number;\n  success?: boolean;\n  banners?: Record<string, IBanner[]>;\n  searching?: boolean;\n  title?: string | string[];\n  onLike?: Function;\n  isPage?: boolean;\n  placeholderAvatarUrl?: string;\n  render?: (performer: IPerformer) => React.ReactNode;\n}\n\nconst renderTitle = (gender: GENDER, name: string) => (\n  <div className=\"p-title\">\n    <span style={{ marginRight: 5 }}>{name}</span>\n    {gender === 'male' ? (\n      <span className=\"anticon\">\n        <MaleSignIcon />\n      </span>\n    ) : gender === 'female' ? (\n      <span className=\"anticon\">\n        <FemaleSignIcon />\n      </span>\n    ) : (\n      <span className=\"anticon\">\n        <TransgenderIcon />\n      </span>\n    )}\n  </div>\n);\n\nconst renderTags = (tags: string[]) => (\n  <Space className=\"tags\" wrap size={[5, 2]}>\n    {tags.map((tag) => (\n      <Link\n        href={{ pathname: '/tag', query: { tags: tag } }}\n        key={tag}\n        as={`/tag/${tag}`}\n      >\n        <a>\n          #\n          {tag}\n        </a>\n      </Link>\n    ))}\n  </Space>\n);\n\ninterface IGridCard {\n  performer: IPerformer;\n  loggedIn: boolean;\n  onLike: any;\n  className: string;\n  placeholderAvatarUrl: string;\n}\nexport const GridCard = ({\n  performer,\n  loggedIn,\n  onLike,\n  className,\n  placeholderAvatarUrl\n}: IGridCard) => {\n  const { isOnline, streamingStatus } = performer;\n  const statusClassNames = ['p-status'];\n  let status = 'offline';\n  if (isOnline) {\n    switch (streamingStatus) {\n      case 'private':\n        statusClassNames.push('private');\n        status = 'private chat';\n        break;\n      case 'group':\n        statusClassNames.push('group');\n        status = 'group chat';\n        break;\n      case 'public':\n        status = 'live';\n        statusClassNames.push('online');\n        break;\n      default:\n        status = 'online';\n        statusClassNames.push('online');\n        break;\n    }\n  } else {\n    statusClassNames.push('offline');\n  }\n  const defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n\n  return (\n    <Card.Grid className={className} key={performer._id} hoverable={false}>\n      {performer.isBlocked && (\n        <div className=\"blocked-thumb\">\n          <LockOutlined />\n        </div>\n      )}\n      <Link\n        href={{\n          pathname: '/stream',\n          query: { performer: JSON.stringify(performer) }\n        }}\n        as={`/profile/${performer.username}`}\n      >\n        <a>\n          <div className=\"performer-avatar\">\n            <img\n              className=\"image-performer\"\n              src={\n                typeof performer.avatar === 'string'\n                && performer.avatar.length > 0\n                  ? performer.avatar\n                  : defaultPlaceholderAvatarUrl\n              }\n              alt=\"\"\n            />\n            <span className={statusClassNames.join(' ')}>{status}</span>\n            {renderTitle(performer.gender, performer.username)}\n            {performer?.stats?.views > 0 && (\n              <div className=\"p-viewer\">\n                <EyeOutlined style={{ marginRight: 5 }} />\n                <span>{performer.stats.views}</span>\n              </div>\n            )}\n          </div>\n        </a>\n      </Link>\n      <div className=\"performer-bottom\">\n        <Row justify=\"space-between\">\n          <Col>\n            <div>{performer.tags && renderTags(performer.tags)}</div>\n          </Col>\n          <Col>\n            <div\n              aria-hidden\n              hidden={!loggedIn}\n              className=\"p-favorite\"\n              onClick={() => onLike(performer)}\n            >\n              {performer.isFavorite ? (\n                <HeartFilled className=\"icon\" />\n              ) : (\n                <HeartOutlined className=\"icon\" />\n              )}\n            </div>\n          </Col>\n        </Row>\n        <div className=\"about-me\">{performer?.aboutMe}</div>\n      </div>\n    </Card.Grid>\n  );\n};\n\nconst PerformerGrid = ({\n  data,\n  searching,\n  success,\n  title,\n  onLike,\n  loggedIn,\n  isPage,\n  offset,\n  limit,\n  total,\n  setFilter,\n  placeholderAvatarUrl,\n  banners,\n  render\n}: IProps) => {\n  const { topBanners, rightBanners, bottomBanners } = banners;\n  const RowGrid = ({ dataSource }: { dataSource: IPerformer[] }) => (\n    <Row style={{ width: '100%' }}>\n      {dataSource\n        && dataSource.length > 0\n        && dataSource.map((performer: IPerformer) => (\n          <GridCard\n            placeholderAvatarUrl={placeholderAvatarUrl}\n            className=\"performer-box\"\n            key={performer._id}\n            performer={performer}\n            loggedIn={loggedIn}\n            onLike={onLike}\n          />\n        ))}\n    </Row>\n  );\n\n  const renderGrid = () => {\n    const { length } = data;\n    if (length <= 12) {\n      return (\n        <Row style={{ width: '100%' }}>\n          {rightBanners && rightBanners.length > 0 ? (\n            <>\n              <Col lg={16} md={16} xs={24}>\n                <Row>\n                  {data\n                    && data.length > 0\n                    && data.map((performer: IPerformer) => (\n                      <GridCard\n                        placeholderAvatarUrl={placeholderAvatarUrl}\n                        className=\"performer-box performer-box-4-item\"\n                        key={performer._id}\n                        performer={performer}\n                        loggedIn={loggedIn}\n                        onLike={() => onLike(performer)}\n                      />\n                    ))}\n                </Row>\n              </Col>\n              <Col lg={8} md={8} xs={24}>\n                <Banner\n                  classnames=\"right-banners\"\n                  banners={rightBanners}\n                  styleImage={{ padding: '10px', width: '100%' }}\n                />\n              </Col>\n            </>\n          ) : (\n            data\n            && data.length > 0\n            && data.map((performer: IPerformer) => (\n              <GridCard\n                placeholderAvatarUrl={placeholderAvatarUrl}\n                className=\"performer-box\"\n                key={performer._id}\n                performer={performer}\n                loggedIn={loggedIn}\n                onLike={() => onLike(performer)}\n              />\n            ))\n          )}\n        </Row>\n      );\n    }\n    if (length > 12 && length <= 24) {\n      const dataChunk = chunk(data, 12);\n      return (\n        <>\n          {rightBanners && rightBanners.length > 0 ? (\n            <>\n              <Row style={{ width: '100%' }}>\n                <Col lg={16} md={16} xs={24}>\n                  <Row>\n                    {dataChunk[0]\n                      && dataChunk[0].length > 0\n                      && dataChunk[0].map((performer: IPerformer) => (\n                        <GridCard\n                          placeholderAvatarUrl={placeholderAvatarUrl}\n                          className=\"performer-box performer-box-4-item\"\n                          key={performer._id}\n                          performer={performer}\n                          loggedIn={loggedIn}\n                          onLike={() => onLike(performer)}\n                        />\n                      ))}\n                  </Row>\n                </Col>\n                <Col lg={8} md={8} xs={24}>\n                  {rightBanners && rightBanners.length > 0 && (\n                    <Banner\n                      classnames=\"right-banners\"\n                      banners={rightBanners}\n                      styleImage={{ padding: '10px', width: '100%' }}\n                    />\n                  )}\n                </Col>\n              </Row>\n              <RowGrid dataSource={dataChunk[1]} />\n            </>\n          ) : (\n            <RowGrid dataSource={data} />\n          )}\n        </>\n      );\n    }\n    if (length > 24 && length <= 36) {\n      const dataChunk = chunk(data, 12);\n      return (\n        <>\n          <RowGrid dataSource={dataChunk[0]} />\n          {rightBanners && rightBanners.length > 0 ? (\n            <Row style={{ width: '100%' }}>\n              <Col xl={16} lg={18} md={18} xs={24}>\n                <Row>\n                  {dataChunk[1]\n                    && dataChunk[1].length > 0\n                    && dataChunk[1].map((performer: IPerformer) => (\n                      <GridCard\n                        placeholderAvatarUrl={placeholderAvatarUrl}\n                        className=\"performer-box performer-box-4-item\"\n                        key={performer._id}\n                        performer={performer}\n                        loggedIn={loggedIn}\n                        onLike={() => onLike(performer)}\n                      />\n                    ))}\n                </Row>\n              </Col>\n              <Col xl={8} lg={6} md={6} xs={24}>\n                <Banner\n                  classnames=\"right-banners\"\n                  banners={rightBanners}\n                  styleImage={{ padding: '10px', width: '100%' }}\n                />\n              </Col>\n            </Row>\n          ) : (\n            <RowGrid dataSource={dataChunk[1]} />\n          )}\n          <RowGrid dataSource={dataChunk[2]} />\n        </>\n      );\n    }\n    if (length > 36) {\n      const dataChunk = chunk(data, 12);\n      const lastDataChunk = dataChunk.slice(3);\n      return (\n        <>\n          <RowGrid dataSource={dataChunk[0]} />\n          {rightBanners && rightBanners.length > 0 ? (\n            <Row style={{ width: '100%' }}>\n              <Col xl={16} lg={18} md={18} xs={24}>\n                <Row>\n                  {dataChunk[1]\n                    && dataChunk[1].length > 0\n                    && dataChunk[1].map((performer: IPerformer) => (\n                      <GridCard\n                        placeholderAvatarUrl={placeholderAvatarUrl}\n                        className=\"performer-box performer-box-4-item\"\n                        key={performer._id}\n                        performer={performer}\n                        loggedIn={loggedIn}\n                        onLike={() => onLike(performer)}\n                      />\n                    ))}\n                </Row>\n              </Col>\n              <Col xl={8} lg={6} md={6} xs={24}>\n                <Banner\n                  classnames=\"right-banners\"\n                  banners={rightBanners}\n                  styleImage={{ padding: '10px', width: '100%' }}\n                />\n              </Col>\n            </Row>\n          ) : (\n            <RowGrid dataSource={dataChunk[1]} />\n          )}\n          <RowGrid dataSource={dataChunk[2]} />\n          {lastDataChunk.length > 0\n            && lastDataChunk.map((v) => (\n              <RowGrid key={generateUuid()} dataSource={v} />\n            ))}\n        </>\n      );\n    }\n    return <></>;\n  };\n\n  const actions = setFilter && total > 0\n    ? [\n      total > limit && (\n        <Pagination\n          disabled={searching}\n          current={Math.round(offset / limit) + 1}\n          pageSize={limit}\n          total={total}\n          size=\"small\"\n          onChange={(page) => setFilter('offset', (page - 1) * limit)}\n          showSizeChanger={false}\n        />\n      )\n    ]\n    : [];\n\n  if (render) {\n    /**\n     * placeholderAvatarUrl props\n     */\n    return (\n      <Card\n        className=\"performer-grid\"\n        title={title}\n        bordered={false}\n        hoverable={false}\n        bodyStyle={{ padding: '0' }}\n        actions={actions}\n      >\n        <Loader spinning={searching} />\n        {data.length > 0 && data.map((performer) => render(performer))}\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      {isPage && topBanners?.length > 0 && (\n        <Banner\n          banners={topBanners}\n          styleImage={{ padding: '10px', width: '100%' }}\n        />\n      )}\n      <Card\n        className=\"performer-grid\"\n        title={title}\n        bordered={false}\n        hoverable={false}\n        bodyStyle={{ padding: '0' }}\n        actions={actions}\n      >\n        <Loader spinning={searching} />\n        {success\n          // eslint-disable-next-line no-nested-ternary\n          && (total > 0 ? (\n            isPage ? (\n              renderGrid()\n            ) : (\n              data.map((performer) => (\n                <GridCard\n                  key={performer?._id}\n                  placeholderAvatarUrl={placeholderAvatarUrl}\n                  className=\"performer-box\"\n                  performer={performer}\n                  loggedIn={loggedIn}\n                  onLike={(p: IPerformer) => onLike(p)}\n                />\n              ))\n            )\n          ) : (\n            <div className=\"ant-card-head\">No model found.</div>\n          ))}\n      </Card>\n      {isPage && bottomBanners?.length > 0 && (\n        <Banner\n          banners={bottomBanners}\n          styleImage={{ padding: '10px', width: '100%' }}\n        />\n      )}\n    </>\n  );\n};\nPerformerGrid.defaultProps = {\n  loggedIn: false,\n  setFilter: null,\n  limit: 0,\n  offset: 0,\n  total: 0,\n  success: false,\n  searching: false,\n  title: '',\n  onLike: null,\n  render: null,\n  isPage: false,\n  banners: {},\n  placeholderAvatarUrl: '/no-avatar.png'\n};\n\nconst bannerSelecter = (state) => state.banner.listBanners.data;\nconst filterBanner = createSelector(bannerSelecter, (banners) => {\n  if (!banners.length) return {};\n\n  return {\n    topBanners: banners.filter((b) => b.position === 'top'),\n    rightBanners: banners.filter((b) => b.position === 'right'),\n    bottomBanners: banners.filter((b) => b.position === 'bottom')\n  };\n});\nconst mapStates = (state: any) => ({\n  placeholderAvatarUrl: state.ui.placeholderAvatarUrl,\n  banners: filterBanner(state)\n});\n\nexport default connect(mapStates)(PerformerGrid);\n"]},"metadata":{},"sourceType":"module"}