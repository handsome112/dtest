{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { Row, Col, Button, Space } from 'antd';\nimport { FilterOutlined } from '@ant-design/icons';\nimport classnames from 'classnames';\nimport './performer-filter.less';\n\nvar PerformerFilter = function PerformerFilter(_ref) {\n  _s();\n\n  var countries = _ref.countries,\n      categories = _ref.categories,\n      setFilter = _ref.setFilter,\n      category = _ref.category,\n      country = _ref.country,\n      gender = _ref.gender,\n      clearFilter = _ref.clearFilter;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectedMenuKeys = _React$useState4[0],\n      setSelectedMenuKeys = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      lastSelectedMenuKey = _React$useState6[0],\n      setLastSelectedMenuKey = _React$useState6[1];\n\n  var onOpenChange = function onOpenChange(keys) {\n    var menuKeys = keys.filter(function (key) {\n      return key !== lastSelectedMenuKey;\n    });\n    setSelectedMenuKeys(menuKeys);\n    setLastSelectedMenuKey(menuKeys[0]);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Row, {\n    align: \"middle\",\n    className: \"performer-filter\",\n    justify: \"space-between\"\n  }, __jsx(Col, null, __jsx(Button, {\n    icon: __jsx(FilterOutlined, null),\n    type: \"primary\",\n    onClick: function onClick() {\n      return setVisible(true);\n    },\n    className: \"mr-8\"\n  }, \"Filter\"), __jsx(Space, {\n    className: \"ant-space-wrap\"\n  }, __jsx(\"span\", {\n    style: {\n      fontWeight: 'bold'\n    }\n  }, \"Popular Filter:\"), __jsx(Button, {\n    onClick: clearFilter,\n    className: classnames(gender === '' ? 'active' : ''),\n    type: \"dashed\"\n  }, \"All\"), __jsx(Button, {\n    onClick: function onClick() {\n      return setFilter('gender', gender === 'female' ? '' : 'female');\n    },\n    className: classnames(gender === 'female' ? 'active' : ''),\n    type: \"dashed\"\n  }, \"Female\"), __jsx(Button, {\n    onClick: function onClick() {\n      return setFilter('gender', gender === 'transgender' ? '' : 'transgender');\n    },\n    className: classnames(gender === 'transgender' ? 'active' : ''),\n    type: \"dashed\"\n  }, \"Transgender\"), __jsx(Button, {\n    onClick: function onClick() {\n      return setFilter('gender', gender === 'male' ? '' : 'male');\n    },\n    className: classnames(gender === 'male' ? 'active' : ''),\n    type: \"dashed\"\n  }, \"Male\")))));\n};\n\n_s(PerformerFilter, \"KDfhxqxIJhpdcya1cm7PGXam5Xk=\");\n\n_c = PerformerFilter;\nPerformerFilter.defaultProps = {\n  countries: [],\n  categories: [],\n  // offset: 0,\n  // limit: 0,\n  gender: '',\n  category: '',\n  country: ''\n};\nexport default PerformerFilter;\n\nvar _c;\n\n$RefreshReg$(_c, \"PerformerFilter\");","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/components/user/performer-filter.tsx"],"names":["React","Row","Col","Button","Space","FilterOutlined","classnames","PerformerFilter","countries","categories","setFilter","category","country","gender","clearFilter","useState","visible","setVisible","selectedMenuKeys","setSelectedMenuKeys","lastSelectedMenuKey","setLastSelectedMenuKey","onOpenChange","keys","menuKeys","filter","key","fontWeight","defaultProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Row, Col, Drawer, Button, Menu, Space\n} from 'antd';\nimport { FilterOutlined } from '@ant-design/icons';\nimport { ICountries, IPerformerCategogies } from 'src/interfaces';\nimport classnames from 'classnames';\nimport './performer-filter.less';\n\ninterface IProps {\n  countries?: ICountries[];\n  categories?: IPerformerCategogies[];\n  // offset?: number;\n  // limit?: number;\n  gender?: string;\n  category?: string;\n  country?: string;\n  setFilter: Function;\n  clearFilter: () => void;\n}\n\nconst PerformerFilter = ({\n  countries,\n  categories,\n  setFilter,\n  category,\n  country,\n  gender,\n  clearFilter\n}: IProps) => {\n  const [visible, setVisible] = React.useState<boolean>(false);\n  const [selectedMenuKeys, setSelectedMenuKeys] = React.useState<string[]>([]);\n  const [lastSelectedMenuKey, setLastSelectedMenuKey] = React.useState<string>();\n  const onOpenChange = (keys: string[]) => {\n    const menuKeys = keys.filter((key) => key !== lastSelectedMenuKey);\n    setSelectedMenuKeys(menuKeys);\n    setLastSelectedMenuKey(menuKeys[0]);\n  };\n  return (\n    <>\n      <Row align=\"middle\" className=\"performer-filter\" justify=\"space-between\">\n        <Col>\n          <Button\n            icon={<FilterOutlined />}\n            type=\"primary\"\n            onClick={() => setVisible(true)}\n            className=\"mr-8\"\n          >\n            Filter\n          </Button>\n          <Space className=\"ant-space-wrap\">\n            <span style={{ fontWeight: 'bold' }}>Popular Filter:</span>\n            <Button\n              onClick={clearFilter}\n              className={classnames(gender === '' ? 'active' : '')}\n              type=\"dashed\"\n            >\n              All\n            </Button>\n            <Button\n              onClick={() => setFilter('gender', gender === 'female' ? '' : 'female')}\n              className={classnames(gender === 'female' ? 'active' : '')}\n              type=\"dashed\"\n            >\n              Female\n            </Button>\n            <Button\n              onClick={() => setFilter('gender', gender === 'transgender' ? '' : 'transgender')}\n              className={classnames(gender === 'transgender' ? 'active' : '')}\n              type=\"dashed\"\n            >\n              Transgender\n            </Button>\n            <Button\n              onClick={() => setFilter('gender', gender === 'male' ? '' : 'male')}\n              className={classnames(gender === 'male' ? 'active' : '')}\n              type=\"dashed\"\n            >\n              Male\n            </Button>\n          </Space>\n        </Col>\n      </Row>\n      \n    </>\n  );\n};\nPerformerFilter.defaultProps = {\n  countries: [],\n  categories: [],\n  // offset: 0,\n  // limit: 0,\n  gender: '',\n  category: '',\n  country: ''\n};\n\nexport default PerformerFilter;\n"]},"metadata":{},"sourceType":"module"}