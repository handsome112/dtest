{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { formatDate } from 'src/lib';\nimport { Table, Button } from 'antd';\nimport React from 'react';\n\nconst StudioCommissionsTable = ({\n  data,\n  searching,\n  total,\n  pageSize,\n  update,\n  onChange\n}) => {\n  const columns = [{\n    title: 'Username',\n    key: 'username',\n    dataIndex: 'username'\n  }, {\n    title: 'Commission',\n    key: 'commission',\n    dataIndex: 'commissionSetting',\n\n    render(commissionSetting) {\n      const {\n        memberCommission\n      } = commissionSetting;\n      return __jsx(\"span\", null, memberCommission, \"%\");\n    }\n\n  }, {\n    title: 'Created At',\n    key: 'studioCommission',\n    dataIndex: 'createdAt',\n\n    render(createdAt) {\n      return __jsx(\"span\", null, formatDate(createdAt));\n    }\n\n  }, {\n    title: 'Actions',\n    key: 'actions',\n    dataIndex: '_id',\n    render: _id => __jsx(Button, {\n      type: \"primary\",\n      onClick: () => update(_id)\n    }, \"Update\")\n  }];\n  const dataSource = data.map(d => _objectSpread(_objectSpread({}, d), {}, {\n    key: d._id\n  }));\n  return __jsx(Table, {\n    dataSource: dataSource,\n    columns: columns,\n    loading: searching,\n    pagination: {\n      pageSize,\n      total\n    },\n    onChange: onChange,\n    scroll: {\n      x: true\n    }\n  });\n};\n\nexport default StudioCommissionsTable;","map":null,"metadata":{},"sourceType":"module"}