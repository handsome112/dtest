{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-console */\nimport './index.less';\nimport { PureComponent } from 'react';\nimport Header from 'next/head';\nimport { Row, Col, message, Button } from 'antd';\nimport Router from 'next/router';\nimport PrivateChatContainer from '@components/streaming/private-streaming-container';\nimport PreviewPlayer from '@components/streaming/subscriber';\nimport { streamService } from 'src/services';\nimport { connect } from 'react-redux';\nimport { accessPrivateRequest } from 'src/redux/streaming/actions';\nimport { SocketContext, Event } from 'src/socket';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport { getStreamConversationSuccess, resetStreamMessage } from '@redux/stream-chat/actions';\nimport { getResponseError } from '@lib/utils';\nimport { Description } from '@components/streaming'; // eslint-disable-next-line no-shadow\n\nvar STREAM_EVENT;\n\n(function (STREAM_EVENT) {\n  STREAM_EVENT[\"JOINED_THE_ROOM\"] = \"JOINED_THE_ROOM\";\n  STREAM_EVENT[\"JOIN_ROOM\"] = \"JOIN_ROOM\";\n  STREAM_EVENT[\"LEAVE_ROOM\"] = \"LEAVE_ROOM\";\n  STREAM_EVENT[\"RECEIVED_PAID_TOKEN\"] = \"RECEIVED_PAID_TOKEN\";\n  STREAM_EVENT[\"STREAM_INFORMATION_CHANGED\"] = \"private-stream/streamInformationChanged\";\n})(STREAM_EVENT || (STREAM_EVENT = {}));\n\nclass ModelPrivateChat extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    const {\n      query\n    } = ctx;\n\n    if (!query.id) {\n      if (false) {\n        Router.push('/');\n      }\n\n      ctx.res.writeHead && ctx.res.writeHead(302, {\n        Location: '/'\n      });\n      ctx.res.end && ctx.res.end();\n    }\n\n    return {\n      query\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"streamRef\", void 0);\n\n    _defineProperty(this, \"previewPlayerRef\", void 0);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      this.leaveSession();\n    });\n\n    _defineProperty(this, \"receivedPaidTokenHandler\", ({\n      token,\n      conversationId\n    }) => {\n      var _activeConversation$d;\n\n      const {\n        activeConversation\n      } = this.props;\n      const {\n        receivedToken\n      } = this.state;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n        this.setState({\n          receivedToken: receivedToken + token\n        });\n      }\n    });\n\n    this.state = {\n      roomJoined: false,\n      total: 0,\n      receivedToken: 0,\n      members: []\n    };\n  }\n\n  componentDidMount() {\n    const {\n      query,\n      accessPrivateRequest: dispatchAccessPrivateRequest\n    } = this.props;\n    window.addEventListener('beforeunload', this.onbeforeunload);\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n    this.socket = this.context;\n    dispatchAccessPrivateRequest(query.id);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      activeConversation,\n      query,\n      accessPrivateRequest: dispatchAccessPrivateRequest\n    } = this.props;\n\n    if (prevProps.query.id !== query.id) {\n      this.socket = this.context;\n      dispatchAccessPrivateRequest(query.id);\n      this.previewPlayerRef && this.previewPlayerRef.destroyPlaybackVideo();\n    }\n\n    if (prevProps.activeConversation !== activeConversation) {\n      var _prevProps$activeConv;\n\n      ((_prevProps$activeConv = prevProps.activeConversation) === null || _prevProps$activeConv === void 0 ? void 0 : _prevProps$activeConv._id) && this.socket.emit(STREAM_EVENT.LEAVE_ROOM, {\n        conversationId: prevProps.activeConversation._id\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n  }\n\n  handler({\n    total,\n    members,\n    conversationId\n  }) {\n    var _activeConversation$d2;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d2 = activeConversation.data) === null || _activeConversation$d2 === void 0 ? void 0 : _activeConversation$d2._id) === conversationId) {\n      this.setState({\n        total,\n        members\n      });\n    }\n  }\n\n  leaveSession() {\n    var _activeConversation$d3;\n\n    const {\n      activeConversation,\n      resetStreamMessage: dispatchResetStreamMessage\n    } = this.props;\n\n    if (this.socket && activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d3 = activeConversation.data) !== null && _activeConversation$d3 !== void 0 && _activeConversation$d3._id) {\n      this.socket.emit(STREAM_EVENT.LEAVE_ROOM, {\n        conversationId: activeConversation.data._id\n      });\n      this.socket.off(STREAM_EVENT.RECEIVED_PAID_TOKEN);\n      dispatchResetStreamMessage();\n    }\n\n    this.setState({\n      roomJoined: false,\n      total: 0,\n      receivedToken: 0,\n      members: []\n    });\n  }\n\n  async acceptRequest() {\n    const {\n      query,\n      getStreamConversationSuccess: dispatchGetStreamConversationSuccess\n    } = this.props;\n    if (!query.id) return;\n\n    try {\n      this.previewPlayerRef && this.previewPlayerRef.destroyPlaybackVideo();\n      const resp = await streamService.acceptPrivateChat(query.id);\n\n      if (resp && resp.data) {\n        this.socket = this.context;\n        const {\n          sessionId,\n          conversation\n        } = resp.data;\n        this.socket && this.socket.emit(STREAM_EVENT.JOIN_ROOM, {\n          conversationId: conversation._id\n        });\n        this.streamRef && this.streamRef.start(sessionId, conversation._id);\n        dispatchGetStreamConversationSuccess({\n          data: conversation\n        });\n      }\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    }\n  }\n\n  roomJoinedHandler({\n    total,\n    members,\n    conversationId\n  }) {\n    var _activeConversation$d4;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d4 = activeConversation.data) === null || _activeConversation$d4 === void 0 ? void 0 : _activeConversation$d4._id) === conversationId) {\n      this.setState({\n        total,\n        members,\n        roomJoined: true\n      });\n    }\n  }\n\n  preview() {\n    const {\n      query\n    } = this.props;\n    this.previewPlayerRef && this.previewPlayerRef.playHLS(query.streamId);\n  }\n\n  render() {\n    const {\n      total,\n      members,\n      roomJoined,\n      receivedToken\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Header, null, __jsx(\"title\", null, \"Private Chat\")), __jsx(Event, {\n      event: STREAM_EVENT.STREAM_INFORMATION_CHANGED,\n      handler: this.handler.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.JOINED_THE_ROOM,\n      handler: this.roomJoinedHandler.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.RECEIVED_PAID_TOKEN,\n      handler: this.receivedPaidTokenHandler.bind(this)\n    }), __jsx(Row, null, __jsx(Col, {\n      md: 12,\n      xs: 24\n    }, __jsx(PrivateChatContainer, {\n      ref: ref => {\n        this.streamRef = ref;\n      },\n      configs: {\n        localVideoId: 'private-publisher'\n      },\n      onClick: this.acceptRequest.bind(this)\n    }), __jsx(Button, {\n      block: true,\n      type: \"text\",\n      hidden: roomJoined,\n      style: {\n        background: 'black',\n        color: 'white',\n        margin: '10px 0'\n      },\n      onClick: this.preview.bind(this)\n    }, \"Preview\"), __jsx(PreviewPlayer, {\n      ref: ref => {\n        this.previewPlayerRef = ref;\n      },\n      configs: {\n        isPlayMode: true\n      }\n    }), __jsx(Description, {\n      roomJoined: roomJoined,\n      receivedToken: receivedToken\n    })), __jsx(Col, {\n      xs: 24,\n      md: 12\n    }, __jsx(ChatBox, _extends({}, this.props, {\n      totalParticipant: total,\n      members: members\n    })))));\n  }\n\n}\n\n_defineProperty(ModelPrivateChat, \"authenticate\", true);\n\n_defineProperty(ModelPrivateChat, \"onlyPerformer\", true);\n\nModelPrivateChat.contextType = SocketContext;\n\nconst mapStateToProps = state => ({\n  activeConversation: state.streamMessage.activeConversation\n});\n\nconst mapDispatchs = {\n  accessPrivateRequest,\n  getStreamConversationSuccess,\n  resetStreamMessage\n};\nexport default connect(mapStateToProps, mapDispatchs)(ModelPrivateChat);","map":null,"metadata":{},"sourceType":"module"}