{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Card, message, Alert } from 'antd';\nimport Head from 'next/head';\nimport { connect } from 'react-redux';\nimport React, { PureComponent } from 'react';\nimport { getPerformersVideos, addPerformerVideos } from 'src/redux/videos/actions';\nimport { withRouter } from 'next/router';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport VideoSingleCard from '@components/videos/video-single-card';\nimport { getResponseError } from 'src/lib';\nimport { videoService, performerService } from 'src/services';\nimport './index.less';\nimport Loader from '@components/common/base/loader';\n\nclass VideosPage extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    try {\n      const {\n        query\n      } = ctx;\n\n      if (query.performer) {\n        return {\n          performer: JSON.parse(query.performer)\n        };\n      }\n\n      if (query.username) {\n        const resp = await performerService.details(query.username);\n        return {\n          performer: resp.data\n        };\n      }\n\n      return {};\n    } catch {\n      return {};\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      limit: 12,\n      offset: 0\n    };\n  }\n\n  componentDidMount() {\n    const {\n      router,\n      getPerformersVideos: dispatchGetPerformersVideos,\n      performer\n    } = this.props;\n    const performerId = performer ? performer._id : '';\n    dispatchGetPerformersVideos(_objectSpread(_objectSpread(_objectSpread({}, router.query), this.state), {}, {\n      performerId\n    }));\n  }\n\n  async loadMore() {\n    try {\n      let {\n        offset\n      } = this.state;\n      const {\n        limit\n      } = this.state;\n      const {\n        router: {\n          query\n        },\n        performer,\n        addPerformerVideos: dispatchAddPerformerVideos\n      } = this.props;\n      const performerId = performer ? performer._id : '';\n      offset = limit + offset;\n      const resp = await videoService.search(_objectSpread(_objectSpread({}, query), {}, {\n        performerId,\n        limit,\n        offset\n      }));\n      dispatchAddPerformerVideos(resp.data.data);\n      this.setState({\n        offset\n      });\n    } catch (e) {\n      this.showError(e);\n    }\n  }\n\n  async showError(e) {\n    const err = await Promise.resolve(e);\n    message.error(getResponseError(err));\n  }\n\n  render() {\n    const {\n      ids,\n      data,\n      searching,\n      success,\n      error,\n      total,\n      performer,\n      router: {\n        query\n      }\n    } = this.props;\n    const username = performer && performer.username;\n    const hasMore = ids.length < total;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, `${username}'s ` || '', ' ', \"Videos\", ' ')), searching && __jsx(Loader, {\n      spinning: true,\n      fullScreen: true\n    }), error && __jsx(Alert, {\n      type: \"error\",\n      message: \"Error request\",\n      banner: true\n    }), success && __jsx(\"div\", {\n      className: \"videos-page\"\n    }, query.username && !performer && __jsx(Alert, {\n      message: \"Performer not found.\",\n      banner: true\n    }), __jsx(InfiniteScroll, {\n      loadMore: this.loadMore.bind(this),\n      hasMore: hasMore,\n      loader: __jsx(\"p\", null, \"Loading...\")\n    }, __jsx(Card, {\n      title: `${username || ''} Videos`,\n      bordered: false,\n      hoverable: false\n    }, ids.length > 0 && ids.map(id => __jsx(Card.Grid, {\n      hoverable: false\n    }, __jsx(VideoSingleCard, _extends({}, data[id], {\n      key: id,\n      video: data[id]\n    }))))))));\n  }\n\n}\n\nconst mapStateToProps = state => _objectSpread({}, state.videos);\n\nconst mapDispatchs = {\n  getPerformersVideos,\n  addPerformerVideos\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchs)(VideosPage));","map":null,"metadata":{},"sourceType":"module"}