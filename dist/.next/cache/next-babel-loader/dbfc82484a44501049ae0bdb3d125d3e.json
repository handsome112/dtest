{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducers } from '@lib/redux';\nimport { merge } from 'lodash';\nimport { gettingPerformerVideos, getPerformersVideosFail, getPerformersVideosSuccess, addPerformerVideos } from './actions';\nconst initialState = {\n  ids: [],\n  data: {},\n  searching: false,\n  success: false,\n  error: null\n};\nconst videoReducers = [{\n  on: gettingPerformerVideos,\n\n  reducer() {\n    return _objectSpread(_objectSpread({}, initialState), {}, {\n      searching: true\n    });\n  }\n\n}, {\n  on: getPerformersVideosSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread(_objectSpread({}, state), action.payload), {}, {\n      searching: false,\n      success: true,\n      error: null\n    });\n  }\n\n}, {\n  on: getPerformersVideosFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      searching: false,\n      success: false,\n      error: action.payload\n    });\n  }\n\n}, {\n  on: addPerformerVideos,\n\n  reducer(state, action) {\n    const {\n      ids,\n      data\n    } = state;\n    const videos = action.payload;\n    videos.forEach(v => {\n      data[v._id] = v;\n      ids.push(v._id);\n    });\n    return _objectSpread({}, state);\n  }\n\n}];\nexport default merge({}, createReducers('videos', [videoReducers], initialState));","map":null,"metadata":{},"sourceType":"module"}