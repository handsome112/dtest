{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Tabs, message, Form } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport PerformerProfile from '@components/performer/profile-detail';\nimport Router from 'next/router';\nimport { connect } from 'react-redux';\nimport { updatePerformerProfile, updateCurrentPerformer, updatePerformerProfileSuccess, setupdatingPerformerProfile } from 'src/redux/performer/actions';\nimport { performerService, authService } from 'src/services';\nimport ProfileEditForm from '@components/performer/profile-edit-form';\nimport { getResponseError } from 'src/lib/utils';\nimport { ImageUpload } from '@components/file/image-upload';\nimport './index.less';\nimport { beforeAvatarUpload } from '@lib/file';\n\nclass PerformerProfilePage extends PureComponent {\n  static getInitialProps({\n    ctx\n  }) {\n    const {\n      query\n    } = ctx;\n    return {\n      action: query.action\n    };\n  }\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      updateSuccess,\n      updateError\n    } = this.props;\n\n    if (updateSuccess && prevProps.updateSuccess !== updateSuccess) {\n      message.success('Update Profile Success.');\n    }\n\n    if (prevProps.updateError !== updateError && updateError) {\n      message.error(getResponseError(updateError));\n    }\n  }\n\n  onTabsChange(key) {\n    Router.push({\n      pathname: '/account/performer/profile',\n      query: {\n        action: key\n      }\n    }, `/account/performer/profile?action=${key}`, {\n      shallow: false\n    });\n  }\n\n  onFinish(data) {\n    const {\n      performer,\n      updatePerformerProfile: dispatchupDatePerformerProfile\n    } = this.props;\n    dispatchupDatePerformerProfile(_objectSpread(_objectSpread({}, performer), data));\n  }\n\n  onUploadedAvatar(data) {\n    const {\n      performer,\n      updatePerformerProfileSuccess: dispatchUpdatePerformerProfileSuccess,\n      setupdatingPerformerProfile: dispatchSetUpdating\n    } = this.props;\n    dispatchSetUpdating();\n    dispatchUpdatePerformerProfileSuccess(_objectSpread(_objectSpread({}, performer), {}, {\n      avatar: data.response.data.url\n    }));\n  }\n\n  render() {\n    const {\n      action,\n      performer,\n      categoriesData,\n      updating,\n      countries\n    } = this.props;\n    const uploadHeaders = {\n      authorization: authService.getToken()\n    };\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My Profile\")), __jsx(\"div\", {\n      className: \"performer-profile-page\"\n    }, __jsx(PageHeader, {\n      title: \"My Profile\"\n    }), __jsx(Tabs, {\n      activeKey: action || 'profile-image',\n      style: {\n        padding: '0 24px'\n      },\n      size: \"large\",\n      onChange: this.onTabsChange.bind(this)\n    }, __jsx(Tabs.TabPane, {\n      tab: \"Profile Image\",\n      key: \"profile-image\"\n    }, __jsx(Form.Item, {\n      label: \"Profile Image\"\n    }, __jsx(ImageUpload, {\n      options: {\n        fieldName: 'avatar'\n      },\n      imageUrl: performer === null || performer === void 0 ? void 0 : performer.avatar,\n      uploadUrl: performerService.getAvatarUploadUrl(),\n      headers: uploadHeaders,\n      beforeUpload: beforeAvatarUpload,\n      onUploaded: this.onUploadedAvatar.bind(this)\n    }))), __jsx(Tabs.TabPane, {\n      tab: \"My Profile\",\n      key: \"profile\"\n    }, __jsx(PerformerProfile, {\n      performer: performer\n    })), __jsx(Tabs.TabPane, {\n      tab: \"Edit Profile\",\n      key: \"edit-profile\"\n    }, __jsx(ProfileEditForm, _extends({}, performer, {\n      categoriesData: categoriesData,\n      countries: countries,\n      onFinish: this.onFinish.bind(this),\n      loading: updating\n    }))))));\n  }\n\n}\n\n_defineProperty(PerformerProfilePage, \"authenticate\", true);\n\n_defineProperty(PerformerProfilePage, \"layout\", 'primary');\n\nconst mapStateToProps = state => ({\n  performer: state.performer.current,\n  updating: state.performer.updating,\n  updateSuccess: state.performer.updateSuccess,\n  updateError: state.performer.updateError,\n  categoriesData: state.performer.categories.data,\n  countries: state.settings.countries\n});\n\nconst mapDispatchs = {\n  updatePerformerProfile,\n  updateCurrentPerformer,\n  updatePerformerProfileSuccess,\n  setupdatingPerformerProfile\n};\nexport default connect(mapStateToProps, mapDispatchs)(PerformerProfilePage);","map":null,"metadata":{},"sourceType":"module"}