{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport { videoService } from 'src/services';\nimport { getResponseError } from 'src/lib';\nimport { getPerformersVideos, getPerformersVideosFail, getPerformersVideosSuccess, gettingPerformerVideos } from './actions';\nconst videosSagas = [{\n  on: getPerformersVideos,\n\n  *worker(action) {\n    try {\n      yield put(gettingPerformerVideos());\n      const resp = yield videoService.search(action.payload);\n      const videos = resp.data.data;\n      const ids = videos.map(v => v._id);\n      const data = videos.length && (videos.length > 1 ? videos.reduce((previousValue, currentValue, index) => {\n        if (index === 1) {\n          return {\n            [previousValue._id]: previousValue,\n            [currentValue._id]: currentValue\n          };\n        }\n\n        const value = _objectSpread({}, previousValue);\n\n        value[currentValue._id] = currentValue;\n        return value;\n      }) : {\n        [videos[0]._id]: videos[0]\n      });\n      yield put(getPerformersVideosSuccess({\n        total: resp.data.total,\n        data,\n        ids\n      }));\n    } catch (e) {\n      const err = getResponseError(e);\n      yield put(getPerformersVideosFail(err));\n    }\n  }\n\n}];\nexport default flatten([createSagas(videosSagas)]);","map":null,"metadata":{},"sourceType":"module"}