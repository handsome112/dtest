{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport SocketIO from 'socket.io-client';\nimport { authService } from '@services/auth.service';\nimport { connect } from 'react-redux';\nimport { warning, debug } from './utils';\nimport { SocketContext } from './SocketContext';\n\nvar Socket = /*#__PURE__*/function (_React$Component) {\n  _inherits(Socket, _React$Component);\n\n  var _super = _createSuper(Socket);\n\n  function Socket(props) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"socket\", void 0);\n\n    _this.connect();\n\n    return _this;\n  }\n\n  _createClass(Socket, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(nextProps) {\n      var loggedIn = this.props.loggedIn;\n\n      if (nextProps.loggedIn !== loggedIn) {\n        this.connect();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.socket && this.socket.close();\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      var loggedIn = this.props.loggedIn;\n      var token = loggedIn && authService.getToken();\n\n      if (!true) {\n        return;\n      }\n\n      var _this$props$uri = this.props.uri,\n          uri = _this$props$uri === void 0 ? process.env.NEXT_PUBLIC_SOCKET_ENDPOINT : _this$props$uri;\n      var options = {\n        transports: ['websocket', 'polling', 'long-polling'],\n        query: token ? \"token=\".concat(token) : ''\n      };\n      this.socket && this.socket.close();\n      this.socket = SocketIO(uri, this.mergeOptions(options));\n      this.socket.status = 'initialized';\n      this.socket.on('connect', function () {\n        _this2.socket.status = 'connected';\n        debug('connected');\n      });\n      this.socket.on('disconnect', function () {\n        _this2.socket.status = 'disconnected';\n        debug('disconnect');\n      });\n      this.socket.on('error', function (err) {\n        _this2.socket.status = 'failed';\n        warning('error', err);\n      });\n      this.socket.on('reconnect', function (data) {\n        _this2.socket.status = 'connected';\n        debug('reconnect', data);\n      });\n      this.socket.on('reconnect_attempt', function () {\n        debug('reconnect_attempt');\n      });\n      this.socket.on('reconnecting', function () {\n        _this2.socket.status = 'reconnecting';\n        debug('reconnecting');\n      });\n      this.socket.on('reconnect_failed', function (error) {\n        _this2.socket.status = 'failed';\n        warning('reconnect_failed', error);\n      });\n    }\n  }, {\n    key: \"mergeOptions\",\n    value: function mergeOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var defaultOptions = {\n        reconnection: true,\n        reconnectionAttempts: Infinity,\n        reconnectionDelay: 1 * 1000,\n        reconnectionDelayMax: 5 * 1000,\n        autoConnect: true,\n        transports: ['websocket', 'polling', 'long-polling'],\n        rejectUnauthorized: true\n      };\n      return _objectSpread(_objectSpread({}, defaultOptions), options);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return __jsx(SocketContext.Provider, {\n        value: this.socket\n      }, React.Children.only(children));\n    }\n  }]);\n\n  return Socket;\n}(React.Component);\n\nvar mapStates = function mapStates(state) {\n  return {\n    loggedIn: state.auth.loggedIn\n  };\n};\n\nexport default connect(mapStates)(Socket);","map":null,"metadata":{},"sourceType":"module"}