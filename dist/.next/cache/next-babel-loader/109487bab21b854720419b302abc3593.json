{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport { connect } from 'react-redux';\nimport VideoForm from '@components/videos/video-form';\nimport { videoService } from 'src/services';\nimport { getResponseError } from '@lib/utils';\nimport nextCookie from 'next-cookies';\nimport Error from '../../../_error';\nimport './index.less';\n\nclass CreatePerformerVideosPage extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    try {\n      const {\n        query: {\n          video,\n          id\n        }\n      } = ctx;\n\n      if (false && video) {\n        return {\n          video: JSON.parse(video)\n        };\n      }\n\n      const {\n        token\n      } = nextCookie(ctx);\n      const resp = await videoService.details(id, {\n        Authorization: token\n      });\n      return {\n        video: resp.data\n      };\n    } catch (e) {\n      return {};\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      onSubmit: false\n    };\n  }\n\n  async onFinish(data) {\n    const {\n      performer,\n      video\n    } = this.props;\n\n    try {\n      this.setState({\n        onSubmit: true\n      });\n      await videoService.update(`/performer/performer-assets/videos/${video._id}`, _objectSpread(_objectSpread({}, data), {}, {\n        performerId: performer._id\n      }));\n      message.success('Update video success.');\n    } catch (e) {\n      const err = await Promise.resolve(e);\n      message.error(getResponseError(err));\n    } finally {\n      this.setState({\n        onSubmit: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      video\n    } = this.props;\n    if (!video) return __jsx(Error, {\n      statusCode: 404\n    });\n    const {\n      onSubmit\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Update Video -\", video && video.title)), __jsx(\"div\", {\n      className: \"performer-videos-page\"\n    }, __jsx(PageHeader, {\n      title: \"Update a Video\"\n    }), __jsx(VideoForm, {\n      loading: onSubmit,\n      onFinish: this.onFinish.bind(this),\n      video: video\n    })));\n  }\n\n}\n\n_defineProperty(CreatePerformerVideosPage, \"authenticate\", true);\n\n_defineProperty(CreatePerformerVideosPage, \"layout\", 'primary');\n\nconst mapStateToProps = state => ({\n  performer: state.performer.current\n});\n\nexport default connect(mapStateToProps)(CreatePerformerVideosPage);","map":null,"metadata":{},"sourceType":"module"}