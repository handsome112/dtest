{"ast":null,"code":"var __jsx = React.createElement;\nimport { Form, Input, Button, Alert, Space, Select } from 'antd';\nimport { getResponseError } from '@lib/utils';\nimport Router from 'next/router';\nimport React from 'react';\n\nconst StudioAddModelForm = ({\n  loading,\n  error,\n  message,\n  onFinish\n}) => {\n  const [form] = Form.useForm();\n  return __jsx(Form, {\n    form: form,\n    name: \"studioAddModelForm\",\n    onFinish: onFinish,\n    scrollToFirstError: true,\n    style: {\n      margin: 'auto',\n      textAlign: 'center',\n      maxWidth: '400px'\n    }\n  }, __jsx(Form.Item, {\n    name: \"firstName\",\n    rules: [{\n      required: true,\n      message: 'Please input first name!'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input first name!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"Model's first name\"\n  })), __jsx(Form.Item, {\n    name: \"lastName\",\n    rules: [{\n      required: true,\n      message: 'Please input last name!'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input last name!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"Model's last name\"\n  })), __jsx(Form.Item, {\n    name: \"username\",\n    rules: [{\n      required: true,\n      message: 'Username is required!'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9]*$'),\n      message: 'Dont allow special chars or space'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"Username\"\n  })), __jsx(Form.Item, {\n    name: \"email\",\n    rules: [{\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }, {\n      required: true,\n      message: 'Please input your E-mail!'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"E-mail\"\n  })), __jsx(Form.Item, {\n    name: \"gender\",\n    rules: [{\n      required: true,\n      message: 'Please select your gender!'\n    }]\n  }, __jsx(Select, {\n    placeholder: \"Gender\"\n  }, __jsx(Select.Option, {\n    value: \"male\",\n    key: \"male\"\n  }, \"Male\"), __jsx(Select.Option, {\n    value: \"female\",\n    key: \"female\"\n  }, \"Female\"), __jsx(Select.Option, {\n    value: \"transgender\",\n    key: \"transgender\"\n  }, \"Transgender\"))), __jsx(Form.Item, {\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: 'Please input your password!'\n    }, {\n      min: 6,\n      max: 14,\n      message: '6-14 characters'\n    }],\n    hasFeedback: true\n  }, __jsx(Input.Password, {\n    placeholder: \"Password\"\n  })), __jsx(Form.Item, {\n    name: \"confirm\",\n    dependencies: ['password'],\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue('password') === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject(new Error('The two passwords that you entered do not match!'));\n      }\n\n    })]\n  }, __jsx(Input.Password, {\n    placeholder: \"Confirm Password\"\n  })), error && __jsx(Form.Item, null, __jsx(Alert, {\n    description: getResponseError(message),\n    type: \"error\",\n    message: \"Error\"\n  })), __jsx(Form.Item, {\n    style: {\n      textAlign: 'right'\n    }\n  }, __jsx(Space, null, __jsx(Button, {\n    type: \"primary\",\n    onClick: () => Router.push('/studio/models'),\n    className: \"btn-submit\"\n  }, \"Cancel\"), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading,\n    disabled: loading,\n    className: \"btn-submit\"\n  }, \"Create\"))));\n};\n\nexport default StudioAddModelForm;","map":null,"metadata":{},"sourceType":"module"}