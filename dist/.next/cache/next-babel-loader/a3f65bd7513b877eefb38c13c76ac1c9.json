{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/var/www/dtest.live/src/components/messages/ConversationList.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport './ConversationList.less';\nimport { getConversations, setActiveConversation, getConversationDetail, receiveMessageSuccess, searchConversations, updateLastMessage } from '@redux/message/actions';\nimport { Event } from 'src/socket';\nimport { debounce } from 'lodash';\nimport { messageService } from '@services/message.service';\nimport ConversationSearch from './ConversationSearch';\nimport ConversationListItem from './ConversationListItem';\n\nvar ConversationList = /*#__PURE__*/function (_PureComponent) {\n  _inherits(ConversationList, _PureComponent);\n\n  var _super = _createSuper(ConversationList);\n\n  function ConversationList(props) {\n    var _this;\n\n    _classCallCheck(this, ConversationList);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"conversationsRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      conversationPage: 1,\n      keyword: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMessage\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(message) {\n        var _this$props, conversation, currentPerformer, currentUser, getConversationDetailHandler, receiveMessageSuccessHandler, handleUpdateLastMessage, mapping, conversationId, text;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (message) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _this$props = _this.props, conversation = _this$props.conversation, currentPerformer = _this$props.currentPerformer, currentUser = _this$props.currentUser, getConversationDetailHandler = _this$props.getConversationDetail, receiveMessageSuccessHandler = _this$props.receiveMessageSuccess, handleUpdateLastMessage = _this$props.updateLastMessage;\n                mapping = conversation.mapping;\n                conversationId = message.conversationId, text = message.text;\n\n                if (!mapping[message.conversationId]) {\n                  getConversationDetailHandler({\n                    id: message.conversationId\n                  });\n                }\n\n                receiveMessageSuccessHandler(message);\n                handleUpdateLastMessage({\n                  conversationId: conversationId,\n                  lastMessage: text\n                });\n                _context.next = 10;\n                return messageService.readAllInConversation(conversationId, currentUser._id ? currentUser._id : currentPerformer._id);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearchConversation\", debounce( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n        var value, getConversationsHandler;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                value = e.target.value;\n                getConversationsHandler = _this.props.searchConversations;\n                _context2.next = 4;\n                return _this.setState({\n                  keyword: value,\n                  conversationPage: 0\n                });\n\n              case 4:\n                if (!value) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", getConversationsHandler({\n                  keyword: value,\n                  limit: 25,\n                  offset: 0,\n                  type: 'private'\n                }));\n\n              case 6:\n                return _context2.abrupt(\"return\", getConversationsHandler({\n                  limit: 25,\n                  offset: 0,\n                  type: 'private'\n                }));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }(), 500));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScroll\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n        var _this$props2, conversation, getConversationsHandler, _conversation$list, requesting, data, total, _this$state, conversationPage, keyword, canloadmore, ele;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props2 = _this.props, conversation = _this$props2.conversation, getConversationsHandler = _this$props2.getConversations;\n                _conversation$list = conversation.list, requesting = _conversation$list.requesting, data = _conversation$list.data, total = _conversation$list.total;\n                _this$state = _this.state, conversationPage = _this$state.conversationPage, keyword = _this$state.keyword;\n                canloadmore = total > data.length;\n                ele = event.target;\n\n                if (canloadmore) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 7:\n                if (ele.scrollHeight - ele.scrollTop === ele.clientHeight && !requesting && canloadmore) {\n                  _this.setState({\n                    conversationPage: conversationPage + 1\n                  }, function () {\n                    getConversationsHandler({\n                      keyword: keyword,\n                      limit: 25,\n                      offset: conversationPage * 25,\n                      type: 'private'\n                    });\n                  });\n                }\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"setActive\", function (conversationId) {\n      var _this$props3 = _this.props,\n          setActiveConversationHandler = _this$props3.setActiveConversation,\n          currentPerformer = _this$props3.currentPerformer,\n          currentUser = _this$props3.currentUser;\n      setActiveConversationHandler({\n        conversationId: conversationId,\n        recipientId: currentUser._id ? currentUser._id : currentPerformer._id\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ConversationList, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this$props4, getConversationsHandler, setActiveConversationHandler, toSource, toId, currentUser, currentPerformer, _this$state2, conversationPage, keyword;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.conversationsRef) this.conversationsRef = /*#__PURE__*/createRef();\n                _this$props4 = this.props, getConversationsHandler = _this$props4.getConversations, setActiveConversationHandler = _this$props4.setActiveConversation, toSource = _this$props4.toSource, toId = _this$props4.toId, currentUser = _this$props4.currentUser, currentPerformer = _this$props4.currentPerformer;\n                _this$state2 = this.state, conversationPage = _this$state2.conversationPage, keyword = _this$state2.keyword;\n                getConversationsHandler({\n                  limit: 25,\n                  offset: conversationPage * 25,\n                  type: 'private',\n                  keyword: keyword\n                });\n\n                if (toSource && toId) {\n                  setTimeout(function () {\n                    setActiveConversationHandler({\n                      source: toSource,\n                      sourceId: toId,\n                      recipientId: currentUser._id ? currentUser._id : currentPerformer._id\n                    });\n                  }, 1000);\n                }\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var conversation = this.props.conversation;\n      var _conversation$list2 = conversation.list,\n          conversations = _conversation$list2.data,\n          requesting = _conversation$list2.requesting;\n      var mapping = conversation.mapping,\n          _conversation$activeC = conversation.activeConversation,\n          activeConversation = _conversation$activeC === void 0 ? {} : _conversation$activeC;\n      if (!this.conversationsRef) this.conversationsRef = /*#__PURE__*/createRef();\n      return __jsx(\"div\", {\n        className: \"conversation-list\",\n        ref: this.conversationsRef,\n        onScroll: this.handleScroll.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 7\n        }\n      }, __jsx(Event, {\n        event: \"message_created\",\n        handler: this.onMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }), __jsx(\"h4\", {\n        className: \"text-center\",\n        style: {\n          fontSize: '22px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }\n      }, \"Messenger\"), __jsx(ConversationSearch, {\n        onSearch: function onSearch(e) {\n          e.persist();\n\n          _this2.onSearchConversation(e);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }\n      }), conversations.length > 0 && conversations.map(function (conversationId) {\n        return __jsx(ConversationListItem, {\n          key: conversationId,\n          data: mapping[conversationId],\n          setActive: _this2.setActive.bind(_this2),\n          selected: activeConversation._id === conversationId,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }\n        });\n      }), requesting && __jsx(\"div\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }\n      }, __jsx(\"img\", {\n        alt: \"loading\",\n        src: \"/loading-ico.gif\",\n        width: \"50px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }\n      })), !requesting && !conversations.length && __jsx(\"p\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 50\n        }\n      }, \"No conversation found.\"));\n    }\n  }]);\n\n  return ConversationList;\n}(PureComponent);\n\nvar mapStates = function mapStates(state) {\n  return {\n    conversation: state.conversation,\n    message: state.message,\n    currentUser: state.user.current,\n    currentPerformer: state.performer.current\n  };\n};\n\nvar mapDispatch = {\n  searchConversations: searchConversations,\n  getConversations: getConversations,\n  setActiveConversation: setActiveConversation,\n  getConversationDetail: getConversationDetail,\n  receiveMessageSuccess: receiveMessageSuccess,\n  updateLastMessage: updateLastMessage\n};\nexport default connect(mapStates, mapDispatch)(ConversationList);","map":null,"metadata":{},"sourceType":"module"}