{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport React, { PureComponent } from 'react';\nimport { Button, message } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport Head from 'next/head';\nimport { connect } from 'react-redux';\nimport { getMyVideos, removeMyVideo, addMyVideos } from '@redux/performer/actions';\nimport { videoService } from 'src/services';\nimport { getResponseError } from '@lib/utils';\nimport VideoGrid from '@components/videos/video-grid';\nimport Router from 'next/router';\nimport PopupVideoDetail from '@components/videos/popup-video';\nimport './index.less';\nimport Loader from '@components/common/base/loader';\n\nclass PerformerVideosPage extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"ref\", void 0);\n\n    this.state = {\n      limit: 12,\n      offset: 0\n    };\n  }\n\n  componentDidMount() {\n    this.loadVideos();\n  }\n\n  async onRemove(id) {\n    const {\n      removeMyVideo: dispatchRemoveMyVideo\n    } = this.props;\n\n    try {\n      await videoService.removeMyVideo(id);\n      message.success('Removed!');\n      dispatchRemoveMyVideo(id);\n    } catch (e) {\n      this.showError(e);\n    }\n  }\n\n  async addVideos() {\n    const {\n      addMyVideos: dispatchAddMyVideos\n    } = this.props;\n\n    try {\n      const {\n        limit\n      } = this.state;\n      let {\n        offset\n      } = this.state;\n      offset = limit + offset;\n      const resp = await videoService.myVideos(_objectSpread(_objectSpread({}, this.state), {}, {\n        offset\n      }));\n      dispatchAddMyVideos(resp.data.data);\n      this.setState({\n        offset\n      });\n    } catch (e) {\n      this.showError(e);\n    }\n  }\n\n  loadVideos() {\n    const {\n      getMyVideos: dispatchGetMyVideos\n    } = this.props;\n    dispatchGetMyVideos(_objectSpread(_objectSpread({}, this.state), {}, {\n      offset: 0\n    }));\n  }\n\n  async showError(e) {\n    const err = await Promise.resolve(e);\n    message.error(getResponseError(err));\n  }\n\n  render() {\n    const {\n      data,\n      searching,\n      total,\n      success\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My Videos\")), __jsx(\"div\", {\n      className: \"performer-videos-page\"\n    }, __jsx(PageHeader, {\n      title: \"Videos\",\n      extra: __jsx(Button, {\n        type: \"primary\",\n        onClick: () => Router.push('/account/performer/videos/add')\n      }, \"Upload Video\")\n    }), __jsx(Loader, {\n      spinning: searching\n    }), __jsx(VideoGrid, {\n      success: success,\n      addVideos: this.addVideos.bind(this),\n      remove: this.onRemove.bind(this),\n      data: data,\n      hasMore: !searching && data.length < total,\n      title: \"\",\n      onViewVideo: video => this.ref.showModalBuyAssets(video.video.url || '')\n    }), __jsx(PopupVideoDetail, {\n      ref: ref => this.ref = ref\n    })));\n  }\n\n}\n\n_defineProperty(PerformerVideosPage, \"authenticate\", true);\n\n_defineProperty(PerformerVideosPage, \"layout\", 'primary');\n\nconst mapStateToProps = state => _objectSpread({}, state.performer.assets.videos);\n\nconst mapDispatch = {\n  getMyVideos,\n  removeMyVideo,\n  addMyVideos\n};\nexport default connect(mapStateToProps, mapDispatch)(PerformerVideosPage);","map":null,"metadata":{},"sourceType":"module"}