{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { Card, Pagination, Popconfirm } from 'antd';\nimport { MaleSignIcon, FemaleSignIcon, TransgenderIcon } from '@components/common/base/icons';\nimport { getAge } from 'src/lib';\nimport { HeartFilled } from '@ant-design/icons';\nimport './favourite-performer-grid.less';\nimport { connect } from 'react-redux';\n\nconst renderGender = gender => {\n  switch (gender) {\n    case 'male':\n      return __jsx(MaleSignIcon, {\n        color: \"#666\"\n      });\n\n    case 'female':\n      return __jsx(FemaleSignIcon, {\n        color: \"#666\"\n      });\n\n    case 'transgender':\n      return __jsx(TransgenderIcon, {\n        color: \"#666\"\n      });\n\n    default:\n      return __jsx(React.Fragment, null);\n  }\n};\n\nconst FavouritePerformerGrid = ({\n  data,\n  success,\n  searching,\n  title,\n  dislike,\n  setFilter,\n  countries,\n  total,\n  query: {\n    limit,\n    offset\n  },\n  placeholderAvatarUrl\n}) => {\n  const renderFlag = country => {\n    const pCountry = countries.find(c => c.code === country);\n    return pCountry && __jsx(\"span\", {\n      className: \"performer-flag\"\n    }, __jsx(\"img\", {\n      alt: \"\",\n      src: pCountry.flag\n    }));\n  };\n\n  return __jsx(Card, {\n    className: \"favorite-performer-grid\",\n    title: title,\n    bordered: false,\n    hoverable: false,\n    actions: [total > 0 && total > limit && __jsx(Pagination, {\n      disabled: searching,\n      current: Math.round(offset / limit) + 1,\n      pageSize: limit,\n      total: total,\n      size: \"small\",\n      onChange: page => setFilter('offset', (page - 1) * limit)\n    })]\n  }, success && data.length > 0 ? data.map(favourite => {\n    var _favourite$performer, _favourite$performer2, _favourite$performer3, _favourite$performer4, _favourite$performer5, _favourite$performer6, _favourite$performer7;\n\n    return __jsx(Card.Grid, {\n      className: \"performer-box\",\n      key: favourite.favoriteId,\n      hoverable: false\n    }, __jsx(Link, {\n      href: {\n        pathname: '/stream',\n        query: {\n          performer: JSON.stringify(favourite.performer)\n        }\n      },\n      as: `/profile/${(_favourite$performer = favourite.performer) === null || _favourite$performer === void 0 ? void 0 : _favourite$performer.username}`\n    }, __jsx(\"a\", {\n      className: \"performer-avatar\"\n    }, __jsx(\"img\", {\n      src: ((_favourite$performer2 = favourite.performer) === null || _favourite$performer2 === void 0 ? void 0 : _favourite$performer2.avatar) || placeholderAvatarUrl,\n      alt: \"\"\n    }))), __jsx(\"div\", {\n      className: \"performer-title\"\n    }, __jsx(\"div\", {\n      className: \"performer-name\"\n    }, __jsx(\"span\", null, ((_favourite$performer3 = favourite.performer) === null || _favourite$performer3 === void 0 ? void 0 : _favourite$performer3.username) || 'N/A')), ((_favourite$performer4 = favourite.performer) === null || _favourite$performer4 === void 0 ? void 0 : _favourite$performer4.dateOfBirth) && __jsx(\"span\", null, \"(\", getAge((_favourite$performer5 = favourite.performer) === null || _favourite$performer5 === void 0 ? void 0 : _favourite$performer5.dateOfBirth), \")\"), renderGender((_favourite$performer6 = favourite.performer) === null || _favourite$performer6 === void 0 ? void 0 : _favourite$performer6.gender), renderFlag((_favourite$performer7 = favourite.performer) === null || _favourite$performer7 === void 0 ? void 0 : _favourite$performer7.country)), __jsx(Popconfirm, {\n      placement: \"bottom\",\n      title: \"Are you sure to dislike this performer!\",\n      onConfirm: () => dislike(favourite.performer),\n      okText: \"Yes\",\n      cancelText: \"No\"\n    }, __jsx(HeartFilled, {\n      className: \"icon\"\n    })));\n  }) : __jsx(\"p\", null, \"No favorites\"));\n};\n\nFavouritePerformerGrid.defaultProps = {\n  total: 0,\n  success: false,\n  title: '',\n  placeholderAvatarUrl: '/no-avatar.png'\n};\n\nconst mapStateToProps = state => ({\n  placeholderAvatarUrl: state.ui.placeholderAvatarUrl\n});\n\nexport default connect(mapStateToProps)(FavouritePerformerGrid);","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/src/components/user/favourite-performer-grid.tsx"],"names":["React","Link","Card","Pagination","Popconfirm","MaleSignIcon","FemaleSignIcon","TransgenderIcon","getAge","HeartFilled","connect","renderGender","gender","FavouritePerformerGrid","data","success","searching","title","dislike","setFilter","countries","total","query","limit","offset","placeholderAvatarUrl","renderFlag","country","pCountry","find","c","code","flag","Math","round","page","length","map","favourite","favoriteId","pathname","performer","JSON","stringify","username","avatar","dateOfBirth","defaultProps","mapStateToProps","state","ui"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IFavourite, GENDER, ICountry } from 'src/interfaces';\nimport Link from 'next/link';\nimport { Card, Pagination, Popconfirm } from 'antd';\nimport {\n  MaleSignIcon,\n  FemaleSignIcon,\n  TransgenderIcon\n} from '@components/common/base/icons';\nimport { getAge } from 'src/lib';\nimport { HeartFilled } from '@ant-design/icons';\nimport './favourite-performer-grid.less';\nimport { connect } from 'react-redux';\n\ninterface IProps {\n  data: IFavourite[];\n  total?: number;\n  success?: boolean;\n  searching: boolean;\n  title?: string | string[];\n  countries: ICountry[];\n  dislike: Function;\n  setFilter: Function;\n  query: {\n    offset: number,\n    limit: number\n  }\n  placeholderAvatarUrl?: string;\n}\n\nconst renderGender = (gender: GENDER) => {\n  switch (gender) {\n    case 'male':\n      return <MaleSignIcon color=\"#666\" />;\n    case 'female':\n      return <FemaleSignIcon color=\"#666\" />;\n    case 'transgender':\n      return <TransgenderIcon color=\"#666\" />;\n    default:\n      return <></>;\n  }\n};\n\nconst FavouritePerformerGrid = ({\n  data,\n  success,\n  searching,\n  title,\n  dislike,\n  setFilter,\n  countries,\n  total,\n  query: { limit, offset },\n  placeholderAvatarUrl\n}: IProps) => {\n  const renderFlag = (country: string) => {\n    const pCountry = countries.find((c) => c.code === country);\n    return pCountry && <span className=\"performer-flag\"><img alt=\"\" src={pCountry.flag} /></span>;\n  };\n\n  return (\n    <Card\n      className=\"favorite-performer-grid\"\n      title={title}\n      bordered={false}\n      hoverable={false}\n      actions={[\n        total > 0 && total > limit && (\n        <Pagination\n          disabled={searching}\n          current={Math.round(offset / limit) + 1}\n          pageSize={limit}\n          total={total}\n          size=\"small\"\n          onChange={(page) => setFilter('offset', (page - 1) * limit)}\n        />\n        )\n      ]}\n    >\n      {success && data.length > 0 ? (\n        data.map((favourite) => (\n          <Card.Grid\n            className=\"performer-box\"\n            key={favourite.favoriteId}\n            hoverable={false}\n          >\n            <Link\n              href={{\n                pathname: '/stream',\n                query: { performer: JSON.stringify(favourite.performer) }\n              }}\n              as={`/profile/${favourite.performer?.username}`}\n            >\n              <a className=\"performer-avatar\">\n                <img src={favourite.performer?.avatar || placeholderAvatarUrl} alt=\"\" />\n              </a>\n            </Link>\n            <div className=\"performer-title\">\n              <div className=\"performer-name\">\n                <span>{favourite.performer?.username || 'N/A'}</span>\n              </div>\n              {favourite.performer?.dateOfBirth && (\n              <span>\n                (\n                  {getAge(favourite.performer?.dateOfBirth)}\n                )\n              </span>\n              )}\n              {renderGender(favourite.performer?.gender)}\n              {renderFlag(favourite.performer?.country)}\n            </div>\n            <Popconfirm\n              placement=\"bottom\"\n              title=\"Are you sure to dislike this performer!\"\n              onConfirm={() => dislike(favourite.performer)}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <HeartFilled className=\"icon\" />\n            </Popconfirm>\n          </Card.Grid>\n        ))) : (\n          <p>No favorites</p>\n      )}\n    </Card>\n  );\n};\nFavouritePerformerGrid.defaultProps = {\n  total: 0,\n  success: false,\n  title: '',\n  placeholderAvatarUrl: '/no-avatar.png'\n};\n\nconst mapStateToProps = (state) => ({ placeholderAvatarUrl: state.ui.placeholderAvatarUrl });\nexport default connect(mapStateToProps)(FavouritePerformerGrid);\n"]},"metadata":{},"sourceType":"module"}