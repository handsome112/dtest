{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport '../index.less';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport FormLogin from '@components/auth/login/performer-login-form';\nimport Head from 'next/head';\nimport { performerlogin, resetLoginData } from '@redux/auth/actions';\nimport { FormRegisterPlaceHolder } from '@components/common/layout';\n\nclass Login extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"rememberMe\", false);\n\n    _defineProperty(this, \"submit\", data => {\n      const {\n        performerlogin: dispatchPerformerlogin\n      } = this.props;\n      dispatchPerformerlogin(_objectSpread(_objectSpread({}, data), {}, {\n        remember: this.rememberMe\n      }));\n    });\n  }\n\n  componentWillUnmount() {\n    const {\n      resetLoginData: resetLogin\n    } = this.props;\n    resetLogin();\n  }\n\n  render() {\n    const {\n      requesting,\n      error,\n      success,\n      ui\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, (ui === null || ui === void 0 ? void 0 : ui.singularTextModel) || 'Performer', ' ', \"Sign in\")), __jsx(\"div\", {\n      className: \"register-page\",\n      style: {}\n    }, __jsx(\"div\", {\n      className: \"form-register-container\"\n    }, __jsx(FormLogin, {\n      requesting: requesting,\n      submit: this.submit.bind(this),\n      error: error,\n      onRemember: value => {\n        this.rememberMe = value;\n      },\n      success: success\n    })), __jsx(FormRegisterPlaceHolder, {\n      ui: ui\n    })));\n  }\n\n}\n\n_defineProperty(Login, \"layout\", 'auth');\n\n_defineProperty(Login, \"authenticate\", false);\n\nconst mapStates = state => _objectSpread(_objectSpread({}, state.auth.userLogin), {}, {\n  ui: state.ui\n});\n\nconst mapDispatch = {\n  performerlogin,\n  resetLoginData\n};\nexport default connect(mapStates, mapDispatch)(Login);","map":{"version":3,"sources":["E:/WorkStation/Moldova/DTEST/pages/auth/login/performer.tsx"],"names":["PureComponent","connect","FormLogin","Head","performerlogin","resetLoginData","FormRegisterPlaceHolder","Login","data","dispatchPerformerlogin","props","remember","rememberMe","componentWillUnmount","resetLogin","render","requesting","error","success","ui","singularTextModel","submit","bind","value","mapStates","state","auth","userLogin","mapDispatch"],"mappings":";;;;;;;;;AAAA,OAAO,eAAP;AACA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,6CAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,qBAA/C;AAEA,SAASC,uBAAT,QAAwC,2BAAxC;;AAYA,MAAMC,KAAN,SAAoBP,aAApB,CAA0C;AAAA;AAAA;;AAAA,wCAK3B,KAL2B;;AAAA,oCAY9BQ,IAAD,IAAkB;AACzB,YAAM;AAAEJ,QAAAA,cAAc,EAAEK;AAAlB,UAA6C,KAAKC,KAAxD;AACAD,MAAAA,sBAAsB,iCACjBD,IADiB;AAEpBG,QAAAA,QAAQ,EAAE,KAAKC;AAFK,SAAtB;AAID,KAlBuC;AAAA;;AAOxCC,EAAAA,oBAAoB,GAAG;AACrB,UAAM;AAAER,MAAAA,cAAc,EAAES;AAAlB,QAAiC,KAAKJ,KAA5C;AACAI,IAAAA,UAAU;AACX;;AAUDC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,UADI;AACQC,MAAAA,KADR;AACeC,MAAAA,OADf;AACwBC,MAAAA;AADxB,QAEF,KAAKT,KAFT;AAGA,WACE,4BACE,MAAC,IAAD,QACE,qBACG,CAAAS,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE,CAAEC,iBAAJ,KAAyB,WAD5B,EAEG,GAFH,YADF,CADF,EAQE;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,KAAK,EAAE;AAAtC,OACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,MAAC,SAAD;AACE,MAAA,UAAU,EAAEJ,UADd;AAEE,MAAA,MAAM,EAAE,KAAKK,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAFV;AAGE,MAAA,KAAK,EAAEL,KAHT;AAIE,MAAA,UAAU,EAAGM,KAAD,IAAW;AAAE,aAAKX,UAAL,GAAkBW,KAAlB;AAA0B,OAJrD;AAKE,MAAA,OAAO,EAAEL;AALX,MADF,CADF,EAUE,MAAC,uBAAD;AAAyB,MAAA,EAAE,EAAEC;AAA7B,MAVF,CARF,CADF;AAuBD;;AA/CuC;;gBAApCZ,K,YACoB,M;;gBADpBA,K,kBAG2B,K;;AA+CjC,MAAMiB,SAAS,GAAIC,KAAD,oCACbA,KAAK,CAACC,IAAN,CAAWC,SADE;AAEhBR,EAAAA,EAAE,EAAEM,KAAK,CAACN;AAFM,EAAlB;;AAIA,MAAMS,WAAW,GAAG;AAAExB,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAApB;AACA,eAAeJ,OAAO,CAACuB,SAAD,EAAYI,WAAZ,CAAP,CAAgCrB,KAAhC,CAAf","sourcesContent":["import '../index.less';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport FormLogin from '@components/auth/login/performer-login-form';\nimport Head from 'next/head';\nimport { performerlogin, resetLoginData } from '@redux/auth/actions';\nimport { ILogin, IUIConfig } from 'src/interfaces';\nimport { FormRegisterPlaceHolder } from '@components/common/layout';\n\ninterface IProps {\n  requesting: boolean;\n  success: boolean;\n  error: any;\n  data: any;\n  performerlogin: Function;\n  ui: IUIConfig;\n  resetLoginData: Function;\n}\n\nclass Login extends PureComponent<IProps> {\n  static layout: string = 'auth';\n\n  static authenticate: boolean = false;\n\n  rememberMe = false;\n\n  componentWillUnmount() {\n    const { resetLoginData: resetLogin } = this.props;\n    resetLogin();\n  }\n\n  submit = (data: ILogin) => {\n    const { performerlogin: dispatchPerformerlogin } = this.props;\n    dispatchPerformerlogin({\n      ...data,\n      remember: this.rememberMe\n    });\n  };\n\n  render() {\n    const {\n      requesting, error, success, ui\n    } = this.props;\n    return (\n      <>\n        <Head>\n          <title>\n            {ui?.singularTextModel || 'Performer'}\n            {' '}\n            Sign in\n          </title>\n        </Head>\n        <div className=\"register-page\" style={{ }}>\n          <div className=\"form-register-container\">\n            <FormLogin\n              requesting={requesting}\n              submit={this.submit.bind(this)}\n              error={error}\n              onRemember={(value) => { this.rememberMe = value; }}\n              success={success}\n            />\n          </div>\n          <FormRegisterPlaceHolder ui={ui} />\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStates = (state: any) => ({\n  ...state.auth.userLogin,\n  ui: state.ui\n});\nconst mapDispatch = { performerlogin, resetLoginData };\nexport default connect(mapStates, mapDispatch)(Login);\n"]},"metadata":{},"sourceType":"module"}